#define NOTMULTIPLECHIPOWERS
using System;
using System.IO;
using System.Linq;
using System.Collections;
using System.Collections.Generic;
using Conquer_Online_Server.Network.GamePackets;
using Conquer_Online_Server.Client;
using NpcDialogs;
using System.Diagnostics;
using Conquer_Online_Server.Game.Features;
using System.Drawing;
using System.Text;
using Conquer_Online_Server.Networking.GamePackets;
using Conquer_Online_Server.Game;
using Conquer_Online_Server.Interfaces;
using System.Collections.Concurrent;
using Conquer_Online_Server.Effect;

namespace Conquer_Online_Server.Network
{
    public static class PacketHandler
    {
        public class WaitDc
        {
            Client.GameClient Who;
            System.Timers.Timer T;
            public WaitDc(Client.GameClient C)
            {
                this.Who = C;
                T = new System.Timers.Timer();
                T.Interval = 1000;
                T.Elapsed += new System.Timers.ElapsedEventHandler(T_Elapsed);
                T.AutoReset = false;
                T.Start();
            }
            void T_Elapsed(object sender, System.Timers.ElapsedEventArgs e)
            {
                Who.Disconnect();
                T.Dispose();
            }
        }
        public static ulong ClientSeal = BitConverter.ToUInt64(Encoding.Default.GetBytes("TQClient"), 0);
        public static string ReadString(byte[] data, ushort position, ushort count)
        {
            StringBuilder builder = new StringBuilder();
            for (byte i = 0; i < count; i = (byte)(i + 1))
            {
                if (i > data.Length)
                {
                    break;
                }
                byte num2 = data[(ushort)(i + position)];
                builder.Append((char)num2);
            }
            return builder.ToString().Replace("\0", "").Replace("\r", "");
        }
        public static void HandlePacket(byte[] packet, Client.GameClient client)
        {

            Conquer_Online_Server.Network.GamePackets.NameChange change;
            Conquer_Online_Server.Database.MySqlReader reader;
            NpcReply reply;  
            uint num12;
            int num40;
            Client.GameClient client2;
            if (packet == null)
                return;
            if (client == null)
                return;
            ushort Length = BitConverter.ToUInt16(packet, 0);
            ushort ID = BitConverter.ToUInt16(packet, 2);

            if (client.Filtering)
                if (client.PacketFilter.Filter(ID))
                    return;

            if (ClientSeal != BitConverter.ToUInt64(packet, Length))
            {
                client.Disconnect();
                return;
            }
            switch (ID)
            {
                #region Packet Spook Mob
                case 2400:
                    {
                        client.Send(new NpcReply(NpcReply.MessageBox, "The Thrilling Spooks are sealed up, inside here Better speak to the Heavenly Master ,if you want more detalis"));
                        #region
                        client.OnMessageBoxOK =
                        delegate
                        {
                            client.Entity.Teleport(8892, 28, 26);
                        };
                        client.OnMessageBoxCANCEL =
                            delegate
                            {
                                client.OnMessageBoxEventParams = new object[0];
                            };
                        #endregion

                        break;
                    }
                #endregion
                #region JingHu
                case 0xa8c:
                    {
                        string str13;
                        switch (packet[4])
                        {
                            case 9:
                                {
                                    str13 = ReadString(packet, 7, packet[6]);
                                    num12 = 0;

                                    if (uint.TryParse(str13, out num12) && Kernel.GamePool.TryGetValue(num12, out client2))
                                    {
                                        if (client2.Entity.MyJiang != null)
                                        {
                                            client2.Entity.MyJiang.SendStatus(client, client2);
                                        }
                                        else
                                        {
                                            client.Send(new Conquer_Online_Server.Network.GamePackets.JiangHuStatus(0) { Name = str13 }.ToArray());
                                        }
                                    }
                                    break;
                                }

                            case 10:
                                {
                                    if (((client.Entity.MyJiang != null) && (client.Entity.MyJiang.MyOldStar != null)) && (client.Entity.ConquerPoints > 20))
                                    {
                                        client.Entity.ConquerPoints -= 20;
                                        client.Entity.MyJiang.GetRoll(client, client.Entity.MyJiang.MyOldStar.PositionStar, client.Entity.MyJiang.MyOldStar.Stage, true);
                                    }
                                    break;
                                }

                            case 13:
                                {
                                    if (client.Entity.MyJiang != null)
                                    {
                                        client.Entity.MyJiang.SendInfo(client, 13, new string[] { client.Entity.MyJiang.FreeCourse.ToString(), client.Entity.MyJiang.Time.ToString() });
                                    }
                                    break;
                                }

                            case 1:
                                {
                                    if (client.Entity.MyJiang == null)
                                    {
                                        byte count = packet[6];
                                        if (count > 0x10)
                                        {
                                            client.Entity.SendSysMesage("You used a name high!");
                                        }
                                        else
                                        {
                                            string source = client.Entity.Name;
                                            if (source.Contains<char>('#'))
                                            {
                                                source = source.Replace('#', ' ');
                                            }
                                            str13 = ReadString(packet, 7, count);
                                            if (Conquer_Online_Server.Game.JiangHu.AllowNameCaracters(str13))
                                            {
                                                client.Entity.MyJiang = new Conquer_Online_Server.Game.JiangHu(client.Entity.UID);
                                                client.Entity.MyJiang.OwnName = source;
                                                client.Entity.MyJiang.JiangName = str13;
                                                client.Entity.MyJiang.SendInfo(client, 14, new string[] { client.Entity.UID.ToString(), client.Entity.MyJiang.Stage.ToString(), client.Entity.MyJiang.Star.ToString() });
                                                client.Send(new Conquer_Online_Server.Network.GamePackets.JiangHuStatus(1) { Name = str13, Talent = client.Entity.MyJiang.Talent, Stage = client.Entity.MyJiang.Stage, StudyPoints = client.Entity.SubClasses.StudyPoints, FreeTimeTodey = client.Entity.MyJiang.FreeTimeTodey }.ToArray());
                                                client.Entity.MyJiang.CreateTime();
                                                client.Entity.MyJiang.UpdateStundyPoints(client, 100);
                                                client.Entity.MyJiang.Stagers[0].Activate = true;
                                                client.Entity.MyJiang.Level = client.Entity.Level;
                                                client.Entity.MyJiang.SendInfo(client, 13, new string[] { client.Entity.MyJiang.FreeCourse.ToString(), client.Entity.MyJiang.Time.ToString() });
                                                client.Entity.MyJiang.SendInfo(client, 5, new string[] { client.Entity.UID.ToString(), client.Entity.MyJiang.Talent.ToString() });
                                                Database.JiangHu.SaveJiangHu();
                                            }
                                            else
                                            {
                                                client.Entity.SendSysMesage("Invalid Name characters");
                                            }
                                        }
                                    }
                                    break;
                                }
                        }
                        break;
                    }
                case 0xa8e:
                    switch (packet[9])
                    {
                        case 0:
                            {
                                byte mStar = packet[10];
                                byte mStage = packet[11];
                                if ((((mStar <= 9) && (mStage <= 9)) && (client.Entity.MyJiang != null)) && (((client.Entity.SubClasses.StudyPoints >= 20) && (client.Entity.MyJiang.Talent >= 1)) && (client.Entity.MyJiang.FreeCourse >= 0x2710)))
                                {
                                    client.Entity.MyJiang.Talent = (byte)(client.Entity.MyJiang.Talent - 1);
                                    client.Entity.MyJiang.FreeCourse -= 0x2710;
                                    client.Entity.SubClasses.StudyPoints = (ushort)(client.Entity.SubClasses.StudyPoints - 20);
                                    client.Entity.MyJiang.GetRoll(client, mStar, mStage, false);
                                    client.Entity.MyJiang.SendInfo(client, 13, new string[] { client.Entity.MyJiang.FreeCourse.ToString(), client.Entity.MyJiang.Time.ToString() });
                                    client.Entity.MyJiang.SendInfo(client, 11, new string[] { mStage.ToString(), mStar.ToString() });
                                    client.Entity.MyJiang.SendInfo(client, 5, new string[] { client.Entity.UID.ToString(), client.Entity.MyJiang.Talent.ToString() });
                                    Database.JiangHu.SaveJiangHu();
                                }
                                break;
                            }
                        case 1:
                            {
                                if (client.Entity.MyJiang != null)
                                {
                                    uint num66 = 20000;
                                    if (client.Entity.ConquerPoints >= num66)
                                    {
                                        client.Entity.ConquerPoints -= num66;
                                        client.Entity.MyJiang.RoundBuyPoints = (byte)Math.Min(0x31, client.Entity.MyJiang.RoundBuyPoints + 1);
                                        client.Entity.MyJiang.FreeCourse += 0x2710;
                                        client.Entity.SubClasses.StudyPoints = (ushort)(client.Entity.SubClasses.StudyPoints + 20);
                                        client.Entity.MyJiang.Talent = (byte)Math.Min(5, client.Entity.MyJiang.Talent + 1);
                                        client.Entity.MyJiang.SendInfo(client, 5, new string[] { client.Entity.UID.ToString(), client.Entity.MyJiang.Talent.ToString() });
                                        client.Entity.MyJiang.UpdateStundyPoints(client, 20);
                                        client.Entity.MyJiang.SendStatus(client, client);
                                        Database.JiangHu.SaveJiangHu();
                                    }
                                    else
                                    {
                                        client.Entity.SendSysMesage("sorry, but you need " + num66);
                                    }
                                }
                                break;
                            }
                    }
                    return;

                case 0xa8f:
                    if (Conquer_Online_Server.Game.JiangHu.JiangHuRanking.TopRank100 != null)
                    {
                        ushort num60 = Conquer_Online_Server.BitConverter.ToUInt16(packet, 4);
                        if ((num60 <= 10) && (num60 != 0))
                        {
                            num60 = (ushort)(num60 - 1);
                            int num61 = num60 * 10;
                            num40 = Math.Min(10, Conquer_Online_Server.Game.JiangHu.JiangHuRanking.TopRank100.Length);
                            Conquer_Online_Server.Network.GamePackets.JiangHuRank rank2 = new Conquer_Online_Server.Network.GamePackets.JiangHuRank((byte)num40)
                            {
                                Page = num60,
                                RegisteredCount = (byte)Math.Min(100, Conquer_Online_Server.Game.JiangHu.JiangHuRanking.TopRank100.Length)
                            };
                            for (byte k = 0; k < num40; k = (byte)(k + 1))
                            {
                                if ((k + num61) >= Conquer_Online_Server.Game.JiangHu.JiangHuRanking.TopRank100.Length)
                                {
                                    break;
                                }
                                Conquer_Online_Server.Game.AttJiangHu hu = Conquer_Online_Server.Game.JiangHu.JiangHuRanking.TopRank100[num61 + k];
                                rank2.Appren(hu.Rank, hu.Inner_Strength, hu.Level, hu.OwnName, hu.JiangName);
                            }
                            client.Send(rank2.ToArray());
                        }
                        return;
                    }
                    return;
                #endregion
                #region ChangeName (2080)
                case 2080:
                    change = new Conquer_Online_Server.Network.GamePackets.NameChange(false);
                    change.Deserialize(packet);
                    if (change.Action == Conquer_Online_Server.Network.GamePackets.NameChange.NameChangeAction.Request)
                    {
                        string name = Encoding.Default.GetString(packet, 10, 0x10).TrimEnd(new char[1]);
                        //  packet[6] = (byte)client.Edite;
                        //  packet[8] = (byte)client.Edita;
                        packet[6] = (byte)client.Entity.namechanges;
                        packet[8] = (byte)(5 - client.Entity.namechanges);
                        change.Send(client);
                        client.Send(change);
                        if ((name != "") && (name != ""))
                        {
                            if (((((!Npcs.InvalidCharacters(name) || !Npcs.InvalidCharacters3(name)) || name.Contains("(")) || name.Contains(")")) || name.Contains("[")) || name.Contains("]"))
                            {
                                reply = new NpcReply(6, "im sorry not allowed now close the dialog and try again!!");
                                reply.OptionID = 0xff;
                                client.Send(reply.ToArray());
                                return;
                            }
                            reader = new Conquer_Online_Server.Database.MySqlReader(new Conquer_Online_Server.Database.MySqlCommand(Conquer_Online_Server.Database.MySqlCommandType.SELECT).Select("entities").Where("name", name));
                            if (reader.Read())
                            {
                                packet[4] = 2;
                                change.Send(client);
                                client.Send(change);
                                reader.Close();
                                // reader.Dispose();
                                return;
                            }
                            if (client.Entity.ConquerPoints >= Conquer_Online_Server.Database.rates.ChangeName)
                            {
                                client.Entity.ConquerPoints -= Conquer_Online_Server.Database.rates.ChangeName;
                                Conquer_Online_Server.Database.MySqlCommand command3 = new Conquer_Online_Server.Database.MySqlCommand(Conquer_Online_Server.Database.MySqlCommandType.UPDATE);
                                command3.Update("entities").Set("Name", name).Where("UID", (long)client.Entity.UID).Execute();
                                reader.Close();
                                // reader.Dispose();
                                client.Entity.NewName = name;
                                Conquer_Online_Server.Console.WriteLine(client.Entity.Name + ", Changed hes Name to : " + name);
                                Kernel.SendWorldMessage(new Conquer_Online_Server.Network.GamePackets.Message(client.Entity.Name + ", Changed He's/Hers Name to " + name + ", Will be affected after Maint.", System.Drawing.Color.White, Network.GamePackets.Message.Center), Program.GamePool);
                                // client.Edita = 0;
                                //  client.Edite = 1;     
                                client.Entity.namechanges += 1;
                                packet[4] = 1;
                                change.Send(client);
                                client.Send(change);
                                reply = new NpcReply(6, "Your new name is : " + name + ", After server Restart You will get your new name By.Mrkeka.")
                                {
                                    OptionID = 0xff
                                };
                                client.Send(reply.ToArray());
                                client.Disconnect();
                            }
                            else
                            {
                                reply = new NpcReply(6, "Come back when you have " + Conquer_Online_Server.Database.rates.ChangeName + " CPS.")
                                {
                                    OptionID = 0xff
                                };
                                client.Send(reply.ToArray());
                                reader.Close();
                                // reader.Dispose();
                            }
                        }
                    }
                    return;
                #endregion ChangeName (2080)  
                #region Clone Attack
                case 2812:
                    {
                        var attackd = BitConverter.ToUInt32(packet, 4);
                        var type = packet[8];
                        var attackr = BitConverter.ToUInt32(packet, 9);

                        var attack = client.Entity.AttackPacket;
                        if (attack == null)
                            return;
                        attack.Attacker = attackr;
                        attack.Attacked = attackd;

                        if (client.Entity.MyClones.Count == 0)
                            return;
                        if (attackr == client.Entity.UID)
                            return;
                        Entity Clone = null;
                        if (client.Entity.MyClones.TryGetValue(attackr, out Clone))
                        {
                            Entity attacked = null;
                            SobNpcSpawn attackedsob = null;
                            if (client.Screen.TryGetValue(attackd, out attacked))
                            {
                                if (Game.Attacking.Handle.CanAttack(client.Entity, attacked, null, attack.AttackType == GamePackets.Attack.Melee))
                                {
                                    var spell = Database.SpellTable.GetSpell(attack.MagicType, (byte)attack.MagicLevel);
                                    uint damage = 0;
                                    if (attack.AttackType == GamePackets.Attack.Melee)
                                        damage = Game.Attacking.Calculate.Melee(client.Entity, attacked, ref attack);
                                    else if (attack.AttackType == GamePackets.Attack.Ranged)
                                        damage = Game.Attacking.Calculate.Ranged(client.Entity, attacked, ref attack);
                                    else
                                        damage = Game.Attacking.Calculate.Magic(client.Entity, attackedsob, spell, ref attack);

                                    damage = (uint)((double)damage * 0.6);
                                    Game.Attacking.Handle.ReceiveAttack(Clone, attacked, attack, damage, spell);
                                    attack.Damage = damage;
                                    client.SendScreen(attack);
                                }
                            }
                            else if (client.Screen.TryGetSob(attackd, out attackedsob))
                            {
                                if (Game.Attacking.Handle.CanAttack(client.Entity, attackedsob, null))
                                {
                                    var spell = Database.SpellTable.GetSpell(attack.MagicType, (byte)attack.MagicLevel);
                                    uint damage = 0;
                                    if (attack.AttackType == GamePackets.Attack.Melee)
                                        damage = Game.Attacking.Calculate.Melee(client.Entity, attackedsob, ref attack);
                                    else if (attack.AttackType == GamePackets.Attack.Ranged)
                                        damage = Game.Attacking.Calculate.Ranged(client.Entity, attackedsob, ref attack);
                                    if (attack.AttackType == GamePackets.Attack.Magic)
                                        damage = Game.Attacking.Calculate.Magic(client.Entity, attackedsob, spell, ref attack);

                                    damage = (uint)((double)damage * 0.6);
                                    Game.Attacking.Handle.ReceiveAttack(Clone, attackedsob, attack, damage, spell);
                                    attack.Damage = damage;
                                    client.SendScreen(attack);
                                }
                            }
                        }
                        break;
                    }
                #endregion  
                #region CurrentLocation
                case 0x97E:
                    {
                        if (CrossServer.IsWar == true)
                        {
                            client.Entity.SendSysMesage("You can't change your flag while CrossServerCTF running");
                            break;
                        }
                        CurrentLocationPacket cur = new CurrentLocationPacket(packet);
                        client.Entity.CountryID = cur.CountryID;
                        cur.HeroID = client.Entity.UID;
                        client.SendScreen(cur, true);
                        client.Entity.SendSysMesage(System.Convert.ToString(client.Entity.CountryID));
                        break;
                    }
                #endregion
                #region One Armed Bandit (1351 + 1352)
                case 1351:
                    {
                        SlotMachineRequest req = new SlotMachineRequest();
                        req.Deserialize(packet);
                        switch (req.Mode)
                        {
                            case SlotMachineSubType.StartSpin:
                                {
                                    if (client.SMSpinCount >= 10)
                                    {
                                        Npcs dialog = new Npcs(client);
                                        client.ActiveNpc = 9999998;
                                        client.SMCaptcha = client.GenerateCaptcha(5);
                                        client.SMPacket = packet;
                                        dialog.Text("You have spun the wheel 10 times. Input the current text: " + client.SMCaptcha + " to verify your humanity.");
                                        dialog.Input("Captcha message:", 1, (byte)client.SMCaptcha.Length);
                                        dialog.Option("No thank you.", 255);
                                        dialog.Send();
                                        return;
                                    }
                                    client.SMSpinCount++;
                                    INpc npc = client.Screen.SelectWhere<INpc>(MapObjectType.Npc, (o) => o.UID == req.NpcID).ElementAtOrDefault(0);
                                    if (npc != null)
                                    {
                                        if (npc.Mesh / 10 >= 1977 && npc.Mesh / 10 <= 1980)
                                        {
                                            int id = npc.Mesh / 10 - 1977;
                                            uint cost = 10000;
                                            bool cps = id != 0;
                                            if (id == 1) cost = 3;
                                            if (id == 2) cost = 10;
                                            if (id == 3) cost = 100;
                                            cost *= req.BetMultiplier;
                                            if ((cps && client.Entity.ConquerPoints >= cost) || (!cps && client.Entity.Money >= cost))
                                            {
                                                if (cps) client.Entity.ConquerPoints -= cost;
                                                else client.Entity.Money -= cost;
                                                client.SlotMachine = new Game.ConquerStructures.SlotMachine(req.NpcID, cost, cps);
                                                client.SlotMachine.SpinTheWheels();
                                                client.SlotMachine.SendWheelsToClient(client);
                                            }
                                        }
                                    }
                                    break;
                                }
                            case SlotMachineSubType.ClientFinishSpin:
                                {
                                    if (client.SlotMachine != null)
                                    {
                                        uint reward = client.SlotMachine.GetRewardAmount(client);
                                        if (client.SlotMachine.Cps) client.Entity.ConquerPoints += reward;
                                        else client.Entity.Money += reward;
                                        client.Send(new SlotMachineResponse() { NpcID = req.NpcID, Mode = SlotMachineSubType.StopSpin });
                                        client.SlotMachine = null;
                                    }
                                    break;
                                }
                        }
                        break;
                    }
                #endregion
                #region EnitityCreate (1001)
                case 1001:
                    {
                        if (client.Action == 1)
                        {
                            EnitityCreate EC = new EnitityCreate();
                            EC.Deserialize(packet);
                            if (EC.Name.Contains("~") || EC.Name.Contains("Guard"))
                            {
                                client.Send(new Message("Chose a name without '~'!", "ALLUSERS", System.Drawing.Color.Orange, GamePackets.Message.PopUP));
                                return;
                            }
                            EC.Name = EC.Name.Remove("pm").Remove("gm").Remove("owwner").Remove("~").Remove("¶").Remove("");
                            string Message = "";
                            Boolean Created = Database.EntityTable.CreateEntity(EC, client, ref Message);
                            if (Created)
                            {
                                client.JustCreated = true;
                                client.Send(new Message(Message, "ALLUSERS", System.Drawing.Color.Orange, GamePackets.Message.PopUP));
                                //client.Send(new Message("Your character have been createed. Try to relogin.", "ALLUSERS", System.Drawing.Color.Orange, GamePackets.Message.PopUP));
                                //client.Disconnect(false);
                            }
                            else
                                client.Send(new Message(Message, "ALLUSERS", System.Drawing.Color.Orange, GamePackets.Message.PopUP));

                            if (Created)
                                Console.WriteLine(client.Account.Username + " Sucesfully Created a new Character " + EC.Name);

                        }
                        break;
                    }
                #endregion
                #region Chat/Message (1004)
                case 1004:
                    {
                        if (client.Action != 2)
                            return;
                        Message message = new Message();
                        message.Deserialize(packet);
                        if (message.__Message.Split(new string[] { "\\n" }, StringSplitOptions.RemoveEmptyEntries).Length > 0)
                            message.__Message = message.__Message.Split(new string[] { "\\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
                        Chat(message, client);
                        break;
                    }
                #endregion
                #region Item/Ping (1009)
                case 1009:
                    {
                        if (client.Action != 2)
                            return;
                        ItemUsage usage = new ItemUsage(false);
                        usage.Deserialize(packet);
                        if (!client.Entity.Dead || usage.ID == ItemUsage.Ping)
                        {
                            switch (usage.ID)
                            {
                                case 53:
                                    {
                                        uint ItemAdd = BitConverter.ToUInt32(packet, 12);
                                        //:))) that npc is maked by me

                                        ConquerItem item_new = null;
                                        if (client.Inventory.TryGetItem(ItemAdd, out item_new))
                                        {
                                            uint obtined_points = 0;
                                            Database.ConquerItemInformation iteminfo = new Conquer_Online_Server.Database.ConquerItemInformation(ItemAdd, 0);
                                            Dictionary<uint, uint> amount = new Dictionary<uint, uint>();//packet[20]);
                                            for (ushort i = 88; i < 88 + 4 * packet[24]; i += 4)
                                            {
                                                uint item_swap = BitConverter.ToUInt32(packet, i);
                                                if (client.Inventory.ContainsUID(item_swap))
                                                {
                                                    ConquerItem item = null;
                                                    if (client.Inventory.TryGetItem(item_swap, out item))
                                                    {
                                                        amount.Add(item_swap, i);
                                                    }
                                                    switch (item.ID)
                                                    {
                                                        case 191505:
                                                        case 191605:
                                                        case 191705:
                                                        case 191805:
                                                        case 191905:
                                                        case 191405:
                                                        case 183325:
                                                        case 183315:
                                                        case 183375:
                                                        case 183305:
                                                            {
                                                                obtined_points += 300;
                                                                break;
                                                            }
                                                        default:
                                                            obtined_points += 50;
                                                            break;
                                                    }
                                                }
                                            }
                                            if (iteminfo.BaseInformation.ConquerPointsWorth > obtined_points)
                                            {
                                                uint add_cps = 0;
                                                add_cps = (uint)(iteminfo.BaseInformation.ConquerPointsWorth - obtined_points);
                                                if (add_cps < client.Entity.ConquerPoints)
                                                {
                                                    client.Entity.ConquerPoints -= (uint)add_cps;
                                                    foreach (uint key in amount.Keys)
                                                    {
                                                        if (client.Inventory.ContainsUID(key))
                                                            client.Inventory.Remove(key, Conquer_Online_Server.Game.Enums.ItemUse.Remove, true);
                                                    }
                                                    client.Inventory.Add(ItemAdd, 0, 1);

                                                }
                                            }
                                            else
                                            {
                                                foreach (uint key in amount.Keys)
                                                {
                                                    if (client.Inventory.ContainsUID(key))
                                                        client.Inventory.Remove(key, Conquer_Online_Server.Game.Enums.ItemUse.Remove, true);
                                                }
                                                client.Inventory.Add(ItemAdd, 0, 1);

                                            }
                                        }
                                        break;
                                    }
                                case ItemUsage.MainEquipment:
                                case ItemUsage.AlternateEquipment:
                                    {
                                        if (client.Entity.ContainsFlag3(Update.Flags3.Assassin))
                                        {
                                            client.Send(new Message("You cannot switch between equipments while being an assasin!",
                                                Color.Red, Message.Agate));
                                            return;
                                        }
                                        SwitchEquipment(client, usage.ID == ItemUsage.AlternateEquipment);
                                        client.Send(new ClientEquip(client));
                                        break;
                                    }
                                case 52:
                                    {
                                        var item = Database.ConquerItemTable.LoadItem(usage.UID);
                                        item.Mode = Conquer_Online_Server.Game.Enums.ItemMode.ChatItem;
                                        item.Send(client);
                                        break;
                                    }
                                case 41:
                                    {
                                        var item = Database.ConquerItemTable.LoadItem(usage.UID);
                                        usage.dwParam = 5;
                                        client.Send(usage);
                                        break;
                                    }
                                case ItemUsage.ArrowReload:
                                    {
                                        lock (client.ItemSyncRoot)
                                            ReloadArrows(client.Equipment.TryGetItem(ConquerItem.LeftWeapon), client);
                                        break;
                                    }
                                case ItemUsage.ShowBoothItems:
                                    {
                                        lock (client.ItemSyncRoot)
                                            ShowBoothItems(usage, client);
                                        break;
                                    }
                                case ItemUsage.AddItemOnBoothForSilvers:
                                case ItemUsage.AddItemOnBoothForConquerPoints:
                                    {
                                        lock (client.ItemSyncRoot)
                                            AddItemOnBooth(usage, client);
                                        break;
                                    }
                                case ItemUsage.BuyFromBooth:
                                    {
                                        if (client.Entity.PokerTable > 0) break;
                                        lock (client.ItemSyncRoot)
                                            BuyFromBooth(usage, client);
                                        break;
                                    }
                                case ItemUsage.RemoveItemFromBooth:
                                    {
                                        lock (client.ItemSyncRoot)
                                            RemoveItemFromBooth(usage, client);
                                        break;
                                    }
                                case ItemUsage.EquipItem:
                                    {
                                        lock (client.ItemSyncRoot)
                                            EquipItem(usage, client);
                                        break;
                                    }

                                case ItemUsage.UnequipItem:
                                    {
                                        lock (client.ItemSyncRoot)
                                            UnequipItem(usage, client);
                                        client.Equipment.UpdateEntityPacket();
                                        break;
                                    }
                                case 55:
                                case ItemUsage.BuyFromNPC:
                                    {
                                        if (client.Entity.PokerTable > 0) break;
                                        lock (client.ItemSyncRoot)
                                            HandleBuyFromNPC(usage, client);
                                        break;
                                    }
                                case ItemUsage.SellToNPC:
                                    {
                                        lock (client.ItemSyncRoot)
                                            HandleSellToNPC(usage, client);
                                        break;
                                    }

                                case ItemUsage.VIPRepair:
                                    {
                                        HandleVIPRepair(usage, client);
                                        break;
                                    }
                                case ItemUsage.Repair:
                                    {
                                        lock (client.ItemSyncRoot)
                                            HandleRepair(usage, client);
                                        break;
                                    }
                                case ItemUsage.MeteorUpgrade:
                                case ItemUsage.DragonBallUpgrade:
                                    {
                                        UpgradeItem(usage, client);
                                        break;
                                    }
                                case ItemUsage.Ping:
                                    {
                                        //Console.WriteLine(client.Entity.Name + " Ping: " + (Time32.timeGetTime() - usage.TimeStamp));
                                        //if (client.LastPingStamp == 0)
                                        //{
                                        //    client.LastPingStamp = usage.TimeStamp;
                                        //    client.Send(usage);
                                        //}
                                        //else
                                        //{
                                        //    //uint delta = usage.TimeStamp - client.LastPingStamp;
                                        //    //client.LastPingStamp = usage.TimeStamp;
                                        //    //uint add = delta - 10000;
                                        //    //usage.TimeStamp -= delta;
                                        //    //usage.TimeStamp += (add *4 ) + delta;
                                        //    client.Send(usage);//done
                                        //}
                                        //client.LastPingT = client.LastPing;
                                        //client.LastPing = Time32.Now;
                                        //usage.TimeStamp =(uint) Environment.TickCount;
                                        client.Send(usage);
                                        break;
                                    }
                                case ItemUsage.ViewWarehouse:
                                    {
                                        usage.dwParam = client.MoneySave;
                                        client.Send(usage);
                                        break;
                                    }
                                case ItemUsage.WarehouseDeposit:
                                    {
                                        if (client.Entity.Money >= usage.dwParam)
                                        {
                                            client.Entity.Money -= usage.dwParam;
                                            client.MoneySave += usage.dwParam;
                                        }
                                        break;
                                    }
                                case ItemUsage.WarehouseWithdraw:
                                    {
                                        if (client.MoneySave >= usage.dwParam)
                                        {
                                            client.Entity.Money += usage.dwParam;
                                            client.MoneySave -= usage.dwParam;
                                        }
                                        break;
                                    }
                                case ItemUsage.DropItem:
                                    {
                                        DropItem(usage, client);
                                        break;
                                    }
                                case ItemUsage.DropMoney:
                                    {
                                        DropMoney(usage, client);
                                        break;
                                    }
                                case ItemUsage.Enchant:
                                    {
                                        EnchantItem(usage, client);
                                        break;
                                    }
                                case ItemUsage.SocketTalismanWithItem:
                                    {
                                        //  PrintPacket(packet);
                                        usage.dwParam = BitConverter.ToUInt32(packet, 88);
                                        SocketTalismanWithItem(usage, client);
                                        break;
                                    }
                                case ItemUsage.SocketTalismanWithCPs:
                                    {
                                        SocketTalismanWithCPs(usage, client);
                                        break;
                                    }
                                case ItemUsage.RedeemGear:
                                    {
                                        var item = client.DeatinedItem[usage.UID];
                                        if (item != null)
                                        {
                                            if (DateTime.Now > item.Date.AddDays(7))
                                            {
                                                client.Send(new Message("This item is expired!", System.Drawing.Color.Red, Message.TopLeft));

                                                return;
                                            }
                                            if (client.Entity.ConquerPoints >= item.ConquerPointsCost && client.Inventory.Count < 40)
                                            {
                                                client.Entity.ConquerPoints -= item.ConquerPointsCost;
                                                Database.EntityTable.UpdateCps(client);

                                                usage.dwParam = client.Entity.UID;
                                                usage.dwExtraInfo3 = item.ConquerPointsCost;
                                                client.Send(usage);

                                                client.Inventory.Add(item.Item, Conquer_Online_Server.Game.Enums.ItemUse.Add);

                                                Database.ClaimItemTable.Redeem(item, client);
                                                Database.DetainedItemTable.Claim(item, client);
                                                client.DeatinedItem.Remove(item.UID);

                                                if (Kernel.GamePool.ContainsKey(item.GainerUID))
                                                {
                                                    GameClient pClient;
                                                    if (Kernel.GamePool.TryGetValue(item.GainerUID, out pClient))
                                                    {
                                                        if (pClient.Entity != null && pClient != null && pClient.ClaimableItem != null)
                                                        {
                                                            pClient.ClaimableItem[item.UID].OwnerUID = 500;
                                                            pClient.ClaimableItem[item.UID].MakeItReadyToClaim();
                                                            usage.dwParam = pClient.Entity.UID;
                                                            usage.ID = ItemUsage.ClaimGear;
                                                            pClient.Send(usage);
                                                            pClient.ClaimableItem[item.UID].Send(pClient);
                                                        }
                                                    }
                                                }

                                                Message message = new Message(" " + client.Entity.Name + " has redeemed his Gear and Pay " + item.ConquerPointsCost + " CPS . Congratulations!", System.Drawing.Color.Wheat, Message.Talk);
                                                Kernel.SendWorldMessage(message, Program.GamePool);
                                            }
                                        }
                                        else
                                        {
                                            client.Send(new Message("The item you want to redeem has already been redeemed.", System.Drawing.Color.Red, Message.TopLeft));
                                        }
                                        break;
                                    }
                                case ItemUsage.ClaimGear:
                                    {
                                        if (client.Inventory.Count < 40)
                                        {
                                            var item = client.ClaimableItem[usage.UID];
                                            if (item != null)
                                            {
                                                if (item.Bound && item.OwnerUID != 500)
                                                {
                                                    if (DateTime.Now >= item.Date.AddDays(7))
                                                    {
                                                        Database.ClaimItemTable.Claim(item, client);
                                                        client.ClaimableItem.Remove(item.UID);

                                                        usage.dwParam = client.Entity.UID;
                                                        usage.dwExtraInfo3 = item.ConquerPointsCost;
                                                        client.Send(usage);
                                                    }
                                                    client.Send(new Message("Unnclaimable item!", System.Drawing.Color.Red, Message.TopLeft));
                                                    return;
                                                }
                                                if (DateTime.Now < item.Date.AddDays(7) && item.OwnerUID != 500)
                                                {
                                                    client.Send(new Message("This item is not expired. You cannot claim it yet!", System.Drawing.Color.Red, Message.TopLeft));
                                                    return;
                                                }
                                                if (item.OwnerUID == 500)
                                                    client.Entity.ConquerPoints += item.ConquerPointsCost;
                                                else
                                                {
                                                    client.Inventory.Add(item.Item, Conquer_Online_Server.Game.Enums.ItemUse.Move);
                                                    Message message = new Message("Thank you for arresting " + item.OwnerName + " , " + item.GainerName + ". The arrested one has redeemed his items and you have received a great deal of ConquerPoints as reward. Congratulations!", System.Drawing.Color.Wheat, Message.Talk);
                                                    Kernel.SendWorldMessage(message, Program.GamePool);
                                                }
                                                Database.ClaimItemTable.Claim(item, client);
                                                client.ClaimableItem.Remove(item.UID);

                                                usage.dwParam = client.Entity.UID;
                                                usage.dwExtraInfo3 = item.ConquerPointsCost;
                                                //Database.EntityTable.UpdateCps(client);
                                                client.Send(usage);
                                                Message message2 = new Message("Thank you for arresting red/black name players " + client.Entity.Name + " has recived " + item.ConquerPointsCost + " CPS . Congratulations!", System.Drawing.Color.Wheat, Message.Talk);
                                                Kernel.SendWorldMessage(message2, Program.GamePool);
                                            }
                                            else
                                            {
                                                client.Send(new Message("The item you want to claim has already been claimed.", System.Drawing.Color.Red, Message.TopLeft));
                                            }
                                        }
                                        break;
                                    }
                                case 43:
                                    {
                                        uint UID = BitConverter.ToUInt32(packet, 8);
                                        if (packet[24] == 1)
                                        {
                                            if (client.Inventory.ContainsUID(BitConverter.ToUInt32(packet, 88)))//76
                                            {
                                                ConquerItem item = null;
                                                if (client.Inventory.TryGetItem(UID, out item))
                                                {
                                                    ushort pos = ItemPosition(item.ID);
                                                    if (pos == ConquerItem.Bottle || pos == ConquerItem.Fan || pos == ConquerItem.Garment || pos == ConquerItem.LeftWeaponAccessory || pos == ConquerItem.RightWeaponAccessory || pos == ConquerItem.Steed || pos == ConquerItem.SteedArmor || pos == ConquerItem.SteedCrop || pos == ConquerItem.Tower)
                                                    {
                                                        client.Send(new Message("Sorry can't make socket in this item !", System.Drawing.Color.Red, Message.Talk));
                                                        return;
                                                    }
                                                    if (item.SocketOne == Conquer_Online_Server.Game.Enums.Gem.NoSocket)
                                                    {
                                                        if (item.SocketOne == Conquer_Online_Server.Game.Enums.Gem.NoSocket)
                                                        {
                                                            if (item.SocketOne == Conquer_Online_Server.Game.Enums.Gem.NoSocket)
                                                                item.SocketOne = Conquer_Online_Server.Game.Enums.Gem.EmptySocket;
                                                            client.Inventory.Remove(BitConverter.ToUInt32(packet, 88), Conquer_Online_Server.Game.Enums.ItemUse.Remove, true);
                                                            item.Mode = Conquer_Online_Server.Game.Enums.ItemMode.Update;
                                                            item.Send(client);
                                                            usage.dwParam = 1;
                                                            client.LoadItemStats();
                                                            Database.ConquerItemTable.UpdateSockets(item);
                                                        }
                                                    }
                                                    else if (item.SocketTwo == Conquer_Online_Server.Game.Enums.Gem.NoSocket)
                                                    {
                                                        uint rand = (uint)Conquer_Online_Server.Kernel.Random.Next(1, 700);
                                                        if (rand > 320)
                                                        // if (Conquer_Online_Server.Kernel.PercentSuccess(30))
                                                        {
                                                            if (item.SocketTwo == Conquer_Online_Server.Game.Enums.Gem.NoSocket)
                                                                item.SocketTwo = Conquer_Online_Server.Game.Enums.Gem.EmptySocket;
                                                            client.Inventory.Remove(BitConverter.ToUInt32(packet, 88), Conquer_Online_Server.Game.Enums.ItemUse.Remove, true);
                                                            item.Mode = Conquer_Online_Server.Game.Enums.ItemMode.Update;
                                                            item.Send(client);
                                                            usage.dwParam = 1;
                                                            client.LoadItemStats();
                                                            Database.ConquerItemTable.UpdateSockets(item);
                                                        }
                                                        else
                                                        {
                                                            usage.dwParam = 0;
                                                            client.Inventory.Add(1200006, 0, 1);
                                                            client.Inventory.Remove(BitConverter.ToUInt32(packet, 88), Conquer_Online_Server.Game.Enums.ItemUse.Remove, true);
                                                        }
                                                    }
                                                    /*&  }
                                                      else
                                                      {
                                                          if (item.SocketOne == Conquer_Online_Server.Game.Enums.Gem.NoSocket)
                                                              item.SocketOne = Conquer_Online_Server.Game.Enums.Gem.EmptySocket;
                                                          client.Inventory.Remove(BitConverter.ToUInt32(packet, 80), Conquer_Online_Server.Game.Enums.ItemUse.Remove, true);
                                                          item.Mode = Conquer_Online_Server.Game.Enums.ItemMode.Update;
                                                          item.Send(client);
                                                          client.LoadItemStats();
                                                          Database.ConquerItemTable.UpdateItem(item, client);
                                                      }*/
                                                }
                                            }
                                        }
                                        if (packet[24] == 5)
                                        {
                                            ConquerItem item = null;
                                            if (client.Inventory.TryGetItem(UID, out item))
                                            {
                                                Dictionary<uint, uint> dbs = new Dictionary<uint, uint>();//packet[20]);
                                                for (ushort i = 88; i < 88 + 4 * packet[24]; i += 4)
                                                {
                                                    if (client.Inventory.ContainsUID(BitConverter.ToUInt32(packet, i)))
                                                    {
                                                        dbs.Add(BitConverter.ToUInt32(packet, i), i);
                                                    }
                                                }

                                                if (client.Inventory.Contains(1088000, 5))
                                                {

                                                    ushort pos = ItemPosition(item.ID);
                                                    if (pos == ConquerItem.Bottle || pos == ConquerItem.Fan || pos == ConquerItem.Garment || pos == ConquerItem.LeftWeaponAccessory || pos == ConquerItem.RightWeaponAccessory || pos == ConquerItem.Steed || pos == ConquerItem.SteedArmor || pos == ConquerItem.SteedCrop || pos == ConquerItem.Tower)
                                                    {
                                                        client.Send(new Message("Sorry can't make socket in this item !", System.Drawing.Color.Red, Message.Talk));
                                                        return;
                                                    }
                                                    if (item.SocketOne == Conquer_Online_Server.Game.Enums.Gem.NoSocket)
                                                        return;
                                                    if (item.SocketTwo == Conquer_Online_Server.Game.Enums.Gem.NoSocket)
                                                        item.SocketTwo = Conquer_Online_Server.Game.Enums.Gem.EmptySocket;
                                                    foreach (uint key in dbs.Keys)
                                                    {
                                                        if (client.Inventory.ContainsUID(key))
                                                            client.Inventory.Remove(key, Conquer_Online_Server.Game.Enums.ItemUse.Remove, true);
                                                    }
                                                    usage.dwParam = 1;
                                                    item.Mode = Conquer_Online_Server.Game.Enums.ItemMode.Update;
                                                    item.Send(client);
                                                    client.LoadItemStats();
                                                    Database.ConquerItemTable.UpdateSockets(item);
                                                }
                                            }
                                        }
                                        if (packet[24] == 7)
                                        {
                                            ConquerItem item = null;
                                            if (client.Inventory.TryGetItem(UID, out item))
                                            {
                                                if (item.SocketOne == Conquer_Online_Server.Game.Enums.Gem.NoSocket)
                                                    return;

                                                Dictionary<uint, uint> drill = new Dictionary<uint, uint>();//packet[20]);
                                                for (ushort i = 88; i < 88 + 4 * packet[24]; i += 4)
                                                {
                                                    if (client.Inventory.ContainsUID(BitConverter.ToUInt32(packet, i)))
                                                    {
                                                        drill.Add(BitConverter.ToUInt32(packet, i), i);
                                                    }
                                                }

                                                if (client.Inventory.Contains(1200006, 7))
                                                {
                                                    var itemtype = item.GetItemType();
                                                    if (itemtype == ConquerItem.ItemTypes.CropID || itemtype == ConquerItem.ItemTypes.BottleID || itemtype == ConquerItem.ItemTypes.GarmentID_1 || itemtype == ConquerItem.ItemTypes.GarmentID_2 || itemtype == ConquerItem.ItemTypes.GemID || itemtype == ConquerItem.ItemTypes.LeftAccessory || itemtype == ConquerItem.ItemTypes.RightAccessory1 || itemtype == ConquerItem.ItemTypes.RightAccessory2 || itemtype == ConquerItem.ItemTypes.RightAccessory3 || itemtype == ConquerItem.ItemTypes.SteedArmorID)
                                                        return;
                                                    if (item.SocketTwo == Conquer_Online_Server.Game.Enums.Gem.NoSocket)
                                                        item.SocketTwo = Conquer_Online_Server.Game.Enums.Gem.EmptySocket;
                                                    foreach (uint key in drill.Keys)
                                                    {
                                                        if (client.Inventory.ContainsUID(key))
                                                            client.Inventory.Remove(key, Conquer_Online_Server.Game.Enums.ItemUse.Remove, true);
                                                    }
                                                    usage.dwParam = 1;
                                                    item.Mode = Conquer_Online_Server.Game.Enums.ItemMode.Update;
                                                    item.Send(client);
                                                    client.LoadItemStats();
                                                    Database.ConquerItemTable.UpdateSockets(item);
                                                }
                                            }
                                        }
                                        if (packet[24] == 12)
                                        {
                                            ConquerItem item = null;
                                            if (client.Inventory.TryGetItem(UID, out item))
                                            {
                                                ushort pos = ItemPosition(item.ID);
                                                if (pos == ConquerItem.Bottle || pos == ConquerItem.Fan || pos == ConquerItem.Garment || pos == ConquerItem.LeftWeaponAccessory || pos == ConquerItem.RightWeaponAccessory || pos == ConquerItem.Steed || pos == ConquerItem.SteedArmor || pos == ConquerItem.SteedCrop || pos == ConquerItem.Tower)
                                                {
                                                    client.Send(new Message("Sorry can't make socket in this item !", System.Drawing.Color.Red, Message.Talk));
                                                    return;
                                                }
                                                Dictionary<uint, uint> dbs = new Dictionary<uint, uint>();//packet[20]);
                                                for (ushort i = 88; i < 88 + 4 * packet[24]; i += 4)
                                                {
                                                    if (client.Inventory.ContainsUID(BitConverter.ToUInt32(packet, i)))
                                                    {
                                                        dbs.Add(BitConverter.ToUInt32(packet, i), i);
                                                    }
                                                }

                                                if (client.Inventory.Contains(1088000, 12))
                                                {
                                                    var itemtype = item.GetItemType();
                                                    if (itemtype == ConquerItem.ItemTypes.CropID || itemtype == ConquerItem.ItemTypes.BottleID || itemtype == ConquerItem.ItemTypes.GarmentID_1 || itemtype == ConquerItem.ItemTypes.GarmentID_2 || itemtype == ConquerItem.ItemTypes.GemID || itemtype == ConquerItem.ItemTypes.LeftAccessory || itemtype == ConquerItem.ItemTypes.RightAccessory1 || itemtype == ConquerItem.ItemTypes.RightAccessory2 || itemtype == ConquerItem.ItemTypes.RightAccessory3 || itemtype == ConquerItem.ItemTypes.SteedArmorID)
                                                        return;
                                                    if (item.SocketOne != Conquer_Online_Server.Game.Enums.Gem.NoSocket)
                                                        return;
                                                    if (item.SocketOne == Conquer_Online_Server.Game.Enums.Gem.NoSocket)
                                                        item.SocketOne = Conquer_Online_Server.Game.Enums.Gem.EmptySocket;
                                                    foreach (uint key in dbs.Keys)
                                                    {
                                                        if (client.Inventory.ContainsUID(key))
                                                            client.Inventory.Remove(key, Conquer_Online_Server.Game.Enums.ItemUse.Remove, true);
                                                    }
                                                    usage.dwParam = 1;
                                                    //client.Inventory.Remove(DragonBall, 12);
                                                    item.Mode = Conquer_Online_Server.Game.Enums.ItemMode.Update;
                                                    item.Send(client);
                                                    client.LoadItemStats();
                                                    Database.ConquerItemTable.UpdateSockets(item);
                                                }
                                            }

                                        }
                                        client.Send(packet);
                                        break;
                                    }
                                case 40:
                                    {
                                        uint ItemAdd = BitConverter.ToUInt32(packet, 8);

                                        ConquerItem item_new = null;
                                        if (client.Inventory.TryGetItem(ItemAdd, out item_new))
                                        {
                                            var itemtype = item_new.GetItemType();
                                            if (itemtype == ConquerItem.ItemTypes.GemID)
                                                return;
                                            ushort pos = ItemPosition(item_new.ID);
                                            if (pos == ConquerItem.Bottle || pos == ConquerItem.Fan || pos == ConquerItem.Garment || pos == ConquerItem.LeftWeaponAccessory || pos == ConquerItem.RightWeaponAccessory || pos == ConquerItem.Steed || pos == ConquerItem.SteedArmor || pos == ConquerItem.SteedCrop || pos == ConquerItem.Tower)
                                            {
                                                client.Send(new Message("Sorry can't bless this item !", System.Drawing.Color.Red, Message.Talk));
                                                return;
                                            }
                                            if (item_new.Bless >= 7)
                                                return;
                                            Queue<uint> amount = new Queue<uint>(packet[24]);

                                            for (ushort i = 88; i < 88 + 4 * packet[24]; i += 4)
                                            {
                                                uint uid = BitConverter.ToUInt32(packet, i);
                                                if (client.Inventory.ContainsUID(uid))
                                                    amount.Enqueue(uid);
                                                else
                                                    return;
                                            }
                                            byte oldbless = item_new.Bless;
                                            if (item_new.Bless == 0 && amount.Count == 5)
                                                item_new.Bless = 1;
                                            else if (item_new.Bless == 1 && amount.Count == 1)
                                                item_new.Bless = 3;
                                            else if (item_new.Bless == 3 && amount.Count == 3)
                                                item_new.Bless = 5;
                                            else if (item_new.Bless == 5 && amount.Count == 5)
                                                item_new.Bless = 7;
                                            if (oldbless == item_new.Bless)
                                                return;

                                            while (amount.Count != 0)
                                                client.Inventory.Remove(amount.Dequeue(), Conquer_Online_Server.Game.Enums.ItemUse.Remove, true);

                                            item_new.Mode = Conquer_Online_Server.Game.Enums.ItemMode.Update;
                                            item_new.Send(client);
                                            usage.dwParam = 1;
                                            Database.ConquerItemTable.UpdateBless(item_new);
                                        }
                                        client.Send(packet);
                                        break;
                                    }
                                case ItemUsage.GemCompose:
                                    {
                                        #region GemCompose
                                        UInt32 Ident = usage.UID;
                                        client.Inventory.Remove(Ident, 15);
                                        client.Inventory.Add(Ident + 1, 0, 1);
                                        usage.dwParam = 1;
                                        client.Send(usage);
                                        #endregion
                                        break;
                                    }
                                case ItemUsage.ToristSuper:
                                    {
                                        #region GemCompose
                                        if (client.Entity.Money >= 100000)
                                        {
                                            client.Inventory.Remove(700002, 1);
                                            client.Inventory.Remove(700012, 1);
                                            client.Inventory.Remove(700022, 1);
                                            client.Inventory.Remove(700032, 1);
                                            client.Inventory.Remove(700042, 1);
                                            client.Inventory.Remove(700052, 1);
                                            client.Inventory.Remove(700062, 1);
                                            client.Entity.Money -= 100000;
                                            client.Inventory.Add(700072, 0, 1);
                                            client.Send(usage);
                                            usage.dwParam = 1;
                                        }
                                        else
                                        {
                                            client.Send(new Message("Sorry you don`t have 100,000 silver!.", System.Drawing.Color.Red, Message.Talk));
                                        }
                                        #endregion
                                        break;
                                    }
                                case ItemUsage.SplitStack:
                                    {
                                        ConquerItem mainItem = null;
                                        ConquerItem minorItem = new ConquerItem(true);
                                        Database.ConquerItemInformation infos = null;
                                        minorItem.Color = (Conquer_Online_Server.Game.Enums.Color)Kernel.Random.Next(4, 8);
                                        if (client.Inventory.TryGetItem(usage.UID, out mainItem))
                                        {
                                            infos = new Conquer_Online_Server.Database.ConquerItemInformation(mainItem.ID, 0);
                                            if (mainItem.StackSize > 1 && mainItem.StackSize <= infos.BaseInformation.StackSize)
                                            {
                                                if (client.Inventory.Count < 40)
                                                {
                                                    ushort Amount = (ushort)usage.dwParam;

                                                    mainItem.StackSize -= Amount;
                                                    mainItem.Mode = Game.Enums.ItemMode.Update;
                                                    mainItem.Send(client);
                                                    mainItem.Mode = Game.Enums.ItemMode.Default;
                                                    Database.ConquerItemTable.UpdateStack(mainItem);
                                                    minorItem.ID = mainItem.ID;
                                                    minorItem.StackSize += Amount;
                                                    minorItem.Durability = mainItem.Durability;
                                                    client.Inventory.Add(minorItem, Game.Enums.ItemUse.CreateAndAdd);
                                                }
                                            }
                                        }
                                        break;
                                    }
                                case ItemUsage.MergeStackableItems:
                                    {
                                        ConquerItem mainItem = null;
                                        ConquerItem minorItem = new ConquerItem(true);
                                        Database.ConquerItemInformation infos = null;
                                        minorItem.Color = (Conquer_Online_Server.Game.Enums.Color)Kernel.Random.Next(4, 8);
                                        if (client.Inventory.TryGetItem(usage.UID, out mainItem) && client.Inventory.TryGetItem(usage.dwParam, out minorItem))
                                        {
                                            if (mainItem.ID == minorItem.ID)
                                            {
                                                infos = new Conquer_Online_Server.Database.ConquerItemInformation(mainItem.ID, 0);
                                                if (mainItem.StackSize < 1)
                                                    mainItem.StackSize = 1;
                                                if (minorItem.StackSize < 1)
                                                    minorItem.StackSize = 1;

                                                if ((mainItem.StackSize + minorItem.StackSize) <= infos.BaseInformation.StackSize)
                                                {
                                                    mainItem.StackSize += minorItem.StackSize;
                                                    mainItem.Mode = Game.Enums.ItemMode.Update;
                                                    mainItem.Send(client);
                                                    mainItem.Mode = Game.Enums.ItemMode.Default;
                                                    Database.ConquerItemTable.UpdateStack(mainItem);

                                                    client.Inventory.Remove(minorItem, Game.Enums.ItemUse.Remove);
                                                }
                                            }
                                        }
                                        break;
                                    }
                                case 34:
                                    {
                                        break;
                                    }
                                case 54:
                                    {
                                        ConquerItem item = null;
                                        if (client.Inventory.TryGetItem(usage.UID, out item))
                                        {
                                            if (IsArrow(item.ID))
                                                return;
                                            ConquerItem upgrade = null;
                                            if (client.Inventory.TryGetItem(usage.UID, out upgrade))
                                            {
                                                if (client.Entity.ConquerPoints < 54)
                                                {
                                                    client.Send(new Message("You don't have 54CPs.", Color.Red, Message.TopLeft));
                                                    return;
                                                }
                                                client.Entity.ConquerPoints -= 54;
                                                Database.ConquerItemInformation infos = new Conquer_Online_Server.Database.ConquerItemInformation(item.ID, item.Plus);
                                                if (infos.BaseInformation.Level <= 15) return;
                                                int startwith = (int)(infos.BaseInformation.ID / 1000);
                                                int endwith = (int)(infos.BaseInformation.ID % 10);
                                                var sitem = Conquer_Online_Server.Database.ConquerItemInformation.BaseInformations.Values.Where(x => (x.ID % 10) == endwith && (x.ID / 1000) == startwith && x.Level >= 15).OrderBy(y => y.Level).First();
                                                item.ID = sitem.ID;
                                                infos = new Conquer_Online_Server.Database.ConquerItemInformation(item.ID, item.Plus);
                                                item.Durability = item.MaximDurability = infos.BaseInformation.Durability;
                                                Database.ConquerItemTable.UpdateItemID(item, client);
                                                Database.ConquerItemTable.UpdateDurabilityItem(item);
                                                item.Mode = Conquer_Online_Server.Game.Enums.ItemMode.Update;
                                                item.Send(client);
                                                item = ItemSocket(item, 2);
                                            }
                                        }
                                        break;
                                    }
                                default:
                                    {
                                        Console.WriteLine("Unhandled item usage type : " + usage.ID);
                                        break;
                                    }
                            }
                        }
                        break;
                    }
                #endregion
                #region Quests, Events and Others Packets


                case 1016:
                    {
                        byte[] sed = new byte[28]
                            {
					            0x14 ,0x00 ,0xF8 ,0x03 ,0x02 ,0x00 ,0x00 ,0x00 ,0xFF ,0x00 ,0x00 ,0x00 ,0xFF ,0x00 ,0x00 ,0x00
					           ,0xFF ,0x00 ,0x00 ,0x00 ,0x54 ,0x51 ,0x53 ,0x65 ,0x72 ,0x76 ,0x65 ,0x72
                            };
                        client.Send(sed);
                        return;
                    }


                case 2232:
                    {
                        byte[] sed = new byte[186]
                            {
                                 0xB2 ,0x00 ,0xB8 ,0x08 ,0x03 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x03 ,0x00
                                ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00
                                ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00
                                ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00
                                ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00
                                ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00
                                ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00
                                ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00
                                ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00
                                ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00
                                ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00
                                ,0x00 ,0x00 ,0x54 ,0x51 ,0x53 ,0x65 ,0x72 ,0x76 ,0x65 ,0x72
                            };
                        client.Send(sed);
                        return;
                    }

                case 2252:
                    {
                        byte[] sed = new byte[186]
                            {
                                 0xB2 ,0x00 ,0xCC ,0x08 ,0x03 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x03 ,0x00
                                ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00
                                ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00
                                ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00
                                ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00
                                ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00
                                ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00
                                ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00
                                ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00
                                ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00
                                ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00
                                ,0x00 ,0x00 ,0x54 ,0x51 ,0x53 ,0x65 ,0x72 ,0x76 ,0x65 ,0x72
                            };
                        client.Send(sed);
                        return;
                    }
                case 1134:
                    {
                        // QuestPacket receive = (byte*)packet;
                        //  switch (receive.Action)
                        //  {
                        /*  case QuestAction.Begin:
                              {
                                  var data = receive.GetData(0);
                                  //Conquer_Online_Server.Console.WriteLine("QuestPacket {0} began quest[{1},{2},{3}]" + client.Entity.Name + data.MissionId + data.Unknown2 + data.Unknown1);
                                  break;
                              }*/
                        //    case QuestAction.List:
                        //        {
                        //             for (var i = 0; i < receive.Amount; i++)
                        //           {
                        //               var data = receive.GetData(i);

                        //               data.Unknown1 = 2;
                        //               if (data.MissionId == 2)
                        //               {
                        //                   client.Entity.Teleport(430, 500);
                        //                 break;
                        //              }
                        //        }
                        //         client.Send(receive);
                        //        break;
                        //     }
                        //   default:
                        //       {
                        //    Conquer_Online_Server.Console.WriteLine("Unhandled QuestPacket action: {0} {1}" + receive.Action + receive.Amount);
                        //            break;
                        //      }
                        //}
                        client.Send(packet);
                        return;
                    }

                case 1135:
                    {
                        client.Send(packet);
                        return;
                    }
                /* case 2245:
                      {
                          byte[] sed = new byte[52]
               {
                    0x2C ,0x00 ,0xC5 ,0x08 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00
                   ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00
                   ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x54 ,0x51 ,0x53 ,0x65
                   ,0x72 ,0x76 ,0x65 ,0x72
               };
                          client.Send(sed);
                          return;
                      }*/
                /*    case 2244:
                        {
                            byte[] sed = new byte[60]
                 {
                     0x34 ,0x00 ,0xC4 ,0x08 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00
                    ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00
                    ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00
                    ,0x00 ,0x00 ,0x00 ,0x00 ,0x54 ,0x51 ,0x53 ,0x65 ,0x72 ,0x76 ,0x65 ,0x72
                 };
                            client.Send(sed);
                            return;
                        }*/
                /* case 2242:
                     {
                         byte[] sed = new byte[80]
              {
                  0x48 ,0x00 ,0xC2 ,0x08 ,0x01 ,0x00 ,0x00 ,0x00 ,0x06 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00
                 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00
                 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00
                 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00
                 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x54 ,0x51 ,0x53 ,0x65 ,0x72 ,0x76 ,0x65 ,0x72
              };
                         client.Send(sed);
                         return;
                     }*/
                /* case 2253:
                     {
                         byte[] sed = new byte[72]
             {
                 0x40 ,0x00 ,0xCD ,0x08 ,0x00 ,0x00 ,0x00 ,0x00 ,0x03 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00
                ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00
                ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00
                ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00
                ,0x54 ,0x51 ,0x53 ,0x65 ,0x72 ,0x76 ,0x65 ,0x72
             };
                         client.Send(sed);
                         return;
                     }*/
                /*case 2241:
                    {
                        client.Send(packet);
                        return;
                    }*/
                /* case 2243:
                     {
                         client.Send(packet);
                         return;
                     }*/
                /* case 2226:
                     {
                         byte[] sed = new byte[376]
             {
                  0x70 ,0x01 ,0xB2 ,0x08 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00
                 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00
                 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00
                 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00
                 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00
                 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00
                 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00
                 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00
                 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00
                 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00
                 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00
                 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00
                 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00
                 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00
                 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00
                 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00
                 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00
                 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00
                 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00
                 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00
                 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00
                 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00
                 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00
                 ,0x54 ,0x51 ,0x53 ,0x65 ,0x72 ,0x76 ,0x65 ,0x72
             };
                         client.Send(sed);
                         return;
                     }*/
                /* case 2101:
                     {
                         client.Send(packet);
                         return;
                     }*/
                case 1037:
                    {
                        client.Send(packet);
                        return;
                    }
                case 2041:
                    {
                        client.Send(packet);
                        return;
                    }
                case 1041:
                    {
                        client.Send(packet);
                        return;
                    }
                case 2045:
                    {
                        client.Send(packet);
                        return;
                    }
                /* case 2400:
                         {
                             client.Send(new NpcReply(NpcReply.MessageBox, "The Thrilling Spooks are sealed up, inside here Better speak to the Heavenly Master ,if you want more detalis"));
                             client.OnMessageBoxOK =
                             delegate
                             {
                                 client.Entity.Teleport(3653, 28, 33);
                             };
                             client.OnMessageBoxCANCEL =
                                 delegate
                                 {
                                     client.OnMessageBoxEventParams = new object[0];
                                 };
                             break;
                         }*/
                /*case 1111:
                    {
                        client.Send(packet);
                        return;
                    }*/
                /*   case 2070:
                       {
                           byte[] sed = new byte[28]
                {
                     0x14 ,0x00 ,0x16 ,0x08 ,0x01 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x54 ,0x51 ,0x53 ,0x65
                    ,0x72 ,0x76 ,0x65 ,0x72 ,0x54 ,0x51 ,0x53 ,0x65 ,0x72 ,0x76 ,0x65 ,0x72
                };
                           client.Send(sed);
                           return;
                       }*/
                case 65000:
                    {
                        client.Send(packet);
                        return;
                    }
                case 1114:
                    {
                        client.Send(packet);
                        return;
                    }
                case 1333:
                    {
                        client.Send(packet);
                        return;
                    }
                case 1113:
                    {
                        client.Send(packet);
                        return;
                    }
                case 2033:
                    {
                        client.Send(packet);
                        return;
                    }
                case 2035:
                    {
                        client.Send(packet);
                        return;
                    }
                case 1106:
                    {
                        client.Send(packet);
                        return;
                    }
                case 1112:
                    {
                        client.Send(packet);
                        return;
                    }
                case 1006:
                    {
                        client.Send(packet);
                        return;
                    }
                case 1008:
                    {
                        client.Send(packet);
                        return;
                    }
                case 1110:
                    {
                        client.Send(packet);
                        return;
                    }
                case 1109:
                    {
                        client.Send(packet);
                        return;
                    }
                case 1055:
                    {
                        client.Send(packet);
                        return;
                    }
                case 1051:
                    {
                        client.Send(packet);
                        return;
                    }
                case 1104:
                    {
                        client.Send(packet);
                        return;
                    }
                //case 1103:
                //    {
                //        client.Send(packet);
                //        return;
                //    }
                case 1105:
                    {
                        client.Send(packet);
                        return;
                    }
                case 10017:
                    {
                        client.Send(packet);
                        return;
                    }
                case 1026:
                    {
                        client.Send(packet);
                        return;
                    }
                case 1012:
                    {
                        client.Send(packet);
                        return;
                    }
                case 2034:
                    {
                        client.Send(packet);
                        return;
                    }
                case 2047:
                    {
                        client.Send(packet);
                        return;
                    }
                case 10014:
                    {
                        client.Send(packet);
                        return;
                    }
                case 1025:
                    {
                        client.Send(packet);
                        return;
                    }



                #endregion
                #region String (1015)
                case 1015:
                    {
                        if (client.Action != 2)
                            return;
                        _String stringpacket = new _String(false);
                        stringpacket.Deserialize(packet);
                        switch (stringpacket.Type)
                        {
                            case _String.WhisperDetails:
                                {
                                    if (stringpacket.Texts.Count > 0)
                                    {

                                        foreach (var pClient in Program.GamePool)
                                        {
                                            if (pClient != null)
                                            {
                                                if (pClient.Entity != null)
                                                {

                                                    if (pClient.Entity.Name == stringpacket.Texts[0])
                                                    {
                                                        string otherstring = "";
                                                        otherstring += pClient.Entity.UID + " ";
                                                        otherstring += pClient.Entity.Level + " ";
                                                        otherstring += pClient.Entity.BattlePower + " #";
                                                        if (pClient.Guild != null)
                                                        {
                                                            if (pClient.Entity.GuildID != 0)
                                                                otherstring += pClient.Guild.Name + " fNone#";
                                                        }
                                                        else
                                                            otherstring += "None fNone# ";
                                                        otherstring += pClient.Entity.Spouse + " ";
                                                        otherstring += (byte)(pClient.Entity.NobilityRank) + " ";
                                                        if (pClient.Entity.Body % 10 < 3) otherstring += "1";
                                                        else otherstring += "0";
                                                        stringpacket.Texts.Add(otherstring);
                                                        stringpacket.TextsCount = 1;
                                                        stringpacket.Type = 26;
                                                        client.Send(stringpacket);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    break;
                                }
                        }
                        break;
                    }
                #endregion
                #region KnownPersons (1019)
                case 1019:
                    {
                        KnownPersons knownP = new KnownPersons(false);
                        knownP.Deserialize(packet);
                        switch (knownP.Type)
                        {
                            case KnownPersons.RequestFriendship:
                                {
                                    AddFriend(knownP, client);
                                    break;
                                }
                            case KnownPersons.RemovePerson:
                                {
                                    RemoveFriend(knownP, client);
                                    break;
                                }
                            case KnownPersons.RemoveEnemy:
                                {
                                    RemoveEnemy(knownP, client);
                                    break;
                                }
                        }
                        break;
                    }
                #endregion
                #region Attack (1022)
                case 1022:
                    {
                        if (client.Action != 2) return;
                        client.LastAttack = Time32.Now;
                        GamePackets.Attack attack = new Attack(false);
                        attack.Deserialize(packet);
                        Writer.WriteUInt32(0, 8, attack.ToArray());
                        Attack(attack, client);
                        client.Entity.SpiritFocus = false;
                        break;
                    }
                case 39:
                    {
                        if (!Kernel.VotePool.ContainsKey(client.Account.IP))
                        {
                            if (!Kernel.VotePoolUid.ContainsKey(client.Entity.UID))
                            {
                                client.Entity.ConquerPoints += Database.rates.VotePrize;
                                Conquer_Online_Server.MrBahaa.PlayersVot Vot = new Conquer_Online_Server.MrBahaa.PlayersVot();
                                Vot.AdressIp = client.Account.IP;
                                Vot.Uid = client.Entity.UID;
                                Kernel.VotePool.Add(Vot.AdressIp, Vot);
                                Kernel.VotePoolUid.Add(Vot.Uid, Vot);
                                Database.EntityTable.SavePlayersVot(Vot);
                                client.Send(new Message("" + Conquer_Online_Server.Database.rates.VoteUrl + "", System.Drawing.Color.Red, Network.GamePackets.Message.Website));
                            }
                            else
                            {
                                client.Send(new Message("" + Conquer_Online_Server.Database.rates.VoteUrl + "", System.Drawing.Color.Red, Network.GamePackets.Message.Website));
                            }
                        }
                        else
                        {
                            client.Send(new Message("" + Conquer_Online_Server.Database.rates.VoteUrl + "", System.Drawing.Color.Red, Network.GamePackets.Message.Website));

                        }
                        break;
                    }
                #endregion
                #region FairyFlower (2070)
                case 2070:
                    {

                        FairySpawn FS = new FairySpawn(false);
                        FS.Deserialize(packet);
                        switch (FS.SType)
                        {
                            case 1:

                                if (client.IsFairy) { /* return or Cancel the other transformation first*/ }
                                client.IsFairy = true; client.FairyType = FS.FairyType;
                                client.SType = FS.SType;
                                FS.UID = client.Entity.UID;
                                client.SendScreen(FS, true);
                                break;
                            case 2:

                                if (!client.IsFairy) return;
                                client.IsFairy = false; client.FairyType = 0;
                                client.SType = 0;
                                FS.UID = client.Entity.UID;
                                client.SendScreen(FS, true);
                                break;
                            default:
                                /*Unknown S type*/
                                break;
                        }
                        break;
                    }
                #endregion
                #region Teams (1023)
                case 1023:
                    {
                        if (client.Action != 2)
                            return;
                        Team teamPacket = new Team();
                        teamPacket.Deserialize(packet);
                        switch (teamPacket.Type)
                        {
                            case Team.Create: CreateTeam(teamPacket, client); break;
                            case Team.AcceptJoinRequest: AcceptRequestToJoinTeam(teamPacket, client); break;
                            case Team.AcceptInvitation: AcceptInviteToJoinTeam(teamPacket, client); break;
                            case Team.InviteRequest: SendInviteToJoinTeam(teamPacket, client); break;
                            case Team.JoinRequest: SendRequestJoinToTeam(teamPacket, client); break;
                            case Team.ExitTeam: LeaveTeam(teamPacket, client); break;
                            case Team.Dismiss: DismissTeam(teamPacket, client); break;
                            case Team.Kick: KickFromTeam(teamPacket, client); break;
                            case Team.ForbidJoining:
                                {
                                    foreach (Client.GameClient Teammate in client.Team.Teammates)
                                        if (Teammate != null)
                                        {
                                            Teammate.Team.ForbidJoin = true;
                                            Teammate.Send(teamPacket);
                                        }

                                    break;
                                }
                            case Team.UnforbidJoining:
                                {
                                    foreach (Client.GameClient Teammate in client.Team.Teammates)
                                        if (Teammate != null)
                                        {
                                            Teammate.Team.ForbidJoin = false;
                                            Teammate.Send(teamPacket);
                                        }

                                    break;
                                }
                            case Team.LootMoneyOff:
                                {
                                    foreach (Client.GameClient Teammate in client.Team.Teammates)
                                        if (Teammate != null)
                                        {
                                            Teammate.Team.PickupMoney = false;
                                            Teammate.Send(teamPacket);
                                        }
                                    break;
                                }
                            case Team.LootMoneyOn:
                                {
                                    foreach (Client.GameClient Teammate in client.Team.Teammates)
                                        if (Teammate != null)
                                        {
                                            Teammate.Team.PickupMoney = true;
                                            Teammate.Send(teamPacket);
                                        }
                                    break;
                                }
                            case Team.LootItemsOn:
                                {
                                    foreach (Client.GameClient Teammate in client.Team.Teammates)
                                        if (Teammate != null)
                                        {
                                            Teammate.Team.PickupItems = true;
                                            Teammate.Send(teamPacket);
                                        }
                                    break;
                                }
                            case Team.LootItemsOff:
                                {
                                    foreach (Client.GameClient Teammate in client.Team.Teammates)
                                        if (Teammate != null)
                                        {
                                            Teammate.Team.PickupItems = false;
                                            Teammate.Send(teamPacket);
                                        }
                                    break;
                                }
                        }
                        break;
                    }
                #endregion
                #region Atributes Set (1024)
                case 1024:
                    {
                        if (client.Action != 2)
                            return;
                        uint AddStr = BitConverter.ToUInt32(packet, 12);
                        uint AddAgi = BitConverter.ToUInt32(packet, 16);
                        uint AddVit = BitConverter.ToUInt32(packet, 20);
                        uint AddSpi = BitConverter.ToUInt32(packet, 24);
                        if (client.Entity.Atributes == 0)
                            return;

                        uint TotalStatPoints = AddStr + AddAgi + AddVit + AddSpi;

                        if (client.Entity.Atributes >= TotalStatPoints)
                        {
                            client.Entity.Strength += (ushort)AddStr;
                            client.Entity.Agility += (ushort)AddAgi;
                            client.Entity.Vitality += (ushort)AddVit;
                            client.Entity.Spirit += (ushort)AddSpi;
                            client.Entity.Atributes -= (ushort)TotalStatPoints;
                            client.Send(packet);
                        }
                        client.CalculateStatBonus();
                        client.CalculateHPBonus();
                        client.GemAlgorithm();
                        break;
                    }
                #endregion
                #region Socketing (1027)
                case 1027:
                    {
                        EmbedSocket socket = new EmbedSocket(false);
                        socket.Deserialize(packet);
                        SocketItem(socket, client);
                        break;
                    }
                #endregion
                #region Character Statistics (1040)
                case 1040:
                    {
                        uint UID = BitConverter.ToUInt32(packet, 8);
                        Client.GameClient Client;
                        if (Kernel.GamePool.TryGetValue(UID, out Client))
                        {
                            client.Send(WindowStats(Client));
                        }
                        break;
                    }
                #endregion
                #region LoginPacket (1052)
                case 1052:
                    {
                        if (client.Action == 1)
                        {
                            Connect connect = new Connect();
                            connect.Deserialize(packet);
                            AppendConnect(connect, client);
                        }
                        else
                            client.Disconnect();
                        break;
                    }
                #endregion
                #region Trade (1056)
                case 1056:
                    {
                        if (client.Action != 2)
                            return;
                        Trade trade = new Trade(false);
                        trade.Deserialize(packet);
                        switch (trade.Type)
                        {
                            case Trade.Request:
                                RequestTrade(trade, client);
                                break;
                            case Trade.Close:
                                CloseTrade(trade, client);
                                break;
                            case Trade.AddItem:
                                AddTradeItem(trade, client);
                                break;
                            case Trade.SetMoney:
                                SetTradeMoney(trade, client);
                                break;
                            case Trade.SetConquerPoints:
                                SetTradeConquerPoints(trade, client);
                                break;
                            case Trade.Accept:
                                AcceptTrade(trade, client);
                                break;
                        }
                        break;
                    }
                #endregion  
                #region Floor items (1101)
                case 1101:
                    {
                        if (client.Action != 2)
                            return;
                        FloorItem floorItem = new FloorItem(false);
                        floorItem.Deserialize(packet);
                        client.SpiltStack = true;
                        PickupItem(floorItem, client);
                        client.SpiltStack = false;
                        break;
                    }
                #endregion
                #region Warehouses (1102)
                case 1102:// 
                    {
                        if (client.Action != 2)
                            return;
                        Warehouse warehousepacket = new Warehouse(false);
                        warehousepacket.Deserialize(packet);
                        switch (warehousepacket.Type)
                        {
                            case Warehouse.Entire:
                                {
                                    Game.ConquerStructures.Warehouse wh = client.Warehouses[(Conquer_Online_Server.Game.ConquerStructures.Warehouse.WarehouseID)warehousepacket.NpcID];
                                    if (wh == null) return;
                                    byte count = 0;
                                    warehousepacket.Count = 1;
                                    warehousepacket.Type = Warehouse.AddItem;
                                    for (; count < wh.Count; count++)
                                    {
                                        ConquerItem i = wh.Objects[count];
                                        warehousepacket.Append(wh.Objects[count]);
                                        client.Send(warehousepacket);
                                        i.SendExtras(client);
                                    }
                                    break;
                                }
                            case Warehouse.AddItem:
                                {
                                    foreach (ConquerItem itemx in client.Inventory.Objects)
                                    {
                                        if ((itemx.ID == 1100003) || (itemx.ID == 1100006) || (itemx.ID == 1100009))
                                        {
                                            if (!client.Warehouses.ContainsKey((Conquer_Online_Server.Game.ConquerStructures.Warehouse.WarehouseID)(uint)itemx.UID))
                                            {
                                                client.Warehouses.Add((Conquer_Online_Server.Game.ConquerStructures.Warehouse.WarehouseID)(uint)itemx.UID, new Conquer_Online_Server.Game.ConquerStructures.Warehouse(client, (Conquer_Online_Server.Game.ConquerStructures.Warehouse.WarehouseID)(uint)itemx.UID));
                                            }
                                        }
                                    }
                                    if (client.Booth != null)
                                        return;
                                    Game.ConquerStructures.Warehouse wh = client.Warehouses[(Conquer_Online_Server.Game.ConquerStructures.Warehouse.WarehouseID)warehousepacket.NpcID];
                                    if (wh == null) return;
                                    ConquerItem item = null;
                                    if (client.Inventory.TryGetItem(warehousepacket.UID, out item))
                                    {
                                        if (item.ID >= 729960 && item.ID <= 729970)
                                            return;
                                        if (item.ID == 729611 || item.ID == 729612 || item.ID == 729613 || item.ID == 729614 || item.ID == 729703)
                                            return;

                                        if (!ConquerItem.isRune(item.UID))
                                        {
                                            if (wh.Add(item))
                                            {
                                                warehousepacket.UID = 0;
                                                warehousepacket.Count = 1;
                                                warehousepacket.Append(item);
                                                client.Send(warehousepacket);
                                                ItemAdding add1 = new ItemAdding(true);
                                                if (item.Purification.Available)
                                                    add1.Append(item.Purification);
                                                if (item.ExtraEffect.Available)
                                                    add1.Append(item.ExtraEffect);
                                                if (item.Purification.Available || item.ExtraEffect.Available)
                                                    client.Send(add1);
                                                return;
                                            }
                                        }
                                        else client.Send(new Message("You can not store Flame Stone Rune's in Warehouse", System.Drawing.Color.Red, Message.TopLeft));
                                    }
                                    break;
                                }
                            case Warehouse.RemoveItem:
                                {
                                    Game.ConquerStructures.Warehouse wh = client.Warehouses[(Conquer_Online_Server.Game.ConquerStructures.Warehouse.WarehouseID)warehousepacket.NpcID];
                                    if (wh == null) return;
                                    if (wh.ContainsUID(warehousepacket.UID))
                                    {
                                        if (wh.Remove(warehousepacket.UID))
                                        {
                                            client.Send(warehousepacket);
                                            return;
                                        }
                                    }
                                    break;
                                }
                            default:
                                {
                                    Console.WriteLine("Unknown type: " + warehousepacket.Type);
                                    break;
                                }
                        }
                        break;
                    }
                #endregion
                #region Guild command (1107)

                case 1107:
                    {
                        GuildCommand command = new GuildCommand(false);
                        command.Deserialize(packet);
                        switch (command.Type)
                        {
                            case GuildCommand.Neutral1:
                            case GuildCommand.Neutral2:
                                {
                                    string name = System.Text.ASCIIEncoding.ASCII.GetString(packet, 26, packet[25]);
                                    if (client.Guild != null)
                                    {
                                        if (client.AsMember.Rank == Conquer_Online_Server.Game.Enums.GuildMemberRank.GuildLeader)
                                        {
                                            client.Guild.RemoveAlly(name);
                                            foreach (var guild in Kernel.Guilds.Values)
                                            {
                                                if (guild.Name == name && client.Guild.Name != name)
                                                {
                                                    guild.RemoveAlly(client.Guild.Name);
                                                }
                                            }
                                            client.Guild.RemoveEnemy(name);
                                        }
                                    }
                                    break;
                                }

                            case GuildCommand.Allied:
                                {
                                    string name = System.Text.ASCIIEncoding.ASCII.GetString(packet, 26, packet[25]);
                                    if (client.Guild != null)
                                    {
                                        if (client.AsMember.Rank == Conquer_Online_Server.Game.Enums.GuildMemberRank.GuildLeader)
                                        {
                                            AllyGuilds(name, client);
                                        }
                                    }
                                    break;
                                }
                            case GuildCommand.Enemied:
                                {
                                    string name = System.Text.ASCIIEncoding.ASCII.GetString(packet, 26, packet[25]);
                                    if (client.Guild != null)
                                    {
                                        if (client.AsMember.Rank == Conquer_Online_Server.Game.Enums.GuildMemberRank.GuildLeader)
                                        {
                                            client.Guild.AddEnemy(name);
                                        }
                                    }
                                    break;
                                }
                            default:
                                {
                                    client.Send(packet);
                                    break;
                                }
                            case GuildCommand.Bulletin:
                                {
                                    string message1 = System.Text.ASCIIEncoding.ASCII.GetString(packet, 26, packet[25]);
                                    if (client.Guild != null)
                                    {
                                        if (client.AsMember.Rank == Conquer_Online_Server.Game.Enums.GuildMemberRank.GuildLeader)
                                        {
                                            client.Guild.Bulletin = message1;
                                            client.Guild.SendGuild(client);
                                            Database.GuildTable.UpdateBulletin(client.Guild, client.Guild.Bulletin);
                                        }
                                    }
                                    break;
                                }
                            case GuildCommand.DonateSilvers:
                                {
                                    if (client.Guild != null)
                                    {
                                        if (client.Entity.Money >= command.dwParam)
                                        {
                                            client.Guild.SilverFund += command.dwParam;
                                            Database.GuildTable.SaveFunds(client.Guild);
                                            client.AsMember.SilverDonation += command.dwParam;
                                            client.Entity.Money -= command.dwParam;
                                            client.Guild.SendGuild(client);
                                        }
                                    }
                                    break;
                                }
                            case GuildCommand.DonateConquerPoints:
                                {
                                    if (client.Guild != null)
                                    {
                                        if (client.Trade.InTrade)
                                            return;
                                        if (client.Entity.ConquerPoints >= command.dwParam)
                                        {
                                            client.Guild.ConquerPointFund += command.dwParam;
                                            Database.GuildTable.SaveFunds(client.Guild);
                                            client.AsMember.ConquerPointDonation += command.dwParam;
                                            client.Entity.ConquerPoints -= command.dwParam;
                                            client.Guild.SendGuild(client);
                                        }
                                    }
                                    break;
                                }
                            case GuildCommand.Refresh:
                                {
                                    if (client.AsMember != null)
                                    {
                                        if (client.Guild != null)
                                            client.Guild.SendGuild(client);
                                    }
                                    break;
                                }
                            case GuildCommand.Discharge:
                                {
                                    string name = System.Text.ASCIIEncoding.ASCII.GetString(packet, 26, packet[25]);
                                    if (client.Guild != null)
                                    {
                                        if (client.AsMember.Rank == Conquer_Online_Server.Game.Enums.GuildMemberRank.GuildLeader)
                                        {
                                            var member = client.Guild.GetMemberByName(name);
                                            if (member.ID != client.Entity.UID)
                                            {
                                                if (member.Rank == Conquer_Online_Server.Game.Enums.GuildMemberRank.DeputyLeader)
                                                {
                                                    client.Guild.DeputyLeaderCount--;
                                                    member.Rank = Conquer_Online_Server.Game.Enums.GuildMemberRank.Member;
                                                    if (member.IsOnline)
                                                    {
                                                        client.Guild.SendGuild(member.Client);
                                                        member.Client.Entity.GuildRank = (ushort)member.Rank;
                                                        member.Client.Screen.FullWipe();
                                                        member.Client.Screen.Reload(null);
                                                    }
                                                }
                                                member.Rank = Conquer_Online_Server.Game.Enums.GuildMemberRank.Member;
                                                if (member.IsOnline)
                                                {
                                                    client.Guild.SendGuild(member.Client);
                                                    member.Client.Entity.GuildRank = (ushort)member.Rank;
                                                    member.Client.Screen.FullWipe();
                                                    member.Client.Screen.Reload(null);
                                                }

                                            }
                                        }
                                    }
                                    break;
                                }
                            case GuildCommand.Promote:
                                {
                                    if (client.Entity.GuildRank == (ushort)Conquer_Online_Server.Game.Enums.GuildMemberRank.GuildLeader)
                                    {
                                        byte AVD = 0; byte AVHD = 0; byte AVHM = 0; byte AVHS = 0;
                                        switch (client.Guild.Level)
                                        {
                                            case 1:
                                            case 2:
                                            case 3: AVD = 2; break;
                                            case 4:
                                            case 5:
                                            case 6: AVD = 3; break;
                                            case 7:
                                            case 8:
                                            case 9: AVD = 4; break;
                                        }
                                        switch (client.Guild.Level)
                                        {
                                            case 0:
                                            case 1:
                                            case 2:
                                            case 3: AVHM = 1; break;
                                            case 4:
                                            case 5:
                                            case 6: AVHM = 2; break;
                                            case 7:
                                            case 8: AVHM = 4; break;
                                            case 9: AVHM = 6; break;
                                        }
                                        switch (client.Guild.Level)
                                        {
                                            case 0:
                                            case 1:
                                            case 2:
                                            case 3:
                                            case 4:
                                            case 5:
                                                AVHD = 1;
                                                break;
                                            case 6:
                                            case 7:
                                            case 8:
                                            case 9:
                                                AVHD = 2;
                                                break;

                                        }
                                        switch (client.Guild.Level)
                                        {
                                            case 0:
                                            case 1:
                                            case 2:
                                            case 3:
                                            case 4:
                                                AVHS = 1;
                                                break;
                                            case 5:
                                            case 6:
                                                AVHS = 2;
                                                break;
                                            case 7:
                                            case 8:
                                                AVHS = 6;
                                                break;
                                            case 9:
                                                AVHS = 8;
                                                break;

                                        }

                                        command = new GuildCommand(true);
                                        command.Type = 37;
                                        //        command.Positions.Add((string)((ushort)(Convert.ChangeType(Conquer_Online_Server.Game.Enums.GuildMemberRank.GuildLeader,ushort))).ToString()    + " " + 1 + " " + 1 + " " + 0 + " " + 0);
                                        command.Positions.Add((string)((ushort)(Conquer_Online_Server.Game.Enums.GuildMemberRank.DeputyLeader)).ToString() + " " + client.Guild.DeputyLeaderCount + " " + AVD + " " + 0 + " " + 0);
                                        command.Positions.Add((string)((ushort)(Conquer_Online_Server.Game.Enums.GuildMemberRank.HDeputyLeader)).ToString() + " " + client.Guild.HDeputyLeaderCount + " " + AVHD + " " + 0 + " " + 650);
                                        command.Positions.Add((string)((ushort)(Conquer_Online_Server.Game.Enums.GuildMemberRank.HonoraryManager)).ToString() + " " + client.Guild.HonoraryManagerCount + " " + AVHM + " " + 0 + " " + 320);
                                        command.Positions.Add((string)((ushort)(Conquer_Online_Server.Game.Enums.GuildMemberRank.HonorarySuperv)).ToString() + " " + client.Guild.HonorarySupervCount + " " + AVHS + " " + 0 + " " + 270);
                                        command.Positions.Add((string)((ushort)(Conquer_Online_Server.Game.Enums.GuildMemberRank.HonorarySteward)).ToString() + " " + client.Guild.HonoraryStewardCount + " " + AVHS + " " + 0 + " " + 100);
                                        command.Positions.Add((string)((ushort)(Conquer_Online_Server.Game.Enums.GuildMemberRank.Aide)).ToString() + " " + client.Guild.AideCount + " " + 2 + " " + 0 + " " + 0);
                                        command.Set();
                                        client.Send(command);

                                    }
                                    else { client.Send(new Message("You're not the guild leader!", System.Drawing.Color.Red, Message.TopLeft)); return; }

                                    break;
                                }
                            case GuildCommand.SendRequest:
                                {
                                    string Name = System.Text.Encoding.ASCII.GetString(packet, 26, packet[25]);
                                    if (client.Guild != null)
                                    {
                                        foreach (Game.ConquerStructures.Society.Guild.Member member in client.Guild.Members.Values)
                                        {
                                            if (member.IsOnline)
                                            {
                                                if (member.Client.Entity.Name == Name)
                                                {
                                                    command.Name = client.Entity.Name;
                                                    member.Client.Send(command);
                                                    return;
                                                }
                                            }
                                        }
                                    }
                                    break;
                                }
                            case GuildCommand.AcceptRequest:
                                {
                                    uint Position = Conquer_Online_Server.BitConverter.ToUInt32(packet, 8);
                                    client.AsMember.Rank = (Conquer_Online_Server.Game.Enums.GuildMemberRank)Position;

                                    client.Guild.SendGuild(client);
                                    client.Entity.GuildRank = (ushort)(Conquer_Online_Server.Game.Enums.GuildMemberRank)Position;
                                    client.Screen.FullWipe();
                                    client.Screen.Reload(null);

                                    client.Send(packet);
                                    break;
                                }
                            case GuildCommand.JoinRequest:
                                {
                                    if (Kernel.GamePool.ContainsKey(command.dwParam))
                                    {
                                        var Client = Kernel.GamePool[command.dwParam];
                                        if (Client.OnHoldGuildJoin == client.OnHoldGuildJoin && Client.OnHoldGuildJoin != 0)
                                        {
                                            if (Client.Guild != null)
                                            {
                                                if (Client.AsMember.Rank != Conquer_Online_Server.Game.Enums.GuildMemberRank.Member)
                                                {
                                                    Client.Guild.AddMember(client);
                                                    Client.OnHoldGuildJoin = 0;
                                                    client.OnHoldGuildJoin = 0;
                                                }
                                            }
                                            else
                                            {
                                                if (client.AsMember.Rank != Conquer_Online_Server.Game.Enums.GuildMemberRank.Member)
                                                {
                                                    client.Guild.AddMember(Client);
                                                    Client.OnHoldGuildJoin = 0;
                                                    client.OnHoldGuildJoin = 0;
                                                }
                                            }
                                            return;
                                        }
                                        if (client.Guild == null)
                                        {
                                            command.dwParam = client.Entity.UID;
                                            Client.Send(command);
                                            Client.OnHoldGuildJoin = (uint)new Random().Next();
                                            client.OnHoldGuildJoin = Client.OnHoldGuildJoin;
                                        }
                                    }
                                    break;
                                }
                            case GuildCommand.InviteRequest:
                                {
                                    if (Kernel.GamePool.ContainsKey(command.dwParam))
                                    {
                                        var Client = Kernel.GamePool[command.dwParam];
                                        if (Client.OnHoldGuildJoin == client.OnHoldGuildJoin && Client.OnHoldGuildJoin != 0)
                                        {
                                            if (Client.Guild != null)
                                            {
                                                if (Client.AsMember.Rank != Conquer_Online_Server.Game.Enums.GuildMemberRank.Member)
                                                {
                                                    Client.Guild.AddMember(client);
                                                    Client.OnHoldGuildJoin = 0;
                                                    client.OnHoldGuildJoin = 0;
                                                }
                                            }
                                            else
                                            {
                                                if (client.AsMember.Rank != Conquer_Online_Server.Game.Enums.GuildMemberRank.Member)
                                                {
                                                    client.Guild.AddMember(Client);
                                                    Client.OnHoldGuildJoin = 0;
                                                    client.OnHoldGuildJoin = 0;
                                                }
                                            }
                                            return;
                                        }
                                        if (client.Guild != null)
                                        {
                                            command.dwParam = client.Entity.UID;
                                            Client.Send(command);
                                            Client.OnHoldGuildJoin = (uint)new Random().Next();
                                            client.OnHoldGuildJoin = Client.OnHoldGuildJoin;
                                        }
                                    }
                                    break;
                                }
                            case GuildCommand.Quit:
                                {
                                    if (client.Guild != null)
                                    {
                                        if (client.AsMember.Rank != Conquer_Online_Server.Game.Enums.GuildMemberRank.GuildLeader)
                                        {
                                            client.Guild.ExpelMember(client.Entity.Name, true);
                                        }
                                    }
                                    break;
                                }
                        }
                        return;
                    }

                #endregion Guild command (1107)
                #region Poker packets
                case 2093:
                case 2096:
                case 2090:
                case 2171:
                    {
                        new Game.HandlePoker(packet, client);
                        break;
                    }
                #endregion
                #region Enlight (1127)
                case 1127:
                    {
                        Enlight enlight = new Enlight(false);
                        enlight.Deserialize(packet);
                        if (Kernel.GamePool.ContainsKey(enlight.Enlighted))
                        {
                            var Client = Kernel.GamePool[enlight.Enlighted];

                            if (enlight.Enlighter == client.Entity.UID && enlight.Enlighted != enlight.Enlighter)
                            {
                                if (Client.Entity.ReceivedEnlightenPoints < 5)
                                {
                                    if (client.Entity.EnlightenPoints >= 100)
                                    {
                                        if (Client.Entity.EnlightmentTime <= 80)
                                        {
                                            client.Entity.EnlightenPoints -= 100;
                                            Client.Entity.EnlightmentStamp = Time32.Now;
                                            Client.IncreaseExperience(Game.Attacking.Calculate.Percent((int)Client.ExpBall, .10F), false);
                                            Client.SendScreen(packet, true);
                                            Client.Entity.ReceivedEnlightenPoints++;
                                            Client.Entity.EnlightmentTime += 20;
                                            if (client.Entity.EnlightmentTime > 80)
                                                client.Entity.EnlightmentTime = 100;
                                            else if (client.Entity.EnlightmentTime > 60)
                                                client.Entity.EnlightmentTime = 80;
                                            else if (client.Entity.EnlightmentTime > 40)
                                                client.Entity.EnlightmentTime = 60;
                                            else if (client.Entity.EnlightmentTime > 20)
                                                client.Entity.EnlightmentTime = 40;
                                            else if (client.Entity.EnlightmentTime > 0)
                                                client.Entity.EnlightmentTime = 20;
                                        }
                                        else client.Send(new Message("You can't enlighten " + Client.Entity.Name + " yet because he has to wait a few minutes until he can be enlightened again.", System.Drawing.Color.Red, Message.TopLeft));
                                    }
                                    else client.Send(new Message("You can't enlighten " + Client.Entity.Name + " because you don't have enough enlighten points!", System.Drawing.Color.Red, Message.TopLeft));
                                }
                                else client.Send(new Message("You can't enlighten " + Client.Entity.Name + " because he/she was enlightened today five times already!", System.Drawing.Color.Red, Message.TopLeft));
                            }
                        }
                        break;
                    }
                #endregion
                #region QuizShow (2068)
                case 2068:
                    {
                        const byte GiveAwaser = 3, Remove = 8;
                        byte Typ = packet[4];
                        var quizShow = Kernel.QuizShow;
                        switch (Typ)
                        {
                            case GiveAwaser://give right question
                                {
                                    if (quizShow.Open)
                                    {
                                        if (client.Quiz == null)
                                            client.Quiz = quizShow.RegisteredUsers[client.Entity.UID];

                                        if (client.Quiz == null) break;

                                        client.Quiz.Timer += (ushort)quizShow.NewQuestionTime;
                                        byte answer = packet[8];
                                        if (answer > 4) break;
                                        bool right = answer == quizShow.CurrentQuestion.AnswerRight;

                                        client.Quiz.Answered = true;
                                        byte pts = 0;
                                        if (right)
                                        {
                                            pts = (byte)(quizShow.RightAnswerReward + quizShow.TimeLimit - quizShow.NewQuestionTime);

                                            client.Quiz.RightQuestion = 1;
                                            client.Quiz.Points += pts;
                                            client.Entity.QuizPoints += pts;
                                            client.Entity.TreasuerPoints += 1;
                                        }
                                        else
                                        {
                                            pts = 1;

                                            client.Quiz.RightQuestion = 2;
                                            client.Quiz.Points += pts;
                                            client.Entity.QuizPoints += pts;
                                        }
                                        client.IncreaseExperience(client.ExpBall / 300 * pts, false);

                                        if (quizShow.FirstQuestion)
                                        {
                                            QuizRank rnk = new QuizRank();
                                            rnk.GiveRight = client.Quiz.RightQuestion;
                                            rnk.MyPoints = (ushort)client.Quiz.Points;
                                            rnk.MyRank = 0;
                                            rnk.MyTime = client.Quiz.Timer;
                                            rnk.Type = QuizShowTypes.SendTop;
                                            client.Send(rnk.ToArray());
                                        }
                                    }
                                    break;
                                }
                            case Remove:
                                {
                                    if (quizShow.Open)
                                        quizShow.RemovePlayer(client);
                                    break;
                                }
                        }
                        break;
                    }
                #endregion
                #region NPC Dialog (2031 + 2032)
                case 2031:
                case 2032:
                    {
                        if (client.Action != 2)
                            return;
                        NpcRequest req = new NpcRequest();
                        req.Deserialize(packet);
                        if (client.Map.BaseID != 6001 && client.Map.BaseID != 6004 && !client.Entity.Dead && req.OptionID == 250 && client.Map.BaseID != 700)//ElitePk
                        {
                            client.Disconnect();
                        }
                        if (client.Map.BaseID != 6001 && client.Map.BaseID != 6004 && !client.Entity.Dead && req.OptionID == 249 && client.Map.BaseID != 700)//ElitePk
                        {
                            client.Entity.Teleport(1002, 300, 378);
                        }
                        if (client.Map.BaseID != 6001 && client.Map.BaseID != 6004 && !client.Entity.Dead && req.OptionID == 248 && client.Map.BaseID != 700)//ClassPk
                        {
                            client.Entity.Teleport(1002, 300, 280);
                        }
                        if (client.Map.BaseID != 6001 && client.Map.BaseID != 6004 && !client.Entity.Dead && req.OptionID == 247 && client.Map.BaseID != 700)//WeeklyPk
                        {
                            client.Entity.Teleport(1002, 300, 378);
                        }
                        if (client.Map.BaseID != 6001 && client.Map.BaseID != 6004 && !client.Entity.Dead && req.OptionID == 246 && client.Map.BaseID != 700)//MonthlyPk
                        {
                            client.Entity.Teleport(1002, 300, 378);
                        }
                        if (client.Map.BaseID != 6001 && client.Map.BaseID != 6004 && !client.Entity.Dead && req.OptionID == 245 && client.Map.BaseID != 700)//DisCity
                        {
                            client.Entity.Teleport(1002, 300, 378);
                        }
                        if (client.Map.BaseID != 6001 && client.Map.BaseID != 6004 && !client.Entity.Dead && req.OptionID == 244 && client.Map.BaseID != 700)//GuildWar
                        {
                            client.Entity.Teleport(1002, 300, 378);
                        }
                        if (client.Map.BaseID != 6001 && client.Map.BaseID != 6004 && !client.Entity.Dead && req.OptionID == 243 && client.Map.BaseID != 700)//DailyPk
                        {
                            client.Entity.Teleport(1002, 300, 378);
                        }
                        if (client.Map.BaseID != 6001 && client.Map.BaseID != 6004 && !client.Entity.Dead && req.OptionID == 242 && client.Map.BaseID != 700)//SteedRace
                        {
                            client.Entity.Teleport(1002, 300, 378);
                        }
                        if (client.Map.BaseID != 6001 && client.Map.BaseID != 6004 && !client.Entity.Dead && req.OptionID == 241 && client.Map.BaseID != 700)//SpouseWar
                        {
                            client.Entity.Teleport(1002, 300, 378);
                        }
                        if (client.Map.BaseID != 6001 && client.Map.BaseID != 6004 && !client.Entity.Dead && req.OptionID == 240 && client.Map.BaseID != 700)//DeathTeam
                        {
                            client.Entity.Teleport(1002, 300, 378);
                        }
                        #region Top Donation Quest

                        if (client.Map.BaseID != 6001 && client.Map.BaseID != 6002 && !client.Entity.Dead && req.OptionID == 242)
                        {
                            if (client.Entity.NobilityRank == Game.ConquerStructures.NobilityRank.King)//TopKings
                            {
                                _String str = new _String(true);
                                str.UID = client.Entity.UID;
                                str.TextsCount = 1;
                                str.Type = _String.Effect;
                                str.Texts.Add("good");
                                BahaaEffects.break_start(client);
                                client.Entity.Owner.SendScreen(str, true);
                                client.Entity.Teleport(9992, 50, 50);
                                client.Send(new Network.GamePackets.NpcReply(6, "Gratz You have joined TopKings Map Just Wait Untile it Start ."));
                            }
                            if (client.Entity.NobilityRank == Game.ConquerStructures.NobilityRank.Prince)//TopPrince
                            {
                                _String str = new _String(true);
                                str.UID = client.Entity.UID;
                                str.TextsCount = 1;
                                str.Type = _String.Effect;
                                str.Texts.Add("good");
                                BahaaEffects.break_start(client);
                                client.Entity.Owner.SendScreen(str, true);
                                client.Entity.Teleport(9993, 50, 50);
                                client.Send(new Network.GamePackets.NpcReply(6, "Gratz You have joined TopPrince Map Just Wait Untile it Start ."));
                            }
                            if (client.Entity.NobilityRank == Game.ConquerStructures.NobilityRank.Duke)//TopDucke
                            {
                                _String str = new _String(true);
                                str.UID = client.Entity.UID;
                                str.TextsCount = 1;
                                str.Type = _String.Effect;
                                str.Texts.Add("good");
                                BahaaEffects.break_start(client);
                                client.Entity.Owner.SendScreen(str, true);
                                client.Entity.Teleport(9994, 50, 50);
                                client.Send(new Network.GamePackets.NpcReply(6, "Gratz You have joined TopDucke Map Just Wait Untile it Start ."));
                            }
                            if (client.Entity.NobilityRank == Game.ConquerStructures.NobilityRank.Knight)//TopKinght
                            {
                                _String str = new _String(true);
                                str.UID = client.Entity.UID;
                                str.TextsCount = 1;
                                str.Type = _String.Effect;
                                str.Texts.Add("good");
                                BahaaEffects.break_start(client);
                                client.Entity.Owner.SendScreen(str, true);
                                client.Entity.Teleport(9995, 50, 50);
                                client.Send(new Network.GamePackets.NpcReply(6, "Gratz You have joined TopKinght Map Just Wait Untile it Start ."));
                            }
                            if (client.Entity.NobilityRank == Game.ConquerStructures.NobilityRank.Earl)//TopEarl
                            {
                                _String str = new _String(true);
                                str.UID = client.Entity.UID;
                                str.TextsCount = 1;
                                str.Type = _String.Effect;
                                str.Texts.Add("good");
                                BahaaEffects.break_start(client);
                                client.Entity.Owner.SendScreen(str, true);
                                client.Entity.Teleport(9996, 50, 50);
                                client.Send(new Network.GamePackets.NpcReply(6, "Gratz You have joined TopEarl Map Just Wait Untile it Start ."));
                            }
                            if (client.Entity.NobilityRank == Game.ConquerStructures.NobilityRank.Baron)//TopBaron
                            {
                                _String str = new _String(true);
                                str.UID = client.Entity.UID;
                                str.TextsCount = 1;
                                str.Type = _String.Effect;
                                str.Texts.Add("good");
                                client.Entity.Owner.SendScreen(str, true);
                                client.Entity.Teleport(9997, 50, 50);
                                client.Send(new Network.GamePackets.NpcReply(6, "Gratz You have joined TopBaron Map Just Wait Untile it Start ."));
                            }
                            //8880 to 8885
                        }

                        #endregion Top Donation Quest
                        #region Top PkPoints Quest

                        if (client.Map.BaseID != 6001 && client.Map.BaseID != 6002 && !client.Entity.Dead && req.OptionID == 232)
                        {
                            if (client.Entity.PKPoints >= 50 && client.Entity.PKPoints <= 150)//BlackName
                            {
                                _String str = new _String(true);
                                str.UID = client.Entity.UID;
                                str.TextsCount = 1;
                                str.Type = _String.Effect;
                                str.Texts.Add("good");
                                BahaaEffects.good(client);
                                client.Entity.Owner.SendScreen(str, true);
                                client.Entity.Teleport(3320, 50, 50);
                                client.Send(new Network.GamePackets.NpcReply(6, "Gratz You have joined TopBlackname Map Just Wait Untile it Start ."));
                            }
                            if (client.Entity.PKPoints >= 10 && client.Entity.PKPoints <= 60)//TopRedname
                            {
                                _String str = new _String(true);
                                str.UID = client.Entity.UID;
                                str.TextsCount = 1;
                                str.Type = _String.Effect;
                                str.Texts.Add("good");
                                BahaaEffects.good(client);
                                client.Entity.Owner.SendScreen(str, true);
                                client.Entity.Teleport(3321, 50, 50);
                                client.Send(new Network.GamePackets.NpcReply(6, "Gratz You have joined TopRedname Map Just Wait Untile it Start ."));
                            }
                            if (client.Entity.PKPoints >= 00 && client.Entity.PKPoints <= 10)//Whitename
                            {
                                _String str = new _String(true);
                                str.UID = client.Entity.UID;
                                str.TextsCount = 1;
                                str.Type = _String.Effect;
                                str.Texts.Add("good");
                                BahaaEffects.good(client);
                                client.Entity.Owner.SendScreen(str, true);
                                client.Entity.Teleport(3322, 50, 50);
                                client.Send(new Network.GamePackets.NpcReply(6, "Gratz You have joined TopDucke Map Just Wait Untile it Start ."));
                            }


                        }

                        #endregion Top PkPoints Quest
                        if (client.Map.BaseID != 6001 && client.Map.BaseID != 6000 && !client.Entity.Dead && req.OptionID == 244 && client.Map.BaseID != 700)//GuildWar
                        {
                            client.Disconnect();
                            return;
                        }  

                        if (req.InteractType == NpcReply.MessageBox)
                        {
                            if (client.Entity.ActivePOPUP == 99995)//jose
                            {
                                client.Entity.ActivePOPUP = 0;
                                break;
                            }

                            if (req.OptionID == 255 && client.MessageOK != null)
                                client.MessageOK.Invoke(client);
                            else
                                if (client.MessageCancel != null)
                                    client.MessageCancel.Invoke(client);

                            client.MessageOK = null;
                            client.MessageCancel = null;
                        }
                        else
                        {
                            if (ID == 2031)
                                client.ActiveNpc = req.NpcID;
                            if (req.NpcID == 12)
                            {
                                if (client.Entity.VIPLevel > 0)
                                {
                                    Data data = new Data(true);
                                    data.ID = Data.OpenWindow;
                                    data.UID = client.Entity.UID;
                                    data.TimeStamp = Time32.Now;
                                    data.dwParam = Data.WindowCommands.VIPWarehouse;
                                    data.wParam1 = client.Entity.X;
                                    data.wParam2 = client.Entity.Y;
                                    client.Send(data);
                                    break;
                                }
                            }
                            Interfaces.INpc npc = null;
                            if (req.InteractType == 102)
                            {
                                if (client.Guild != null)
                                {
                                    if (client.AsMember.Rank == Conquer_Online_Server.Game.Enums.GuildMemberRank.GuildLeader)
                                    {
                                        client.Guild.ExpelMember(req.Input, false);
                                    }
                                }
                                return;
                            }
                            if (client.ActiveNpc == 3002178)
                            {
                                if (client.Inventory.Contains(client.ActiveNpc, 1))
                                {
                                    if (req.OptionID == 1)
                                    {
                                        client.Entity.Teleport(10021, 54, 56);
                                    }
                                    if (req.OptionID == 2)
                                    {
                                        client.Entity.Teleport(10022, 54, 56);
                                    }
                                    if (req.OptionID == 3)
                                    {
                                        client.Entity.Teleport(10023, 54, 56);
                                    }
                                    if (req.OptionID == 4)
                                    {
                                        client.Entity.Teleport(10024, 54, 56);
                                    }
                                    if (req.OptionID == 5)
                                    {
                                        client.Entity.Teleport(10025, 54, 56);
                                    }

                                }
                                return;
                            }
                            if (client.ActiveNpc >= 728525 && client.ActiveNpc <= 728527)
                            {

                                if (client.Inventory.Contains(client.ActiveNpc, 1))
                                {
                                    if (req.OptionID >= 1 && req.OptionID <= 3)
                                    {
                                        uint color = 255 | 150 << 16;
                                        if (req.OptionID == 2)
                                            color = 150 << 8 | 255 << 16;
                                        else if (req.OptionID == 3)
                                            color = 150 | 255 << 8;
                                        byte plus = 1;
                                        if (client.ActiveNpc % 10 == 6) plus = 3;
                                        else if (client.ActiveNpc % 10 == 7) plus = 6;
                                        client.Inventory.Remove(client.ActiveNpc, 1);
                                        ConquerItem _item = new ConquerItem(true);
                                        _item.ID = 300000;
                                        Database.ConquerItemInformation _iteminfos = new Database.ConquerItemInformation(_item.ID, 0);
                                        _item.Durability = _item.MaximDurability = _iteminfos.BaseInformation.Durability;
                                        _item.Plus = plus;
                                        _item.Effect = Game.Enums.ItemEffect.Horse;
                                        _item.SocketProgress = color;
                                        client.Inventory.Add(_item, Game.Enums.ItemUse.CreateAndAdd);
                                    }
                                }
                                return;
                            }
                            #region Captchas
                            Npcs dialog = new Npcs(client);
                            if (client.ActiveNpc == 9999998 && req.OptionID != 255 && client.SMCaptcha != "")
                            {
                                if (req.Input == client.SMCaptcha)
                                {
                                    client.SMSpinCount = 0;
                                    client.SMCaptcha = "";
                                    PacketHandler.HandlePacket(client.SMPacket, client);
                                    client.SMPacket = null;
                                }
                                else
                                {
                                    dialog.Text("You have spun the wheel 10 times. Input the current text: " + client.SMCaptcha + " to verify your humanity.");
                                    dialog.Input("Captcha message:", 1, (byte)client.SMCaptcha.Length);
                                    dialog.Option("No thank you.", 255);
                                    dialog.Send();
                                }
                                return;
                            }
                            if (client.ActiveNpc == 9999990 && client.ExpectingQAnswer)
                            {
                                if (req.OptionID == 255) return;
                                client.ExpectingQAnswer = false;
                                if (req.Input == client.QAnswer && client.QCorrect != null)
                                    client.QCorrect(client);
                                else
                                    if (client.QWrong != null)
                                        client.QWrong(client);
                                client.QAnswer = null;
                                client.QWrong = null;
                                return;
                            }
                            if (client.ActiveNpc == 9999997 && client.WaitingKillCaptcha)
                            {
                                if (req.OptionID == 255) return;
                                if (req.Input == client.KillCountCaptcha)
                                {
                                    client.Entity.KillCount = 0;
                                    client.Entity.KillCount2 = 0;
                                    client.WaitingKillCaptcha = false;
                                }
                                else
                                {
                                    dialog.Text("Input the current text: " + client.KillCountCaptcha + " to verify your humanity.");
                                    dialog.Input("Captcha message:", 1, (byte)client.KillCountCaptcha.Length);
                                    dialog.Option("No thank you.", 255);
                                    dialog.Send();
                                }
                                return;
                            }
                            if (client.ActiveNpc == 9999996 && client.WaitingTradePassword)
                            {
                                if (req.OptionID == 255)
                                {
                                    CloseTrade(new Trade(true) { Type = Trade.Close }, client);
                                    return;
                                }
                                /*if (req.Input == client.WarehousePW)
                                {
                                    AcceptTrade(client.TradePacket, client);
                                    client.TradePacket = null;
                                    client.WaitingTradePassword = false;
                                }
                                else
                                {
                                    dialog.Text("Input the warehouse password to trade");
                                    dialog.Input("Password:", 1, 16);
                                    dialog.Option("No thank you.", 255);
                                    dialog.Send();
                                }
                                return;
                            }
                            if (client.ActiveNpc == 9999995 && client.WaitingItemUnlockPassword)
                            {
                                if (req.OptionID == 255)
                                {
                                    client.ItemUnlockPacket = null;
                                    return;
                                }
                                if (req.Input == client.WarehousePW)
                                {
                                    UnlockItemInstant(client.ItemUnlockPacket, client);
                                    client.ItemUnlockPacket = null;
                                    client.WaitingItemUnlockPassword = false;
                                }
                                else
                                {
                                    dialog.Text("Input the warehouse password to instantly unlock.");
                                    dialog.Input("Password:", 1, 16);
                                    dialog.Option("No thank you.", 255);
                                    dialog.Send();
                                }
                                return;*/
                            }
                            #endregion
                            if (client.Map.Npcs.TryGetValue(client.ActiveNpc, out npc))
                            {
                                if (Kernel.GetDistance(client.Entity.X, client.Entity.Y, npc.X, npc.Y) > 17)
                                    return;
                                if (req.OptionID == 255 || (req.OptionID == 0 && ID == 2032))
                                    return;
                                if (client.Entity.Dead)
                                    return;
                                req.NpcID = client.ActiveNpc;
                                //NpcDialogs.Dialogs.GetDialog(req, client);
                                Npcs.GetDialog(req, client);
                            }
                        }
                        break;
                    }
                #endregion
                #region Compose (2036)
                case 2036:
                    {
                        Compose compose = new Compose(false);
                        compose.Deserialize(packet);
                        ComposePlus(compose, client);
                        break;
                    }
                #endregion
                #region Offline TG (2044)
                case 2044:
                    {
                        OfflineTGRequest otgr = new OfflineTGRequest(false);
                        otgr.Deserialize(packet);
                        switch (otgr.ID)
                        {
                            case OfflineTGRequest.OnTrainingTimeRequested:
                                {
                                    otgr.Minutes = 900;
                                    client.Send(otgr);
                                    break;
                                }
                            case OfflineTGRequest.OnConfirmation:
                                {
                                    if (client.Map.BaseID == 6001 || client.Map.BaseID == 6000 || client.Map.BaseID == 1038)
                                        return;
                                    client.Entity.PreviousMapID = client.Entity.MapID;
                                    client.Entity.PrevX = client.Entity.X;
                                    client.Entity.PrevY = client.Entity.Y;
                                    client.Entity.MapID = 601;
                                    client.Entity.X = 64;
                                    client.Entity.Y = 56;
                                    client.OfflineTGEnterTime = DateTime.Now;

                                    client.Disconnect();
                                    break;
                                }
                            case OfflineTGRequest.ClaimExperience:
                                {
                                    var T1 = new TimeSpan(DateTime.Now.Ticks);
                                    var T2 = new TimeSpan(client.OfflineTGEnterTime.Ticks);
                                    ushort minutes = (ushort)(T1.TotalMinutes - T2.TotalMinutes);
                                    minutes = (ushort)Math.Min((ushort)900, minutes);
                                    double expballGain = (double)300 * (double)minutes / (double)900;
                                    while (expballGain >= 100)
                                    {
                                        expballGain -= 100;
                                        client.IncreaseExperience(client.ExpBall, false);
                                    }
                                    if (expballGain != 0)
                                        client.IncreaseExperience((uint)(client.ExpBall * (expballGain / 100)), false);

                                    client.Entity.SetLocation(client.Entity.PreviousMapID, client.Entity.PrevX, client.Entity.PrevY);
                                    if (client.Map.ID == 1036 || client.Map.ID == 1039)
                                        client.Entity.Teleport(1002, 300, 280);
                                    else
                                    {
                                        switch (client.Map.ID)
                                        {
                                            default:
                                                {
                                                    client.Entity.Teleport(1002, 429, 378);
                                                    break;
                                                }
                                            case 1000:
                                                {
                                                    client.Entity.Teleport(1000, 500, 650);
                                                    break;
                                                }
                                            case 1020:
                                                {
                                                    client.Entity.Teleport(1020, 565, 562);
                                                    break;
                                                }
                                            case 1011:
                                                {
                                                    client.Entity.Teleport(1011, 188, 264);
                                                    break;
                                                }
                                            case 1015:
                                                {
                                                    client.Entity.Teleport(1015, 717, 571);
                                                    break;
                                                }
                                        }
                                    }
                                    client.OfflineTGEnterTime = DateTime.Now;
                                    break;
                                }
                            default:
                                client.Send(otgr);
                                break;
                        }
                        break;
                    }
                #endregion
                #region Trade partner (2046)
                case 2046:
                    {
                        TradePartner partner = new TradePartner(false);
                        partner.Deserialize(packet);
                        switch (partner.Type)
                        {
                            case TradePartner.RequestPartnership:
                                RequestTradePartnership(partner, client);
                                break;
                            case TradePartner.RejectRequest:
                                RejectPartnership(partner, client);
                                break;
                            case TradePartner.BreakPartnership:
                                BreakPartnership(partner, client);
                                break;
                        }
                        break;
                    }
                #endregion
                #region Guild Arsenal (2202 + 2203)
                case 2202:
                    {
                        ArsenalView view = new ArsenalView(false, 0);
                        view.Deserialize(packet);
                        ViewArsenalPage(view, client);
                        break;
                    }
                case 2203:
                    {
                        ArsenalCommand command = new ArsenalCommand();
                        command.Deserialize(packet);
                        switch (command.Type)
                        {
                            case ArsenalCommand.Unlock:
                                UnlockArsenal(command, client);
                                break;
                            case ArsenalCommand.Inscribe:
                                InscribeArsenalItem(command, client);
                                break;
                            case ArsenalCommand.Uninscribe:
                                UninscribeArsenalItem(command, client);
                                break;
                            case ArsenalCommand.Enchant:
                                EnchantArsenal(command, client);
                                break;
                            case ArsenalCommand.View:
                                ViewGuildArsenal(client);
                                break;
                        }
                        break;
                    }
                #endregion
                #region ItemLock (2048)
                case 2048:
                    {
                        if (client.Action != 2)
                            return;
                        ItemLock itemlock = new ItemLock(false);
                        itemlock.Deserialize(packet);
                        switch (itemlock.ID)
                        {
                            case ItemLock.RequestLock:
                                LockItem(itemlock, client);
                                break;
                            case ItemLock.RequestUnlock:
                                if (client.Entity.VIPLevel == 6)
                                {
                                    client.WaitingItemUnlockPassword = true;
                                    client.ItemUnlockPacket = itemlock;
                                    Npcs dialog = new Npcs(client);
                                    client.ActiveNpc = 9999995;
                                    dialog.Text("Input the warehouse password to instantly unlock.");
                                    dialog.Input("Password:", 1, 16);
                                    dialog.Option("No thank you.", 255);
                                    dialog.Send();
                                }
                                else
                                    UnlockItem5Days(itemlock, client);
                                break;
                        }
                        break;
                    }
                #endregion
                #region Broadcast (2050)
                case 2050:
                    {
                        Broadcast cast = new Broadcast(false);
                        cast.Deserialize(packet);
                        switch (cast.Type)
                        {
                            case Broadcast.ReleaseSoonMessages:
                                {
                                    BroadcastInfoAwaiting(cast, client);
                                    break;
                                }
                            case Broadcast.MyMessages:
                                {
                                    BroadcastClientMessages(cast, client);
                                    break;
                                }
                            case Broadcast.BroadcastMessage:
                                {
                                    if (Game.ConquerStructures.Broadcast.Broadcasts.Count == Constants.MaxBroadcasts)
                                    {
                                        client.Send(new Message("You cannot send any broadcasts for now. The limit has been reached. Wait until a broadcast is chopped down.", System.Drawing.Color.Red, Message.TopLeft));
                                        break;
                                    }
                                    DateTime Now = DateTime.Now;
                                    DateTime LastBC = client["lastbroadcast"];

                                    if (Now >= LastBC.AddMinutes(2))
                                    {
                                        if (client.Trade != null)
                                        {
                                            if (client.Trade.InTrade)
                                                break;
                                        }
                                        if (client.Entity.ConquerPoints >= 5)
                                        {
                                            client["lastbroadcast"] = Now;
                                            client.Entity.ConquerPoints -= 5;
                                            Game.ConquerStructures.Broadcast.BroadcastStr broadcast = new Game.ConquerStructures.Broadcast.BroadcastStr();
                                            broadcast.EntityID = client.Entity.UID;
                                            broadcast.EntityName = client.Entity.Name;
                                            broadcast.ID = Game.ConquerStructures.Broadcast.BroadcastCounter.Next;
                                            if (cast.List[0].Length > 80)
                                                cast.List[0] = cast.List[0].Remove(80);
                                            broadcast.Message = cast.List[0];
                                            if (Game.ConquerStructures.Broadcast.Broadcasts.Count == 0)
                                            {
                                                if (Game.ConquerStructures.Broadcast.CurrentBroadcast.EntityID == 1)
                                                {
                                                    Game.ConquerStructures.Broadcast.CurrentBroadcast = broadcast;
                                                    Game.ConquerStructures.Broadcast.LastBroadcast = DateTime.Now;
                                                    Kernel.SendWorldMessage(new Message(cast.List[0], "ALLUSERS", client.Entity.Name, System.Drawing.Color.Red, Message.BroadcastMessage), Program.GamePool);
                                                    client.Send(cast);
                                                    break;
                                                }
                                            }
                                            File.AppendAllText("database\\broadcasts.txt", broadcast.EntityName + " | " + broadcast.EntityID + " | MESSAGE: '" + broadcast.Message + "'");
                                            Game.ConquerStructures.Broadcast.Broadcasts.Add(broadcast);
                                            cast.dwParam = (uint)Game.ConquerStructures.Broadcast.Broadcasts.Count;
                                            client.Send(cast);
                                            break;
                                        }
                                    }
                                    break;
                                }
                            case Broadcast.Urgen5CPs:
                                {
                                    for (int c = 0; c < Game.ConquerStructures.Broadcast.Broadcasts.Count; c++)
                                    {
                                        var broadcast = Game.ConquerStructures.Broadcast.Broadcasts[c];
                                        if (broadcast.ID == cast.dwParam)
                                        {
                                            if (c != 0)
                                            {
                                                if (client.Trade != null)
                                                {
                                                    if (client.Trade.InTrade)
                                                        break;
                                                }
                                                if (client.Entity.ConquerPoints > 5)
                                                {
                                                    broadcast.SpentCPs += 5;
                                                    client.Entity.ConquerPoints -= 5;
                                                    if (Game.ConquerStructures.Broadcast.Broadcasts[c - 1].SpentCPs <= broadcast.SpentCPs)
                                                    {

                                                        Game.ConquerStructures.Broadcast.Broadcasts[c] = Game.ConquerStructures.Broadcast.Broadcasts[c - 1];
                                                        Game.ConquerStructures.Broadcast.Broadcasts[c - 1] = broadcast;
                                                    }
                                                    else
                                                    {
                                                        Game.ConquerStructures.Broadcast.Broadcasts[c] = broadcast;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    break;
                                }
                            case Broadcast.Urgen15CPs:
                                {
                                    for (int c = 0; c < Game.ConquerStructures.Broadcast.Broadcasts.Count; c++)
                                    {
                                        var broadcast = Game.ConquerStructures.Broadcast.Broadcasts[c];
                                        if (broadcast.ID == cast.dwParam)
                                        {
                                            if (c != 0)
                                            {
                                                if (client.Trade != null)
                                                {
                                                    if (client.Trade.InTrade)
                                                        break;
                                                }
                                                if (client.Entity.ConquerPoints > 15)
                                                {
                                                    broadcast.SpentCPs += 15;
                                                    client.Entity.ConquerPoints -= 15;
                                                    for (int b = c - 1; b > 0; b--)
                                                        Game.ConquerStructures.Broadcast.Broadcasts[b] = Game.ConquerStructures.Broadcast.Broadcasts[b - 1];

                                                    Game.ConquerStructures.Broadcast.Broadcasts[0] = broadcast;
                                                }
                                            }
                                        }
                                    }
                                    break;
                                }
                        }
                        break;
                    }
                #endregion
                #region Nobility (2064)
                case 2064:
                    {
                        NobilityInfo nobility = new NobilityInfo(false);
                        nobility.Deserialize(packet);
                        Game.ConquerStructures.Nobility.Handle(nobility, client);
                        break;
                    }
                #endregion
                #region Race potions (2072)
                case 2072:
                    {
                        RacePotion pot = new RacePotion(false);
                        pot.Deserialize(packet);
                        int i = pot.Location - 1;
                        if (i < 0 || i > 4)
                            return;
                        if (client.Potions[i] == null)
                            return;
                        var potion = client.Potions[i];
                        potion.Count--;

                        pot.PotionType = potion.Type;
                        pot.Amount = (ushort)potion.Count;
                        client.Send(pot);

                        client.ApplyRacePotion(potion.Type, pot.dwParam);

                        if (potion.Count == 0)
                            client.Potions[i] = null;
                        break;
                    }
                #endregion
                #region MemoryAgate
                case 2110:
                    {
                        uint ItemUID = BitConverter.ToUInt32(packet, 8);
                        switch (packet[4])
                        {
                            case 1://record
                                {
                                    if (client.Map.IsDynamic()) return;
                                    ConquerItem Item = null;
                                    if (client.Inventory.TryGetItem(ItemUID, out Item))
                                    {
                                        if (Item.Agate_map.ContainsKey(packet[12]))
                                        {
                                            Item.Agate_map[(uint)packet[12]] = client.Entity.MapID
                                               + "~" + client.Entity.X
                                               + "~" + client.Entity.Y;
                                            Database.ConquerItemTable.UpdateItemAgate(Item);
                                            Item.SendAgate(client);
                                            break;
                                        }
                                        if (packet[12] > Item.Agate_map.Count)
                                        {
                                            Item.Agate_map.Add((byte)(Item.Agate_map.Count), client.Entity.MapID
                                               + "~" + client.Entity.X
                                               + "~" + client.Entity.Y);
                                            Database.ConquerItemTable.UpdateItemAgate(Item);
                                            Item.SendAgate(client);
                                            break;
                                        }
                                        else
                                        {
                                            if (!Item.Agate_map.ContainsKey(packet[12]))
                                            {

                                                Item.Agate_map.Add(packet[12], client.Entity.MapID
                                                    + "~" + client.Entity.X

                                                   + "~" + client.Entity.Y);
                                                Database.ConquerItemTable.UpdateItemAgate(Item);
                                                Item.SendAgate(client);
                                            }
                                            break;
                                        }
                                    }
                                    break;
                                }
                            case 3://recal
                                {
                                    if (client.Map.IsDynamic()) return;
                                    ConquerItem Item = null;
                                    if (client.Inventory.TryGetItem(ItemUID, out Item))
                                    {

                                        if (Item.Agate_map.ContainsKey(packet[12]))
                                        {
                                            if (ushort.Parse(Item.Agate_map[packet[12]].Split('~')[0].ToString()) == 1038)
                                                return;
                                            if (ushort.Parse(Item.Agate_map[packet[12]].Split('~')[0].ToString()) == 6001)
                                                return;
                                            client.Entity.Teleport(ushort.Parse(Item.Agate_map[packet[12]].Split('~')[0].ToString())
                                                , ushort.Parse(Item.Agate_map[packet[12]].Split('~')[1].ToString())
                                                , ushort.Parse(Item.Agate_map[packet[12]].Split('~')[2].ToString()));
                                            Item.Durability--;
                                            Item.SendAgate(client);
                                            Database.ConquerItemTable.UpdateItemAgate(Item);
                                        }
                                    }
                                    break;
                                }
                            case 4://repair
                                {
                                    ConquerItem Item = null;
                                    if (client.Inventory.TryGetItem(ItemUID, out Item))
                                    {
                                        int cost = (int)(Item.MaximDurability - Item.Durability) / 2;
                                        if (cost == 0)
                                            cost = 1;
                                        if (client.Entity.ConquerPoints > cost)
                                        {
                                            client.Entity.ConquerPoints -= (uint)cost;
                                            Item.Durability = Item.MaximDurability;
                                            Item.SendAgate(client);
                                            Database.ConquerItemTable.UpdateItemAgate(Item);
                                        }
                                    }
                                    break;
                                }
                        }
                        break;
                    }
                #endregion
                #region Guild Donation//TQ
                case 0x835:
                    {
                        if (client.Guild != null)
                        {
                            client.Send(new GuildDonationList(packet) { g = client.Guild }.Build());
                        }
                    }
                    break;
                #endregion
                #region Jianghu (2700)
                //case 2700:
                //    {

                //        Conquer_Online_Server.GamePackets.JiangHu2.Execute(client, packet);
                //        return;
                //    }

                #endregion Jianghu (1070)
                #region MsgMessageBoard 1111
                case 1111:
                    {
                        COServer.Network.MsgMessageBoard.Process(client, packet);
                        return;
                    }
                #endregion MsgMessageBoard
                #region AutoHunting (1070)
                case 1070://TQ
                    {
                        if (client.Entity.Auto == false && client.Map.BaseID == 2351)
                        {
                            client.Send(new Network.GamePackets.NpcReply(6, "Sorry Auto Hunting No In The MaP!"));
                            return;
                        }
                        if (client.Entity.Auto == false && client.Map.BaseID == 1030)
                        {
                            client.Send(new Network.GamePackets.NpcReply(6, "Sorry Auto Hunting No In The MaP!"));
                            return;
                        }
                        AutoHunt auto = new AutoHunt(false);
                        auto.Deserialize(packet);
                        switch (auto.Type)
                        {
                            case AutoHunt.Icon:
                                {
                                    auto = new AutoHunt(true);
                                    auto.Type = 0;
                                    auto.Show = 341;
                                    client.Send(auto);
                                    return;
                                }
                            case AutoHunt.Start:
                                {
                                    auto = new AutoHunt(true);
                                    auto.Type = 1;
                                    client.Send(auto);
                                    client.Entity.Auto = true;
                                    client.Entity.AddFlag3(Update.Flags3.AutoHunting);
                                    return;
                                }
                            case AutoHunt.Gui:
                                {
                                    auto = new AutoHunt(true);
                                    auto.Type = 2;
                                    auto.EXP = (ushort)client.Entity.autohuntxp;
                                    client.Send(auto);
                                    return;
                                }
                            case AutoHunt.End:
                                {
                                    auto = new AutoHunt(true);
                                    auto.Type = 3;
                                    client.Entity.Auto = false;
                                    client.Entity.autohuntxp = 0;
                                    client.Entity.RemoveFlag3(Update.Flags3.AutoHunting);
                                    client.Send(auto);
                                    return;
                                }
                        }
                        return;
                    }

                #endregion AutoHunting (1070)
                #region TopGuilds
                case 1058:
                    {
                        if (client.Guild != null && client.AsMember != null)
                        {
                            if (client.AsMember != null)
                            {
                                Writer.WriteUInt32((uint)client.AsMember.SilverDonation, 8, packet);
                                if (client.Entity.GuildRank != (ushort)Conquer_Online_Server.Game.Enums.GuildMemberRank.DeputyLeader)
                                    if (client.Entity.GuildRank != (ushort)Conquer_Online_Server.Game.Enums.GuildMemberRank.GuildLeader)
                                        if (client.AsMember.SilverDonation > client.Guild.SilverFund)
                                        {
                                            client.Guild.SilverFund = (uint)client.AsMember.SilverDonation;
                                            client.Entity.GuildRank = (ushort)Conquer_Online_Server.Game.Enums.GuildMemberRank.OSupervisor;
                                            client.AsMember.Rank = (Conquer_Online_Server.Game.Enums.GuildMemberRank)client.Entity.GuildRank;
                                        }

                                Writer.WriteUInt32((uint)client.AsMember.ConquerPointDonation, 20, packet);
                                if (client.Entity.GuildRank != (ushort)Conquer_Online_Server.Game.Enums.GuildMemberRank.DeputyLeader)
                                    if (client.Entity.GuildRank != (ushort)Conquer_Online_Server.Game.Enums.GuildMemberRank.GuildLeader)
                                        if (client.AsMember.ConquerPointDonation > client.Guild.ConquerPointFund)
                                        {
                                            client.Guild.ConquerPointFund = (uint)client.AsMember.ConquerPointDonation;
                                            client.Entity.GuildRank = (ushort)Conquer_Online_Server.Game.Enums.GuildMemberRank.CPSupervisor;
                                            client.AsMember.Rank = (Conquer_Online_Server.Game.Enums.GuildMemberRank)client.Entity.GuildRank;
                                        }

                            }
                            Writer.WriteUInt32(client.Entity.PKPoints, 12, packet);
                            if (client.Entity.GuildRank != (ushort)Conquer_Online_Server.Game.Enums.GuildMemberRank.DeputyLeader)
                                if (client.Entity.GuildRank != (ushort)Conquer_Online_Server.Game.Enums.GuildMemberRank.GuildLeader)
                                    if (client.Entity.PKPoints > client.Guild.pkp_donation)
                                    {
                                        client.Guild.pkp_donation = (uint)client.Entity.PKPoints;
                                        client.Entity.GuildRank = (ushort)Conquer_Online_Server.Game.Enums.GuildMemberRank.PKSupervisor;
                                        client.AsMember.Rank = (Conquer_Online_Server.Game.Enums.GuildMemberRank)client.Entity.GuildRank;
                                    }

                            if (client.ArenaStatistic != null)
                            {
                                Writer.WriteUInt32(client.ArenaStatistic.CurrentHonor, 24, packet);
                                if (client.Entity.GuildRank != (ushort)Conquer_Online_Server.Game.Enums.GuildMemberRank.DeputyLeader)
                                    if (client.Entity.GuildRank != (ushort)Conquer_Online_Server.Game.Enums.GuildMemberRank.GuildLeader)
                                        if (client.ArenaStatistic.CurrentHonor > client.Guild.honor_donation)
                                        {
                                            client.Guild.honor_donation = (uint)client.ArenaStatistic.CurrentHonor;
                                            client.Entity.GuildRank = (ushort)Conquer_Online_Server.Game.Enums.GuildMemberRank.HonoraryManager;
                                            client.AsMember.Rank = (Conquer_Online_Server.Game.Enums.GuildMemberRank)client.Entity.GuildRank;
                                        }
                            }
                            Writer.WriteUInt32(0, 16, packet);
                            if (client.Entity != null)
                                if (client.Entity.Flowers != null)
                                {
                                    Writer.WriteUInt32((uint)client.Entity.Flowers.RedRoses, 28, packet);
                                    if (client.Entity.GuildRank != (ushort)Conquer_Online_Server.Game.Enums.GuildMemberRank.DeputyLeader)
                                        if (client.Entity.GuildRank != (ushort)Conquer_Online_Server.Game.Enums.GuildMemberRank.GuildLeader)
                                            if (client.Entity.Flowers.RedRoses > client.Guild.rose_donation)
                                            {
                                                client.Guild.rose_donation = (uint)client.Entity.Flowers.RedRoses;
                                                client.Entity.GuildRank = (ushort)Conquer_Online_Server.Game.Enums.GuildMemberRank.RoseSupervisor;
                                                client.AsMember.Rank = (Conquer_Online_Server.Game.Enums.GuildMemberRank)client.Entity.GuildRank;
                                            }


                                    Writer.WriteUInt32((uint)client.Entity.Flowers.Tulips, 32, packet);
                                    if (client.Entity.GuildRank != (ushort)Conquer_Online_Server.Game.Enums.GuildMemberRank.DeputyLeader)
                                        if (client.Entity.GuildRank != (ushort)Conquer_Online_Server.Game.Enums.GuildMemberRank.GuildLeader)
                                            if (client.Entity.Flowers.Tulips > client.Guild.tuil_donation)
                                            {
                                                client.Guild.tuil_donation = (uint)client.Entity.Flowers.Tulips;
                                                client.Entity.GuildRank = (ushort)Conquer_Online_Server.Game.Enums.GuildMemberRank.TulipFollower;
                                                client.AsMember.Rank = (Conquer_Online_Server.Game.Enums.GuildMemberRank)client.Entity.GuildRank;
                                            }



                                    Writer.WriteUInt32((uint)client.Entity.Flowers.Lilies, 36, packet);
                                    if (client.Entity.GuildRank != (ushort)Conquer_Online_Server.Game.Enums.GuildMemberRank.DeputyLeader)
                                        if (client.Entity.GuildRank != (ushort)Conquer_Online_Server.Game.Enums.GuildMemberRank.GuildLeader)
                                            if (client.Entity.Flowers.Lilies > client.Guild.lilies_donation)
                                            {
                                                client.Guild.lilies_donation = (uint)client.Entity.Flowers.Lilies;
                                                client.Entity.GuildRank = (ushort)Conquer_Online_Server.Game.Enums.GuildMemberRank.LilySupervisor;
                                                client.AsMember.Rank = (Conquer_Online_Server.Game.Enums.GuildMemberRank)client.Entity.GuildRank;
                                            }


                                    Writer.WriteUInt32((uint)client.Entity.Flowers.Orchads, 40, packet);
                                    if (client.Entity.GuildRank != (ushort)Conquer_Online_Server.Game.Enums.GuildMemberRank.DeputyLeader)
                                        if (client.Entity.GuildRank != (ushort)Conquer_Online_Server.Game.Enums.GuildMemberRank.GuildLeader)
                                            if (client.Entity.Flowers.Orchads > client.Guild.orchid_donation)
                                            {
                                                client.Guild.orchid_donation = (uint)client.Entity.Flowers.Orchads;
                                                client.Entity.GuildRank = (ushort)Conquer_Online_Server.Game.Enums.GuildMemberRank.OrchidFollower;
                                                client.AsMember.Rank = (Conquer_Online_Server.Game.Enums.GuildMemberRank)client.Entity.GuildRank;
                                            }
                                    Writer.WriteUInt32((uint)(client.Entity.Flowers.Orchads
                                        + (uint)client.Entity.Flowers.RedRoses
                                        + (uint)client.Entity.Flowers.Tulips
                                        + (uint)client.Entity.Flowers.Lilies), 44, packet);
                                }
                            if (client.Entity.GuildRank != (ushort)Conquer_Online_Server.Game.Enums.GuildMemberRank.DeputyLeader)
                                if (client.Entity.GuildRank != (ushort)Conquer_Online_Server.Game.Enums.GuildMemberRank.GuildLeader)
                                {
                                    if (client.Entity.Name == client.Guild.LeaderName)
                                    {
                                        client.Entity.GuildRank = (ushort)Conquer_Online_Server.Game.Enums.GuildMemberRank.LeaderSpouse;
                                        client.AsMember.Rank = (Conquer_Online_Server.Game.Enums.GuildMemberRank)client.Entity.GuildRank;
                                    }
                                }
                            if (client.Guild != null)
                                client.Guild.SendGuild(client);
                            client.Send(packet);
                        }
                        break;
                    }
                #endregion
                #region Flowers (1150 & 1151)
                case 1150:
                    {
                        if (packet[4] == 0)
                        {
                            new Game.Features.Flowers.FlowerSystem(packet, client);
                        }
                        if (packet[4] == 1)
                        {
                            new Game.Features.Kisses.KissSystem(packet, client);
                        }
                        break;
                    }
                #endregion
                #region Flowers (1150 & 1151)
                case 1151:
                    {
                        GenericRanking ranking = new GenericRanking(false, 0);
                        ranking.Deserialize(packet);
                        if (ranking.RankingType >= GenericRanking.DragonChi && ranking.RankingType <= GenericRanking.TurtleChi)
                        {
                            switch (ranking.Mode)
                            {
                                case GenericRanking.Ranking:
                                    {
                                        ShowGenericRanking(ranking, client);
                                        return;
                                    }
                            }
                            return;
                        }
                        Database.FlowerSystemTable.Load();
                        int subtype = packet[4];
                        AddFlowers(client, packet);
                        uint uid = BitConverter.ToUInt32(packet, 8);
                        ushort pagenumber = BitConverter.ToUInt16(packet, 14);

                        if (subtype == 1)
                        {

                            int rankss = 1;
                            Game.Features.Flowers.Flowers.Redrosse = (from entry in Database.FlowerSystemTable.FlowerList
                                                                      where entry.RedRoses > 0 //AhmedZero Adding
                                                                      orderby entry.RedRoses descending
                                                                      select new Game.Features.Flowers.Flowers.ListFlowerRank() { name = entry.name, redrosse = entry.RedRoses, body = entry.Body, rank = rankss++, orchides = entry.Orchads, lilise = entry.Lilies, tuplise = entry.Tulips })
                                                 .ToList();
                            int ranks = 1;
                            Game.Features.Flowers.Flowers.Orchides = (from entry in Database.FlowerSystemTable.FlowerList
                                                                      where entry.Orchads > 0 //AhmedZero Adding
                                                                      orderby entry.Orchads descending
                                                                      select new Game.Features.Flowers.Flowers.ListFlowerRank() { name = entry.name, redrosse = entry.RedRoses, body = entry.Body, rank = ranks++, orchides = entry.Orchads, lilise = entry.Lilies, tuplise = entry.Tulips })
                                               .ToList();
                            int ranks3 = 1;
                            Game.Features.Flowers.Flowers.Tuplise = (from entry in Database.FlowerSystemTable.FlowerList
                                                                     where entry.Tulips > 0 //AhmedZero Adding
                                                                     orderby entry.Tulips descending
                                                                     select new Game.Features.Flowers.Flowers.ListFlowerRank() { name = entry.name, redrosse = entry.RedRoses, body = entry.Body, rank = ranks3++, orchides = entry.Orchads, lilise = entry.Lilies, tuplise = entry.Tulips })
                                               .ToList();
                            int ranks4 = 1;
                            Game.Features.Flowers.Flowers.Lilise = (from entry in Database.FlowerSystemTable.FlowerList
                                                                    where entry.Lilies > 0 //AhmedZero Adding
                                                                    orderby entry.Lilies descending
                                                                    select new Game.Features.Flowers.Flowers.ListFlowerRank() { name = entry.name, redrosse = entry.RedRoses, body = entry.Body, rank = ranks4++, orchides = entry.Orchads, lilise = entry.Lilies, tuplise = entry.Tulips })
                                            .ToList();
                            var F = client.Entity.Flowers;
                            foreach (var bl in Game.Features.Flowers.Flowers.Redrosse)
                            {
                                if (bl.name == F.name)
                                {
                                    if (bl.rank <= 100)
                                    {
                                        F.redroesstoday3 = true;
                                    }
                                    else
                                        F.redroesstoday3 = false;
                                }
                            }
                            foreach (var bl in Game.Features.Flowers.Flowers.Orchides)
                            {
                                if (bl.name == F.name)
                                {
                                    if (bl.rank <= 100)
                                    {
                                        F.orchadstoday3 = true;
                                    }
                                    else
                                        F.orchadstoday3 = false;
                                }
                            }
                            foreach (var bl in Game.Features.Flowers.Flowers.Lilise)
                            {
                                if (bl.name == F.name)
                                {
                                    if (bl.rank <= 100)
                                    {
                                        F.liliestoday3 = true;
                                    }
                                    else
                                        F.liliestoday3 = false;
                                }
                            }
                            foreach (var bl in Game.Features.Flowers.Flowers.Tuplise)
                            {
                                if (bl.name == F.name)
                                {
                                    if (bl.rank <= 100)
                                    {
                                        F.tulpistoday3 = true;
                                    }
                                    else
                                        F.tulpistoday3 = false;
                                }
                            }
                            if (F.tulpistoday3 || F.redroesstoday3 || F.orchadstoday3 || F.liliestoday3)
                            {
                                client.Send(Game.ConquerStructures.Society.FlowerRank.BuildPacketRankFlower(client, uid, pagenumber));
                            }
                        }
                        break;
                    }
                #endregion
                #region Mentor prize (2067)
                case 2067:
                    {
                        MentorPrize prize = new MentorPrize(false);
                        prize.Deserialize(packet);
                        switch (prize.Prize_Type)
                        {
                            case MentorPrize.ClaimExperience:
                            case MentorPrize.ClaimSomeExperience:
                                {
                                    client.IncreaseExperience((ulong)(((double)client.PrizeExperience / 600) * client.ExpBall), false);
                                    client.PrizeExperience = 0;
                                    foreach (var appr in client.Apprentices.Values)
                                    {
                                        appr.Actual_Experience = 0;
                                        Database.KnownPersons.SaveApprenticeInfo(appr);
                                    }
                                    prize.Mentor_ID = client.Entity.UID;
                                    prize.Prize_Type = MentorPrize.Show;
                                    prize.Prize_Experience = client.PrizeExperience;
                                    prize.Prize_HeavensBlessing = client.PrizeHeavenBlessing;
                                    prize.Prize_PlusStone = client.PrizePlusStone;
                                    client.Send(prize);
                                    break;
                                }
                            case MentorPrize.ClaimHeavenBlessing:
                                {
                                    client.AddBless(client.PrizeHeavenBlessing);
                                    client.PrizeHeavenBlessing = 0;
                                    foreach (var appr in client.Apprentices.Values)
                                    {
                                        appr.Actual_HeavenBlessing = 0;
                                        Database.KnownPersons.SaveApprenticeInfo(appr);
                                    }
                                    prize.Mentor_ID = client.Entity.UID;
                                    prize.Prize_Type = MentorPrize.Show;
                                    prize.Prize_Experience = client.PrizeExperience;
                                    prize.Prize_HeavensBlessing = client.PrizeHeavenBlessing;
                                    prize.Prize_PlusStone = client.PrizePlusStone;
                                    client.Send(prize);
                                    break;
                                }
                            case MentorPrize.ClaimPlus:
                                {
                                    int stones = client.PrizePlusStone / 100;
                                    int totake = stones;
                                    if (stones > 0)
                                    {
                                        for (; stones > 0; stones--)
                                        {
                                            client.PrizePlusStone -= 100;
                                            if (!client.Inventory.Add(730001, 1, 1))
                                                break;
                                        }
                                    }
                                    foreach (var appr in client.Apprentices.Values)
                                    {
                                        if (appr.Actual_Plus >= totake)
                                        {
                                            appr.Actual_Plus -= (ushort)totake;
                                            totake = 0;
                                        }
                                        else
                                        {
                                            totake -= appr.Actual_Plus;
                                            appr.Actual_Plus = 0;
                                        }
                                        Database.KnownPersons.SaveApprenticeInfo(appr);
                                    }
                                    prize.Mentor_ID = client.Entity.UID;
                                    prize.Prize_Type = MentorPrize.Show;
                                    prize.Prize_Experience = client.PrizeExperience;
                                    prize.Prize_HeavensBlessing = client.PrizeHeavenBlessing;
                                    prize.Prize_PlusStone = client.PrizePlusStone;
                                    client.Send(prize);
                                    break;
                                }
                            default:
                                {
                                    prize.Mentor_ID = client.Entity.UID;
                                    prize.Prize_Experience = client.PrizeExperience;
                                    prize.Prize_HeavensBlessing = client.PrizeHeavenBlessing;
                                    prize.Prize_PlusStone = client.PrizePlusStone;
                                    client.Send(prize);
                                    break;
                                }
                        }
                        break;
                    }
                #endregion
                #region Skill Soul
                case 1103:
                    {
                        Spell spell = new Spell(true);
                        spell.Deserialize(packet);
                        if (!client.Spells.ContainsKey(spell.ID))
                            return;
                        switch (packet[18])
                        {
                            case 5://Remove
                                {
                                    //Do it Your Self :P
                                    //اعملها بنفسك زي ما انت عايز
                                    break;
                                }
                            case 2:
                                {
                                    switch (packet[20])
                                    {
                                        case 1:
                                        case 8: client.Spells[spell.ID].LevelHu2 = 1; break;
                                        case 2:
                                        case 16: client.Spells[spell.ID].LevelHu2 = 2; break;
                                        case 3:
                                        case 24: client.Spells[spell.ID].LevelHu2 = 3; break;
                                        case 4:
                                        case 32: client.Spells[spell.ID].LevelHu2 = 4; break;
                                        default:
                                            {
                                                client.Spells[spell.ID].LevelHu2 = packet[20];
                                            }
                                            break;
                                    }
                                    break;
                                }
                        }
                        packet[18] = 3;
                        client.Send(packet);
                        break;
                    }
                #endregion Skill Soul  
                #region PkExplore (2220)
                case 2220:
                    {
                        if (client != null)
                        {

                            PkExplorer pks = new PkExplorer(packet, client);
                            pks.SubType = 1;
                            client.Send(pks.Build());


                        }
                    }
                    break;
                #endregion
                #region ElitePk Tournament 2223 | 2219
                case 2223:
                    {
                        client.Send(packet);
                        ElitePKRanking ranks = new ElitePKRanking(false);
                        ranks.Deserialize(packet);
                        ElitePKTournament.Tournaments[ranks.Group].Rankings(client);
                        break;
                    }
                case 2219:
                    {
                        client.Send(packet);
                        ElitePKBrackets brackets = new ElitePKBrackets(false);
                        brackets.Deserialize(packet);
                        if (brackets.Type == ElitePKBrackets.RequestInformation || brackets.Type == ElitePKBrackets.InitialList)
                            ElitePKTournament.Tournaments[brackets.Group].Update(client, brackets.Page);
                        break;
                    }
                case 0x8cd://2253                                   
                    client.Send(packet);
                    return;
                case 2233:
                    client.Send(packet);
                    return;
                case 1064:
                    {
                        ElitePKWager wager = new ElitePKWager();
                        wager.Deserialize(packet);
                        var pClient = Kernel.GamePool[wager.WagedUID];
                        if (pClient != null)
                        {
                            if (pClient.ElitePKMatch != null)
                            {
                                if (pClient.ElitePKMatch.Flag == ElitePK.Match.StatusFlag.AcceptingWagers)
                                {
                                    if (client.Entity.Money >= wager.Wager * 100000)
                                    {
                                        client.Entity.Money -= wager.Wager * 100000;
                                        if (!pClient.ElitePKStats.Wagers.ContainsKey(client.Entity.UID))
                                            pClient.ElitePKStats.Wagers[client.Entity.UID] = wager.Wager;
                                        else
                                            pClient.ElitePKStats.Wagers[client.Entity.UID] += wager.Wager;
                                        pClient.ElitePKStats.Wager += wager.Wager;
                                        pClient.ElitePKMatch.TotalWagers += wager.Wager;
                                        var epk = ElitePKTournament.Tournaments[pClient.ElitePKMatch.GroupID];
                                        epk.Update(client, 0);
                                    }
                                }
                            }
                        }
                        break;
                    }
                case 1065:
                    {
                        ElitePKWagersList wager = new ElitePKWagersList(false);
                        wager.Deserialize(packet);
                        var epk = ElitePKTournament.Tournaments[wager.Group];
                        int count = epk.Matches.Values.Count(p => p.TotalWagers != 0);
                        wager = new ElitePKWagersList(true, count);
                        wager.TotalMatches = (uint)count;
                        int i = 0;
                        foreach (var match in epk.Matches.Values)
                            if (match.TotalWagers != 0)
                                wager.Append(match, i++);
                        client.Send(wager);
                        break;
                    }
                case 1130:
                    {
                        try
                        {
                            TitlePacket tpacket = new TitlePacket(false);
                            tpacket.Deserialize(packet);

                            switch (tpacket.Type)
                            {
                                case TitlePacket.Types.List:
                                    {
                                        tpacket.Title = client.Entity.MyTitle;
                                        if (client.Entity.Titles.Count > 0)
                                        {
                                            tpacket.Count = (Byte)client.Entity.Titles.Count();
                                            foreach (var title in client.Entity.Titles)
                                                tpacket.Add((Byte)title.Key);
                                        }
                                        client.Send(tpacket);
                                        break;
                                    }
                                case TitlePacket.Types.Switch:
                                    {
                                        if (client.Entity.Titles.Keys.Contains(tpacket.Title) || tpacket.Title == TitlePacket.Titles.None)
                                        {
                                            client.Entity.MyTitle = tpacket.Title;
                                            client.Send(tpacket);
                                            client.Entity.Teleport(client.Entity.MapID, client.Entity.X, client.Entity.Y);
                                        }
                                        break;
                                    }
                            }
                        }
                        catch (Exception x) { Console.WriteLine(x.ToString()); }
                        break;
                    }
                #endregion
                #region WarehousePassword (2261)
                case 2261:
                    {
                        WareHousePassword whp = new WareHousePassword(false);
                        whp.Deserialize(packet);
                        switch (whp.type)
                        {
                            case WareHousePassword.SendInformation:
                                {
                                    //client.WarehouseOpen 
                                    if (client.WarehousePW != 0)
                                    {
                                        if (client.WarehousePW == whp.OldPassword)
                                        {
                                            client.WarehouseOpen = true;
                                            client.WarehousePW = whp.NewPassword;
                                            whp = new WareHousePassword(true);
                                            whp.type = WareHousePassword.PasswordCorrect;
                                            whp.OldPassword = 0x0101;
                                            client.Send(whp);
                                            client.Send(new Conquer_Online_Server.Network.GamePackets.Message("Successfully modified! Please remember your secondary password", System.Drawing.Color.Red, 0x7d0));

                                        }
                                        else
                                        {
                                            whp = new WareHousePassword(true);
                                            whp.type = WareHousePassword.PasswordWrong;
                                            whp.OldPassword = 0x01;
                                            client.Send(whp);
                                        }
                                    }
                                    else
                                    {
                                        client.WarehouseOpen = true;
                                        client.WarehousePW = whp.NewPassword;
                                        whp = new WareHousePassword(true);
                                        whp.type = WareHousePassword.PasswordCorrect;
                                        whp.OldPassword = 0x0101;
                                        client.Send(whp);
                                        client.Send(new Conquer_Online_Server.Network.GamePackets.Message("Successfully set! Please remember your secondary password", System.Drawing.Color.Red, 0x7d0));
                                    }
                                    break;
                                }
                            case WareHousePassword.VerifiedPassword:
                                {
                                    if (client.WarehousePW != 0)
                                    {
                                        if (client.WarehousePW == whp.NewPassword)
                                        {
                                            client.WarehouseOpen = true;
                                            whp = new WareHousePassword(true);
                                            whp.type = WareHousePassword.PasswordCorrect;
                                            whp.OldPassword = 0x0101;
                                            client.Send(whp);
                                            client.Send(new Conquer_Online_Server.Network.GamePackets.Message("Password verified!", System.Drawing.Color.Red, 0x7d0));
                                        }
                                        else
                                        {
                                            whp = new WareHousePassword(true);
                                            whp.type = WareHousePassword.PasswordWrong;
                                            client.Send(whp);

                                        }
                                    }
                                    else
                                    {
                                        client.Disconnect();
                                    }
                                    break;
                                }
                            case WareHousePassword.Forget:
                                {
                                    if (client.WarehousePW != 0)
                                    {
                                        if (client.WarehousePW == whp.NewPassword)
                                        {
                                            client.WarehousePW = 0;
                                            client.Send(new Network.GamePackets.Message("Successfully Removed Your Passowrd!", System.Drawing.Color.Red, 0x7d0));
                                        }
                                        else
                                        {
                                            client.Send(new Network.GamePackets.Message("Enter Your password First To be able to Remove it!", System.Drawing.Color.Red, 0x7d0));
                                        }
                                    }
                                    break;
                                }
                            case WareHousePassword.SetNewPass:
                                {
                                    if (client.WarehousePW == 0)
                                    {
                                        client.WarehouseOpen = true;
                                        client.WarehousePW = whp.NewPassword;
                                        whp = new WareHousePassword(true);
                                        whp.type = WareHousePassword.PasswordCorrect;
                                        whp.OldPassword = 0x0101;
                                        client.Send(whp);
                                        client.Send(new Conquer_Online_Server.Network.GamePackets.Message("Successfully set! Please remember your secondary password", System.Drawing.Color.Red, 0x7d0));
                                    }
                                    break;
                                }
                            default:
                                {
                                    Program.WriteLine("Unknown 2261 packet type " + whp.type);
                                    break;
                                }
                        }
                        break;
                    }
                #endregion
                #region Way2Heroes
                case 2830:
                    {
                        byte type = packet[4];
                        switch (type)
                        {
                            case 0://show
                                {
                                    uint stage = BitConverter.ReadUint(packet, 5);
                                    MaTrix.Way2Heroes Way2Heroes = new MaTrix.Way2Heroes(stage);
                                    if (client.Way2Heroes.ContainsKey(stage))
                                        Way2Heroes.check(client.Way2Heroes[stage]);
                                    else
                                        client.Way2Heroes.Add(stage, new MaTrix.Way2Heroes.StageInfo() { UID = stage });
                                    client.Send(Way2Heroes);
                                    break;
                                }
                            case 1://claim sub prize
                                {
                                    uint uid = BitConverter.ReadUint(packet, 5);
                                    if (MaTrix.Way2Heroes.Stages.ContainsKey(uid))
                                    {
                                        uint stage = uid / 100;
                                        if (!client.Way2Heroes[stage].SubStages.ContainsKey(uid))
                                        {
                                            client.Way2Heroes[stage].SubStages.Add(uid, new MaTrix.Way2Heroes.SubStageInfo() { UID = uid, Done = true });
                                            var substage = MaTrix.Way2Heroes.Stages[uid];
                                            client.Inventory.Add(substage.Prize[0], 0, (byte)substage.Prize[1]);
                                            client.Send(packet);
                                        }
                                    }
                                    break;
                                }
                            case 2://claim main prize
                                {
                                    uint uid = BitConverter.ReadUint(packet, 5) * 100;
                                    if (MaTrix.Way2Heroes.Stages.ContainsKey(uid))
                                    {
                                        uint stage = uid / 100;
                                        client.Way2Heroes[stage].Done = true;
                                        var substage = MaTrix.Way2Heroes.Stages[uid];
                                        client.Inventory.Add(substage.Prize[0], (byte)substage.Prize[2], (byte)substage.Prize[1]);
                                        client.Send(packet);
                                    }
                                    break;
                                }
                            default:
                                PrintPacket(packet);
                                break;
                        }
                        break;
                    }
                #endregion
                #region Champion
                case 2600:
                    {
                        Game.Champion.Statistics.ShowRankingPage(packet[4], packet[5], client);
                        return;
                    }
                case 2601:
                    {
                        client.Send(client.ChampionStats);
                        break;
                    }
                case 2602:
                    {
                        Game.Champion.Statistics.ShowTop(client, 2602);
                        break;
                    }
                case 2603:
                    {
                        Game.Champion.Statistics.ShowTop(client, 2603);
                        break;
                    }
                case 2604:
                    {
                        Game.Champion.Handle(client, packet);
                        break;
                    }
                #endregion
                #region Achievement
                case 1136:
                    {
                        switch (packet[4])
                        {
                            case 1:
                                {
                                    Client.GameClient obj;
                                    if (Kernel.GamePool.TryGetValue(BitConverter.ToUInt32(packet, 8), out obj))
                                    {
                                        client.Send(obj.Entity.MyAchievement.ViewOpen());
                                    }
                                    break;
                                }
                            case 2:
                                {
                                    client.Entity.MyAchievement.CreateFlaID((int)BitConverter.ToUInt32(packet, 12));
                                    break;
                                }
                        }
                        break;
                    }
                #endregion
                #region CTF
                case 1063:
                    {
                        switch (packet[6])
                        {
                            case 1:
                                {
                                    client.Send(packet);
                                    client.Send(Program.World.CTF.generateCTFRanking());
                                    break;
                                }
                            case 3:
                                {
                                    client.Send(packet);
                                    uint m = BitConverter.ToUInt32(packet, 10);
                                    client.Send(CrossServer.generateRanking(m));
                                    break;
                                }
                        }
                        break;
                    }
                case 2224:
                    {
                        if (packet[4] == 2)
                            client.Send(Program.World.CTF.generateCTFRanking());
                        client.Send(packet);
                        break;


                    }
                #endregion
                #region   chiretreat   (2536)
                case 2536:
                    {
                        ChiRetreatRequest RetreatRequest = new ChiRetreatRequest(false);
                        RetreatRequest.Deserialize(packet);
                        switch (RetreatRequest.Type)
                        {
                            case ChiRetreatRequest.RetreatType.Info:
                                {
                                    if (client.Entity.RetreatChiPowers == null)
                                        return;
                                    var count = client.Entity.RetreatChiPowers.Count;
                                    byte[] bytes = new byte[8 + 8 + 21 * count];
                                    Writer.WriteUshort((ushort)(bytes.Length - 8), 0, bytes);
                                    Writer.WriteUshort(2537, 2, bytes);
                                    Writer.WriteInt32(count, 4, bytes);
                                    int Offset = 8;
                                    for (int i = 1; i < count + 1; i++)
                                    {
                                        uint secs = 0;
                                        bytes[Offset] = System.Convert.ToByte(client.Entity.RetreatChiPowers[i - 1].Power);

                                        secs = (uint)(client.Entity.RetreatChiPowers[i - 1].EndTime.Year % 100 * 100000000 +
                                                           (client.Entity.RetreatChiPowers[i - 1].EndTime.Month) * 1000000 +
                                                           client.Entity.RetreatChiPowers[i - 1].EndTime.Day * 10000 +
                                                           client.Entity.RetreatChiPowers[i - 1].EndTime.Hour * 100 +
                                                           client.Entity.RetreatChiPowers[i - 1].EndTime.Minute);

                                        Offset++;
                                        Writer.WriteUInt32(secs, Offset, bytes);
                                        Offset += 4;
                                        var powers = client.Entity.RetreatChiPowers[i - 1];
                                        var attributes = powers.Attributes;
                                        foreach (var attribute in attributes)
                                        {
                                            Writer.WriteInt32(attribute, Offset, bytes);
                                            Offset += 4;
                                        }
                                    }
                                    client.Send(bytes);
                                    break;

                                }
                            case ChiRetreatRequest.RetreatType.RequestRetreat:
                                {
                                    if (client.ChiPoints >= 4000)
                                    {
                                        var powers = new Game.ConquerStructures.ChiRetreatStructure();
                                        powers.Power = RetreatRequest.Mode;
                                        powers.Attributes[0].Type = client.ChiPowers[(int)RetreatRequest.Mode - 1].Attributes[0].Type;
                                        powers.Attributes[0].Value = client.ChiPowers[(int)RetreatRequest.Mode - 1].Attributes[0].Value;
                                        powers.Attributes[1].Type = client.ChiPowers[(int)RetreatRequest.Mode - 1].Attributes[1].Type;
                                        powers.Attributes[1].Value = client.ChiPowers[(int)RetreatRequest.Mode - 1].Attributes[1].Value;
                                        powers.Attributes[2].Type = client.ChiPowers[(int)RetreatRequest.Mode - 1].Attributes[2].Type;
                                        powers.Attributes[2].Value = client.ChiPowers[(int)RetreatRequest.Mode - 1].Attributes[2].Value;
                                        powers.Attributes[3].Type = client.ChiPowers[(int)RetreatRequest.Mode - 1].Attributes[3].Type;
                                        powers.Attributes[3].Value = client.ChiPowers[(int)RetreatRequest.Mode - 1].Attributes[3].Value;
                                        powers.EndTime = DateTime.Now;
                                        powers.EndTime = DateTime.Now.AddDays(5);
                                        client.Entity.RetreatChiPowers.Add(powers);
                                        RetreatRequest.Type = ChiRetreatRequest.RetreatType.Retreat;
                                        client.ChiPoints -= 4000;
                                        client.Send(RetreatRequest);

                                        Database.ChiRetreatTable.Save(client);
                                    }
                                    break;
                                }
                            case ChiRetreatRequest.RetreatType.RequestUpdate:
                                {

                                    foreach (var power in client.Entity.RetreatChiPowers)
                                    {
                                        if (power.Power == RetreatRequest.Mode)
                                        {
                                            power.Power = RetreatRequest.Mode;
                                            power.Attributes[0].Type = client.ChiPowers[(int)RetreatRequest.Mode - 1].Attributes[0].Type;
                                            power.Attributes[0].Value = client.ChiPowers[(int)RetreatRequest.Mode - 1].Attributes[0].Value;
                                            power.Attributes[1].Type = client.ChiPowers[(int)RetreatRequest.Mode - 1].Attributes[1].Type;
                                            power.Attributes[1].Value = client.ChiPowers[(int)RetreatRequest.Mode - 1].Attributes[1].Value;
                                            power.Attributes[2].Type = client.ChiPowers[(int)RetreatRequest.Mode - 1].Attributes[2].Type;
                                            power.Attributes[2].Value = client.ChiPowers[(int)RetreatRequest.Mode - 1].Attributes[2].Value;
                                            power.Attributes[3].Type = client.ChiPowers[(int)RetreatRequest.Mode - 1].Attributes[3].Type;
                                            power.Attributes[3].Value = client.ChiPowers[(int)RetreatRequest.Mode - 1].Attributes[3].Value;
                                        }
                                    }
                                    RetreatRequest.Type = ChiRetreatRequest.RetreatType.Update;
                                    client.Send(RetreatRequest);
                                    Database.ChiRetreatTable.Save(client);
                                    break;
                                }
                            case ChiRetreatRequest.RetreatType.RequestRestore:
                                {
                                    var powers = client.ChiPowers[(int)RetreatRequest.Mode - 1];
                                    foreach (var power in client.Entity.RetreatChiPowers)
                                    {
                                        if (power.Power == RetreatRequest.Mode)
                                        {

                                            powers.Attributes[0].Type = power.Attributes[0].Type;
                                            powers.Attributes[0].Value = power.Attributes[0].Value;
                                            powers.Attributes[1].Type = power.Attributes[1].Type;
                                            powers.Attributes[1].Value = power.Attributes[1].Value;
                                            powers.Attributes[2].Type = power.Attributes[2].Type;
                                            powers.Attributes[2].Value = power.Attributes[2].Value;
                                            powers.Attributes[3].Type = power.Attributes[3].Type;
                                            powers.Attributes[3].Value = power.Attributes[3].Value;
                                        }
                                    }


                                    powers.CalculatePoints();
                                    Database.ChiTable.Sort(RetreatRequest.Mode);
                                    powers.Power = RetreatRequest.Mode;
                                    client.Send(new ChiPowers(true).Query(client));
                                    #region update ranking
                                    Database.ChiTable.ChiData[] array = null;
                                    switch (RetreatRequest.Mode)
                                    {
                                        case Game.Enums.ChiPowerType.Dragon:
                                            array = Database.ChiTable.Dragon;
                                            break;

                                        case Game.Enums.ChiPowerType.Phoenix:
                                            array = Database.ChiTable.Phoenix;
                                            break;

                                        case Game.Enums.ChiPowerType.Tiger:
                                            array = Database.ChiTable.Tiger;
                                            break;

                                        case Game.Enums.ChiPowerType.Turtle:
                                            array = Database.ChiTable.Turtle;
                                            break;
                                    }
                                    foreach (var chiData in array)
                                    {
                                        if (Kernel.GamePool.ContainsKey(chiData.UID))
                                        {
                                            var pClient = Kernel.GamePool[chiData.UID];
                                            if (pClient == null) continue;
                                            if (pClient.ChiData == null) continue;
                                            SendRankingQuery(new GenericRanking(true) { Mode = GenericRanking.QueryCount }, pClient, GenericRanking.Chi + (uint)RetreatRequest.Mode, pClient.ChiData.SelectRank(RetreatRequest.Mode), pClient.ChiData.SelectPoints(RetreatRequest.Mode));
                                            if (pClient.Entity.UID == client.Entity.UID || pClient.ChiData.SelectRank(RetreatRequest.Mode) < 50)
                                                pClient.LoadItemStats();
                                        }
                                    }
                                    #endregion
                                    Database.ChiTable.Save(client);
                                    RetreatRequest.Type = ChiRetreatRequest.RetreatType.Restore;
                                    client.Send(RetreatRequest);
                                    break;
                                }
                            case ChiRetreatRequest.RetreatType.RequestExtend2:
                                {
                                    if (client.ChiPoints >= 4000)
                                    {
                                        foreach (var power in client.Entity.RetreatChiPowers)
                                        {
                                            if (power.Power == RetreatRequest.Mode)
                                            {
                                                if (DateTime.Now.AddDays(6) > power.EndTime)
                                                {
                                                    power.EndTime = power.EndTime.AddDays(5);
                                                    client.ChiPoints -= 4000;
                                                    RetreatRequest.Type = ChiRetreatRequest.RetreatType.Extend2;
                                                    client.Send(RetreatRequest);
                                                }
                                                else
                                                {
                                                    client.Entity.SendSysMesage("You can't extend retread time agine right now");
                                                }
                                            }
                                        }

                                    }
                                    Database.ChiRetreatTable.Save(client);
                                    break;
                                }
                            default: Console.WriteLine("Unkwon 2536 type :" + RetreatRequest.Type);
                                break;
                        }
                        break;
                    }
                #endregion
                #region vipteleport
                case 1128:
                    {
                        if (client.Entity.MapID == 601 || (client.Map.BaseID == 1038 && Game.GuildWar.IsWar)) return;
                        if (client.Map.BaseID == 6000 || client.Map.BaseID == 6001 || client.Map.BaseID == 1844 || client.Map.BaseID == 1801 || client.Map.BaseID == 8883 || client.Map.BaseID == 1005 && client.Entity.MapID != 1005 || client.Map.BaseID == 700)
                        {
                            client.Send(Constants.vipteleport);
                            return;
                        }
                        VIPTeleport tele = new VIPTeleport();
                        tele.Deserialize(packet);
                        switch (tele.TeleportType)
                        {
                            case VIPTeleportTypes.SelfTeleport:
                                {
                                    if (Time32.Now > client.LastVIPTeleport.AddMinutes(3))
                                    {
                                        client.LastVIPTeleport = Time32.Now;
                                        Teleport(client, tele.Location);
                                    }
                                    else
                                        client.Send(new Message(string.Format("You have to wait {0} more seconds to use the VIP Teleport.", (client.LastVIPTeleport.AddMinutes(3) - Time32.Now).AllSeconds()), Color.Red, Message.Talk));
                                    break;
                                }
                            case VIPTeleportTypes.TeamTeleport:
                                {
                                    if (Time32.Now > client.LastVIPTeamTeleport.AddMinutes(5))
                                    {
                                        client.LastVIPTeamTeleport = Time32.Now;
                                        if (client.Team != null)
                                        {
                                            foreach (var teammate in client.Team.Teammates)
                                            {
                                                if (teammate.Entity.UID != client.Entity.UID)
                                                {
                                                    teammate.Send(new VIPTeleport()
                                                    {
                                                        Countdown = 10,
                                                        Location = tele.Location,
                                                        Name = client.Entity.Name,
                                                        TeleportType = VIPTeleportTypes.TeammateConfirmation
                                                    }.ToArray());
                                                }
                                            }
                                        }
                                        Teleport(client, tele.Location);
                                    }
                                    else
                                        client.Send(new Message(string.Format("You have to wait {0} more seconds to use the VIP Team Teleport.", (client.LastVIPTeamTeleport.AddMinutes(5) - Time32.Now).AllSeconds()), Color.Red, Message.Talk));
                                    break;
                                }
                            case VIPTeleportTypes.TeammateTeleport:
                                {
                                    Teleport(client, tele.Location);
                                    break;
                                }
                        }
                        break;
                    }
                #endregion
                #region MentorApprentice (2065)
                case 2065:
                    {
                        MentorApprentice ma = new MentorApprentice(false);
                        ma.Deserialize(packet);
                        switch (ma.Type)
                        {
                            case MentorApprentice.LeaveMentor:
                                {
                                    LeaveMentor(ma, client);
                                    break;
                                }
                            case MentorApprentice.ExpellApprentice:
                                {
                                    ExpelApprentice(ma, client);
                                    break;
                                }
                            case MentorApprentice.RequestApprentice:
                                {
                                    AddApprentice(ma, client);
                                    break;
                                }
                            case MentorApprentice.RequestMentor:
                                {
                                    AddMentor(ma, client);
                                    break;
                                }
                            case MentorApprentice.AcceptRequestApprentice:
                                {
                                    AcceptRequestApprentice(ma, client);
                                    break;
                                }
                            case MentorApprentice.AcceptRequestMentor:
                                {
                                    AcceptRequestMentor(ma, client);
                                    break;
                                }
                        }
                        break;
                    }
                case 2066:
                    {
                        MentorInformation info = new MentorInformation(false);
                        info.Deserialize(packet);
                        if (info.Mentor_Type == 1)
                        {
                            client.ReviewMentor();
                        }
                        break;
                    }
                #endregion
                #region Guild members (2102)
                case 2102:
                    {
                        ushort Page = BitConverter.ToUInt16(packet, 8);
                        if (client.Guild != null)
                        {
                            if (client.AsMember != null)
                                client.Guild.SendMembers(client, Page);
                        }
                        break;
                    }
                #endregion
                #region Arena (2207<->2211)
                case 2207://Request Arena ranking List
                    {
                        //Code snippet that belongs to Ultimation
                        ushort PageIndex = BitConverter.ToUInt16(packet, 6);
                        Game.Arena.Statistics.ShowRankingPage(packet[4], PageIndex, client);
                        break;
                    }
                case 2206:
                    {
                        //Code snippet that belongs to Ultimation
                        ushort PageIndex = BitConverter.ToUInt16(packet, 4);
                        Game.Arena.QualifyEngine.RequestGroupList(client, PageIndex);
                        break;
                    }
                case 2205://Arena Signup!
                    {
                        //Code snippet that belongs to Ultimation
                        uint DialogID = BitConverter.ToUInt32(packet, 4);
                        uint ButtonID = BitConverter.ToUInt32(packet, 8);
                        switch (DialogID)
                        {
                            case 4:
                                {
                                    switch (ButtonID)
                                    {
                                        case 0:
                                            {
                                                Game.Arena.QualifyEngine.DoQuit(client);
                                                break;
                                            }
                                    }
                                    break;
                                }
                            case 0: Game.Arena.QualifyEngine.DoSignup(client); client.Send(packet); break;
                            case 1: Game.Arena.QualifyEngine.DoQuit(client); client.Send(packet); break;
                            case 3:
                                {
                                    switch (ButtonID)
                                    {
                                        case 2: Game.Arena.QualifyEngine.DoGiveUp(client); break;
                                        case 1: Game.Arena.QualifyEngine.DoAccept(client); break;
                                    }
                                    break;
                                }
                            case 5:
                                {
                                    if (client.ArenaPoints <= 1500)
                                        if (client.Entity.Money >= 9000000)
                                        {
                                            client.Entity.Money -= 9000000;
                                            client.ArenaPoints += 1500;
                                            client.Send(client.ArenaStatistic);
                                        }
                                    break;
                                }
                            case 11://Win/Lose Dialog
                                {
                                    switch (ButtonID)
                                    {
                                        case 0: Game.Arena.QualifyEngine.DoSignup(client); break;
                                    }
                                    break;
                                }

                        }
                        break;
                    }
                case 2208://Request Arena Winner List
                    {
                        //Code snippet that belongs to Ultimation
                        Game.Arena.Statistics.ShowWiners(client);
                        break;
                    }
                case 2209:
                    {
                        client.ArenaStatistic.Send(client);
                        break;
                    }
                case 2211:
                    {
                        if (client.Entity.MapID == 601) return;
                        if (client.Map.BaseID >= 6000 && client.Map.BaseID <= 6003) return;
                        ushort Type = BitConverter.ToUInt16(packet, 4);
                        uint Fighter = BitConverter.ToUInt32(packet, 10);
                        if (Type == 0)
                        {
                            if (!Constants.PKFreeMaps.Contains(client.Entity.MapID))
                            {
                                if (Kernel.GamePool.ContainsKey(Fighter))
                                {
                                    Client.GameClient Client = Kernel.GamePool[Fighter];
                                    if (Client.ElitePKMatch != null)
                                    {
                                        if (Client.ElitePKMatch.OnGoing)
                                        {
                                            Client.ElitePKMatch.BeginWatch(client);
                                        }
                                    }
                                    else if (Client.InQualifier())
                                    {
                                        if (Client.QualifierGroup != null)
                                        {
                                            if (!Client.QualifierGroup.Done)
                                            {
                                                Client.QualifierGroup.BeginWatching(client);
                                            }
                                        }
                                        else if (Client.TeamQualifierGroup != null)
                                        {
                                            if (!Client.TeamQualifierGroup.Done)
                                            {
                                                Client.TeamQualifierGroup.BeginWatching(client);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        else if (Type == 1)
                        {
                            if (client.WatchingElitePKMatch != null)
                                client.WatchingElitePKMatch.LeaveWatch(client);
                            else if (client.WatchingGroup != null)
                                Game.Arena.QualifyEngine.DoLeave(client);
                            else
                                if (client.TeamWatchingGroup != null)
                                    Game.TeamArena.QualifyEngine.DoLeave(client);
                        }
                        else if (Type == 4)
                        {
                            uint fighter = BitConverter.ToUInt32(packet, 10);
                            if (client.WatchingElitePKMatch != null)
                                client.WatchingElitePKMatch.Cheer(client, fighter);
                            else if (client.WatchingGroup != null)
                                Game.Arena.QualifyEngine.DoCheer(client, fighter);
                            else
                                if (client.TeamWatchingGroup != null)
                                    Game.TeamArena.QualifyEngine.DoCheer(client, fighter);
                        }
                        break;
                    }
                #endregion
                #region TeamArena (2243<->2247)
                case 2243://Request Arena ranking List
                    {
                        //Code snippet that belongs to Ultimation
                        ushort PageIndex = BitConverter.ToUInt16(packet, 6);
                        Game.TeamArena.Statistics.ShowRankingPage(packet[4], PageIndex, client);
                        break;
                    }
                case 2242:
                    {
                        //Code snippet that belongs to Ultimation
                        ushort PageIndex = BitConverter.ToUInt16(packet, 4);
                        Game.TeamArena.QualifyEngine.RequestGroupList(client, PageIndex);
                        break;
                    }
                case 2241://Arena Signup!
                    {
                        //Code snippet that belongs to Ultimation
                        uint DialogID = BitConverter.ToUInt32(packet, 4);
                        uint ButtonID = BitConverter.ToUInt32(packet, 8);
                        switch (DialogID)
                        {
                            case 4:
                                {
                                    switch (ButtonID)
                                    {
                                        case 0:
                                            {
                                                Game.TeamArena.QualifyEngine.DoQuit(client);
                                                break;
                                            }
                                    }
                                    break;
                                }
                            case 0: Game.TeamArena.QualifyEngine.DoSignup(client); client.Send(packet); break;
                            case 1: Game.TeamArena.QualifyEngine.DoQuit(client); client.Send(packet); break;
                            case 3:
                                {
                                    switch (ButtonID)
                                    {
                                        case 2: Game.TeamArena.QualifyEngine.DoGiveUp(client); break;
                                        case 1: Game.TeamArena.QualifyEngine.DoAccept(client); break;
                                    }
                                    break;
                                }
                            case 5:
                                {
                                    if (client.ArenaPoints <= 1500)
                                    {
                                        if (client.Entity.Money >= 9000000)
                                        {
                                            client.Entity.Money -= 9000000;
                                            client.ArenaPoints += 1500;
                                            client.Send(client.TeamArenaStatistic);
                                        }
                                    }
                                    break;
                                }
                            case 11://Win/Lose Dialog
                                {
                                    switch (ButtonID)
                                    {
                                        case 0: Game.TeamArena.QualifyEngine.DoSignup(client); break;
                                    }
                                    break;
                                }

                        }
                        break;
                    }
                case 2244://Request Arena Winner List
                    {
                        //Code snippet that belongs to Ultimation
                        Game.TeamArena.Statistics.ShowWiners(client);
                        break;
                    }
                case 2245:
                    {
                        client.TeamArenaStatistic.Send(client);
                        break;
                    }
                case 2247:
                    {
                        if (client.Entity.MapID == 601) return;
                        if (client.Map.BaseID >= 6000 && client.Map.BaseID <= 6003) return;
                        ushort Type = BitConverter.ToUInt16(packet, 4);
                        uint Fighter = BitConverter.ToUInt32(packet, 8);
                        if (Type == 0)
                        {
                            if (Kernel.GamePool.ContainsKey(Fighter))
                            {
                                Client.GameClient Client = Kernel.GamePool[Fighter];
                                if (Client.InTeamQualifier())
                                {
                                    Game.TeamArena.QualifierList.QualifierParticipants particiaptants = new Game.TeamArena.QualifierList.QualifierParticipants(Client, Game.TeamArena.QualifierList.QualifierParticipants.KindOfParticipants.Neutral);
                                    client.Send(particiaptants.Build(client.Entity.UID));
                                }
                            }
                        }
                        break;
                    }
                #endregion
                #region Movement/Walk (10005)
                case 10005:
                    {
                        if (client.Action != 2)
                            return;
                        GroundMovement groundMovement = new GroundMovement(false);
                        groundMovement.Deserialize(packet);
                        client.Entity.SpiritFocus = false;
                        client.LastMove = Time32.Now;
                        PlayerGroundMovment(groundMovement, client);

                        break;
                    }
                #endregion
                #region Reincarnation (1066)
                case 1066:
                    {
                        if (client.Entity.Reborn != 2) return;
                        if (Kernel.ReincarnatedCharacters.ContainsKey(client.Entity.UID))
                        {
                            if (client.Entity.Level > 110)
                            {
                                Database.ReincarnationTable.RemoveReincarnated(client.Entity);
                                Kernel.ReincarnatedCharacters.Remove(client.Entity.UID);
                            }
                            else
                            {
                                return;
                            }
                        }
                        byte NewClass = packet[8];
                        ushort NewBody = packet[12];
                        if (client.Entity.Body.ToString().EndsWith("1") || client.Entity.Body.ToString().EndsWith("2"))
                            NewBody += 2000;
                        else NewBody += 1000;

                        if (client.Inventory.Contains(711083, 1) && client.Entity.ConquerPoints >= Database.rates.Riencration)
                        {
                            client.Entity.Body = NewBody;
                            new PacketHandler.Reincarnation(client, NewClass);
                            client.Inventory.Remove(711083, 1);
                            client.Entity.ConquerPoints -= Database.rates.Riencration;
                            RemoveBadSkills(client);
                            Database.EntityTable.SaveEntity(client);
                        }
                        break;
                    }
                #endregion
                #region PurifyItem (2076)
                case 2076:
                    {
                        Purification ps = new Purification(false);
                        ps.Deserialize(packet);
                        switch (ps.Mode)
                        {
                            case Purification.Purify:
                                PurifyItem(ps, client); break;
                            case Purification.ItemArtifact:
                                PurifyRefinery(ps, client); break;
                            //case Purification.Stabilaze:
                            //new Game.Features.Refinery.Handle(packet, client); break;
                        }
                        break;
                    }
                #endregion
                #region Clans (1312)
                case 1312:
                    {
                        Clan clanp = new Clan();
                        clanp.Deserialize(packet);
                        GameClient target;
                        switch (clanp.Type)
                        {
                            case Clan.Types.Announce:
                                {
                                    Clan clan = client.Entity.GetClan;
                                    if (clan != null)
                                    {
                                        client.Send(new ClanAnnouncement(clan));
                                    }
                                    break;
                                }
                            case Clan.Types.Kick:
                                {
                                    var clan = client.Entity.GetClan;
                                    var kickedmem = Program.GamePool.SingleOrDefault(x => x.Entity.Name == clanp.Offset18String);
                                    if (kickedmem != null)
                                    {
                                        byte[] Packet = new byte[90];
                                        Writer.WriteUInt16(82, 0, Packet);
                                        Writer.WriteUInt16(1312, 2, Packet);
                                        Writer.WriteUInt32(22, 4, Packet);
                                        Writer.WriteUInt32(kickedmem.Entity.UID, 8, Packet);
                                        kickedmem.Send(Packet);

                                        kickedmem.Entity.ClanRank = Clan.Ranks.None;
                                        kickedmem.Entity.ClanName = "";
                                        kickedmem.Entity.ClanId = 0;
                                        kickedmem.SendScreenSpawn(kickedmem.Entity, true);
                                    }
                                    if (clan.Members.Remove(clan.Members.SingleOrDefault(x => x.Value.Name == clanp.Offset18String).Key))
                                    {
                                        clan.InfoToMembers();
                                        Database.EntityTable.RemoveClanMember(clanp.Offset18String);
                                        Kernel.SendWorldMessage(new Message(String.Format("{0} has kicked {1} form his Clan!", client.Entity.Name, clanp.Offset18String), Color.Red, Message.TopLeft));
                                    }
                                    break;
                                }
                            case Clan.Types.MyClan:
                                {
                                    Clan clan = client.Entity.GetClan;
                                    if (clan != null)
                                    {
                                        clan.Build(client, Clan.Types.MyClan);
                                        client.Send(clan);

                                        clan.Build(client, Clan.Types.Info);
                                        client.Send(clan);
                                    }
                                    break;
                                }
                            case Clan.Types.Members:
                                {
                                    Clan clan = client.Entity.GetClan;
                                    if (clan != null)
                                    {
                                        ClanMembers memclanp = new ClanMembers(clan);
                                        memclanp.Type = clanp.Type;
                                        client.Send(memclanp);
                                    }
                                    break;
                                }
                            case Clan.Types.Dedicate:
                                {
                                    Clan clan = client.Entity.GetClan;
                                    if (clan != null)
                                    {
                                        if (client.Entity.Money >= clanp.ID)
                                        {
                                            client.Entity.Money -= clanp.ID;
                                            clan.Fund += clanp.ID;

                                            ClanMember member;
                                            if (clan.Members.TryGetValue(client.Entity.UID, out member))
                                            {
                                                member.Donation += clanp.ID;
                                                client.Entity.Save("clandonation", member.Donation);
                                            }
                                            clan.Save(client, "fund", clan.Fund);

                                            clan.InfoToMembers();
                                        }
                                    }
                                    break;
                                }
                            #region CLAN [OLD]
                            /*
                            #region Clans (1312)
      case 1312:
          {
              switch (packet[4])
              {
                  case 14://Add enemy
                      {
                          if (client.Entity.Clan == null || client.Entity.ClanRank == 0) return;
                          if (client.Entity.Clan.Enemy.Count == 5) return;
                          string name = System.Text.Encoding.Default.GetString(packet, 18, packet[17]);
                          if (name == client.Entity.Clan.Name) return;
                          uint Key = 0;
                          foreach (var v in Kernel.Clans.Values)
                              if (v.Name == name)
                              { Key = v.ID; break; }
                          if (Key != 0)
                          {
                              var Clan = Kernel.Clans[Key];
                              if (client.Entity.Clan.Enemy.ContainsKey(Key)) return;
                              if (client.Entity.Clan.Ally.ContainsKey(Key)) return;
                              byte[] b = GamePackets.Clan.EnemyClan(Clan);
                              foreach (var m in client.Entity.Clan.Members)
                              {
                                  var pClient = Kernel.GamePool[m.Key];
                                  if (pClient != null)
                                  {
                                      pClient.Send(b);
                                  }
                              }
                              client.Entity.Clan.Enemy.Add(Key, Clan);
                              Database.ClanTable.AddEnemy(client.Entity.Clan.ID, Clan.ID);
                          }
                          break;
                      }
                  case 15://Remove enemy
                      {
                          if (client.Entity.Clan == null || client.Entity.ClanRank == 0) return;
                          string name = System.Text.Encoding.Default.GetString(packet, 18, packet[17]);
                          uint Key = 0;
                          foreach (var v in client.Entity.Clan.Enemy.Values)
                              if (v.Name == name)
                              { Key = v.ID; break; }
                          if (Key != 0)
                          {
                              if (!client.Entity.Clan.Enemy.ContainsKey(Key)) return;
                              var Clan = client.Entity.Clan.Enemy[Key];
                              byte[] b = GamePackets.Clan.RemoveEnemyClan(Clan);
                              foreach (var m in client.Entity.Clan.Members)
                              {
                                  var pClient = Kernel.GamePool[m.Key];
                                  if (pClient != null)
                                  {
                                      pClient.Send(b);
                                  }
                              }
                              client.Entity.Clan.Enemy.Remove(Key);
                              Database.ClanTable.RemoveEnemy(client.Entity.Clan.ID, Clan.ID);
                          }
                          break;
                      }
                  case 17://Add ally
                      {
                          if (client.Entity.Clan == null) return;
                          if (client.Entity.Clan.Ally.Count == 5) return;
                          uint Key = SafeBitConverter.ToUInt32(packet, 8);
                          if (Key == client.Entity.UID) return;
                          var leader = Kernel.GamePool[Key];
                          if (leader == null) return;
                          if (leader.Entity.Clan == null) return;
                          if (leader.Entity.ClanRank == 0) return;
                          if (client.Entity.Clan == null || client.Entity.ClanRank == 0) return;

                          if (!leader.RequestsOn)
                          {
                              client.Send(new Message(leader.Entity.Name + " has requests off at the moment!", System.Drawing.Color.Black, Message.Talk));
                              return;
                          }
                          Writer.WriteStringList(new List<string>() { client.Entity.Clan.Name, client.Entity.Clan.Leader }, 16, packet);
                          leader.Send(packet);
                          break;
                      }
                  case 18:
                      {
                          string name = System.Text.Encoding.Default.GetString(packet, 18, packet[17]);
                          uint Key = 0;

                          foreach (var mem in Program.Values)
                              if (mem.Entity.Name == name)
                                  Key = mem.Entity.UID;
                          if (Key != 0)
                          {
                              var leader = Kernel.GamePool[Key];
                              if (leader.Entity.ClanRank != 100) return;
                              if (leader.Entity.Clan == null) return;
                              if (client.Entity.ClanRank != 100) return;
                              if (client.Entity.Clan == null) return;

                              var Clan = leader.Entity.Clan;
                              var Clan2 = client.Entity.Clan;
                              if (packet[8] == 1)
                              {
                                  if (client.Entity.Clan.Ally.ContainsKey(Clan.ID)) return;
                                  if (leader.Entity.Clan.Ally.ContainsKey(Clan2.ID)) return;
                                  if (client.Entity.Clan.Enemy.ContainsKey(Clan.ID)) return;
                                  if (leader.Entity.Clan.Enemy.ContainsKey(Clan2.ID)) return;
                                  byte[] b = GamePackets.Clan.AllyClan(Clan);
                                  foreach (var m in client.Entity.Clan.Members)
                                  {
                                      var pClient = Kernel.GamePool[m.Key];
                                      if (pClient != null)
                                      {
                                          pClient.Send(b);
                                      }
                                  }
                                  b = GamePackets.Clan.AllyClan(Clan2);
                                  foreach (var m in leader.Entity.Clan.Members)
                                  {
                                      var pClient = Kernel.GamePool[m.Key];
                                      if (pClient != null)
                                      {
                                          pClient.Send(b);
                                      }
                                  }
                                  client.Entity.Clan.Ally.Add(Clan.ID, Clan);
                                  leader.Entity.Clan.Ally.Add(Clan2.ID, Clan2);

                                  Database.ClanTable.AddAlly(Clan.ID, Clan2.ID);
                                  Database.ClanTable.AddAlly(Clan2.ID, Clan.ID);
                              }
                          }
                          break;
                      }
                  case 20:
                      {
                          string name = System.Text.Encoding.Default.GetString(packet, 18, packet[17]);
                          if (client.Entity.Clan == null || client.Entity.ClanRank == 0) return;
                          if (name == client.Entity.Clan.Name) return;
                          uint Key = 0;
                          foreach (var v in Kernel.Clans.Values)
                              if (v.Name == name)
                              { Key = v.ID; break; }
                          if (Key != 0)
                          {
                              var Clan = Kernel.Clans[Key];
                              if (!client.Entity.Clan.Ally.ContainsKey(Key)) return;
                              byte[] b = GamePackets.Clan.RemoveAllyClan(Clan);
                              foreach (var m in client.Entity.Clan.Members)
                              {
                                  var pClient = Kernel.GamePool[m.Key];
                                  if (pClient != null)
                                  {
                                      pClient.Send(b);
                                  }
                              }
                              b = GamePackets.Clan.RemoveAllyClan(client.Entity.Clan);
                              foreach (var m in Clan.Members)
                              {
                                  var pClient = Kernel.GamePool[m.Key];
                                  if (pClient != null)
                                  {
                                      pClient.Send(b);
                                  }
                              }
                              Clan.Ally.Remove(client.Entity.Clan.ID);
                              client.Entity.Clan.Ally.Remove(Key);
                              Database.ClanTable.RemoveAlly(client.Entity.Clan.ID, Clan.ID);
                              Database.ClanTable.RemoveAlly(Clan.ID, client.Entity.Clan.ID);
                          }
                          break;
                      }
                  case 23://client exit
                      {
                          if (client.Entity.Clan != null)
                          {
                              for (int c = 0; c < Program.Values.Length; c++)
                              {
                                  if (c >= Program.Values.Length)
                                      break;
                                  if (Program.Values[c] != null)
                                  {
                                      if (Program.Values[c].Entity != null)
                                      {
                                          if (Program.Values[c].Entity.Clan != null)
                                          {
                                              if (Program.Values[c].Entity.Clan.ID == client.Entity.Clan.ID)
                                              {
                                                  if (Program.Values[c].Entity.Clan.Members.ContainsKey(client.Entity.UID))
                                                      Program.Values[c].Entity.Clan.Members.Remove(client.Entity.UID);
                                              }
                                          }
                                      }
                                  }
                              }
                              client.Entity.ClanName = "";
                              client.Entity.ClanUID = 0;
                              client.Entity.ClanRank = 0;
                              client.Entity.Clan = null;
                              client.Screen.SendSpawn(client.Entity, false);
                              Database.ClanTable.KickClan(client.Entity.Name);
                              client.Send(packet);
                          }
                          break;
                      }
                  case 22://give kick
                      {
                          if (client.Entity.Clan != null)
                          {
                              if (client.Entity.ClanRank == 100)
                              {
                                  string name = System.Text.Encoding.Default.GetString(packet, 18, packet[17]);
                                  uint Key = 0;


                                  foreach (Game.ConquerStructures.Society.Clan.Member mem in client.Entity.Clan.Members.Values)
                                  {
                                      if (mem.Name == name)
                                          Key = mem.UID;
                                  }
                                  if (Key != 0)
                                  {
                                      client.Entity.Clan.Members.Remove(Key);
                                      foreach (var gClient in Program.Values)
                                      {
                                          if (gClient.Entity.ClanUID == client.Entity.ClanUID)
                                          {
                                              ClanMembers clan = new ClanMembers(client);
                                              gClient.Send(clan.ToArray());
                                          }
                                      }
                                  }
                                  var member = Kernel.GamePool[Key];
                                  if (member != null)
                                  {
                                      member.Entity.ClanUID = 0;
                                      member.Entity.ClanRank = 0;
                                      member.Entity.ClanName = "";
                                      member.Screen.SendSpawn(member.Entity, false);
                                      member.Entity.Clan = null;
                                      member.Send(packet);
                                  }
                                  Database.ClanTable.KickClan(name);
                              }
                          }
                          break;
                      }
                  case 26:
                      {
                          uint money = SafeBitConverter.ToUInt32(packet, 8);
                          if (client.Entity.Money >= money && client.Entity.Clan != null)
                          {
                              client.Entity.Clan.Members[client.Entity.UID].Donation += money;
                              client.Entity.Money -= money;
                              Conquer_Online_Server.Kernel.Clans[client.Entity.Clan.ID].Donation += money;


                              for (int c = 0; c < Program.Values.Length; c++)
                              {
                                  //For a multi threaded application, while we go through the collection
                                  //the collection might change. We will make sure that we wont go off  
                                  //the limits with a check.
                                  if (c >= Program.Values.Length)
                                      break;
                                  if (Program.Values[c] != null)
                                  {
                                      if (Program.Values[c].Entity != null)
                                      {
                                          if (Program.Values[c].Entity.Clan != null)
                                          {
                                              if (Program.Values[c].Entity.Clan.ID == client.Entity.Clan.ID)
                                              {
                                                  Program.Values[c].Entity.Clan.Donation = Conquer_Online_Server.Kernel.Clans[Program.Values[c].Entity.Clan.ID].Donation;
                                              }
                                          }
                                      }
                                  }
                              }
                              Network.GamePackets.Clan cl = new Conquer_Online_Server.Network.GamePackets.Clan(client, 1);
                              client.Send(cl.ToArray());
                              Database.ClanTable.SaveClientDonation(client);
                              Database.ClanTable.SaveClan(Conquer_Online_Server.Kernel.Clans[client.Entity.Clan.ID]);
                          }
                          break;
                      }
                  case 11://add player
                      {
                          uint lider = SafeBitConverter.ToUInt32(packet, 8);
                          if (Kernel.GamePool.ContainsKey(lider))
                          {
                              packet[4] = 11;
                              Writer.WriteUInt32(client.Entity.UID, 8, packet);

                              packet[16] = 1;
                              packet[17] = (byte)client.Entity.Name.Length;
                              for (int i = 0; i < client.Entity.Name.Length; i++)
                              {
                                  try
                                  {
                                      packet[18 + i] = Convert.ToByte(client.Entity.Name[i]);

                                  }
                                  catch { }
                              }
                              if (!Kernel.GamePool[lider].RequestsOn)
                              {
                                  client.Send(new Message(Kernel.GamePool[lider].Entity.Name + " has requests off at the moment!", System.Drawing.Color.Black, Message.Talk));
                                  return;
                              }
                              SendRequestInfo(Kernel.GamePool[lider], client);
                              Kernel.GamePool[lider].Send(packet);
                          }
                          break;
                      }
                  case 9://add player
                      {
                          uint lider = SafeBitConverter.ToUInt32(packet, 8);

                          if (!Kernel.GamePool[lider].RequestsOn)
                          {
                              client.Send(new Message(Kernel.GamePool[lider].Entity.Name + " has requests off at the moment!", System.Drawing.Color.Black, Message.Talk));
                              return;
                          }
                          SendRequestInfo(Kernel.GamePool[lider], client);
                          byte[] pack = new byte[89 + client.Entity.ClanName.Length + client.Entity.Name.Length];
                          Writer.WriteUInt16((ushort)(81 + client.Entity.Name.Length + client.Entity.ClanName.Length), 0, pack);
                          Writer.WriteUInt16(1312, 2, pack);
                          pack[4] = 9;

                          Writer.WriteUInt32(client.Entity.UID, 8, pack);
                          Writer.WriteStringList(new List<string>()
                          {
                              client.Entity.ClanName, 
                              client.Entity.Name
                          }, 16, pack);
                          Kernel.GamePool[lider].Send(pack);
                          break;
                      }

                  case 10://add player
                      {
                          uint lider = SafeBitConverter.ToUInt32(packet, 8);
                          var Client = Kernel.GamePool[lider];

                          if (!Client.RequestsOn)
                          {
                              client.Send(new Message(Client.Entity.Name + " has requests off at the moment!", System.Drawing.Color.Black, Message.Talk));
                              return;
                          }
                          if (Client == null) return;
                          if (packet[16] == 1)
                          {
                              if (Client.Entity.Clan.Members[Client.Entity.UID].Rank == 100)
                              {
                                  if (Client.Entity.Clan != null)
                                  {
                                      if (Client.Entity.Clan.Members.Count < 12)
                                      {
                                          uint memeber = client.Entity.UID;
                                          if (Kernel.GamePool.ContainsKey(memeber))
                                          {
                                              Game.ConquerStructures.Society.Clan.Member member = new Conquer_Online_Server.Game.ConquerStructures.Society.Clan.Member();
                                              member.UID = Kernel.GamePool[memeber].Entity.UID;
                                              member.Donation = 0;
                                              member.Rank = 10;
                                              member.Class = Kernel.GamePool[memeber].Entity.Class;
                                              member.Level = Kernel.GamePool[memeber].Entity.Level;
                                              member.Name = Kernel.GamePool[memeber].Entity.Name;
                                              if (!Client.Entity.Clan.Members.ContainsKey(memeber))
                                                  Client.Entity.Clan.Members.Add(member.UID, member);


                                              for (int c = 0; c < Program.Values.Length; c++)
                                              {
                                                  //For a multi threaded application, while we go through the collection
                                                  //the collection might change. We will make sure that we wont go off  
                                                  //the limits with a check.
                                                  if (c >= Program.Values.Length)
                                                      break;
                                                  if (Program.Values[c] != null)
                                                  {
                                                      if (Program.Values[c].Entity != null)
                                                      {
                                                          if (Program.Values[c].Entity.Clan != null)
                                                          {
                                                              if (Program.Values[c].Entity.Clan.ID == Client.Entity.Clan.ID)
                                                              {
                                                                  if (!Program.Values[c].Entity.Clan.Members.ContainsKey(memeber))
                                                                      Program.Values[c].Entity.Clan.Members.Add(member.UID, member);
                                                              }
                                                          }
                                                      }
                                                  }
                                              }
                                              var Member = Kernel.GamePool[memeber];
                                              Member.Entity.ClanMember = member;
                                              Member.Entity.ClanRank = 0;
                                              Member.Entity.Clan = Client.Entity.Clan;
                                              Member.Entity.ClanName = Client.Entity.ClanName;
                                              Member.Entity.ClanUID = Client.Entity.Clan.ID;
                                              Database.ClanTable.JoinClan(Member);
                                              Member.Entity.Teleport(Member.Entity.MapID, Member.Entity.X, Member.Entity.Y);
                                          }
                                      }
                                  }
                              }
                          }
                          break;
                      }
                  case 12:
                      {
                          if (packet[16] == 1)
                          {
                              if (client.Entity.Clan.Members[client.Entity.UID].Rank == 100)
                              {
                                  if (client.Entity.Clan != null)
                                  {
                                      if (client.Entity.Clan.Members.Count < 12)
                                      {
                                          uint memeber = SafeBitConverter.ToUInt32(packet, 8);
                                          if (Kernel.GamePool.ContainsKey(memeber))
                                          {
                                              Game.ConquerStructures.Society.Clan.Member member = new Conquer_Online_Server.Game.ConquerStructures.Society.Clan.Member();
                                              member.UID = Kernel.GamePool[memeber].Entity.UID;
                                              member.Donation = 0;
                                              member.Rank = 10;
                                              member.Class = Kernel.GamePool[memeber].Entity.Class;
                                              member.Level = Kernel.GamePool[memeber].Entity.Level;
                                              member.Name = Kernel.GamePool[memeber].Entity.Name;
                                              if (!client.Entity.Clan.Members.ContainsKey(memeber))
                                                  client.Entity.Clan.Members.Add(member.UID, member);


                                              for (int c = 0; c < Program.Values.Length; c++)
                                              {
                                                  //For a multi threaded application, while we go through the collection
                                                  //the collection might change. We will make sure that we wont go off  
                                                  //the limits with a check.
                                                  if (c >= Program.Values.Length)
                                                      break;
                                                  if (Program.Values[c] != null)
                                                  {
                                                      if (Program.Values[c].Entity != null)
                                                      {
                                                          if (Program.Values[c].Entity.Clan != null)
                                                          {
                                                              if (Program.Values[c].Entity.Clan.ID == client.Entity.Clan.ID)
                                                              {
                                                                  if (!Program.Values[c].Entity.Clan.Members.ContainsKey(memeber))
                                                                      Program.Values[c].Entity.Clan.Members.Add(member.UID, member);
                                                              }
                                                          }
                                                      }
                                                  }
                                              }
                                              var Member = Kernel.GamePool[memeber];
                                              Member.Entity.ClanMember = member;
                                              Member.Entity.ClanRank = 0;
                                              Member.Entity.Clan = client.Entity.Clan;
                                              Member.Entity.ClanName = client.Entity.ClanName;
                                              Member.Entity.ClanUID = client.Entity.Clan.ID;
                                              Database.ClanTable.JoinClan(Member);
                                              Member.Entity.Teleport(Member.Entity.MapID, Member.Entity.X, Member.Entity.Y);
                                          }
                                      }
                                  }
                              }
                          }
                          break;
                      }
                  case 21:
                      {
                          string name = System.Text.Encoding.Default.GetString(packet, 18, packet[17]);
                          uint Key = 0;


                          foreach (Game.ConquerStructures.Society.Clan.Member mem in client.Entity.Clan.Members.Values)
                          {
                              if (mem.Name == name)
                                  Key = mem.UID;
                          }
                          if (client.Entity.ClanRank == 100 && Key != 0)
                          {
                              client.Entity.ClanRank = 0;
                              client.Entity.ClanMember.Rank = 0;
                              var Client = Kernel.GamePool[Key];
                              Client.Entity.ClanRank = 100;
                              Client.Entity.ClanMember.Rank = 100;

                              client.Entity.Clan.Leader = Client.Entity.Name;

                              Network.GamePackets.Clan cl = new Conquer_Online_Server.Network.GamePackets.Clan(client, 1);
                              client.Send(cl.ToArray());
                              cl = new Conquer_Online_Server.Network.GamePackets.Clan(Client, 1);
                              Client.Send(cl.ToArray());
                              client.Screen.SendSpawn(client.Entity, false);
                              Client.Screen.SendSpawn(Client.Entity, false);

                              ClanMembers clan = new ClanMembers(client);
                              client.Send(clan.ToArray());
                              Client.Send(clan.ToArray());

                              Database.ClanTable.SaveClan(client.Entity.Clan);
                          }
                          break;
                      }
                  case 4://memebers
                      {
                          ClanMembers clan = new ClanMembers(client);
                          client.Send(clan.ToArray());
                          break;
                      }
                  case 0x1d:
                      {
                          if (client.Entity.Clan != null)
                          {
                              Writer.WriteUInt32(client.Entity.Clan.ID, 8, packet);
                              Writer.WriteByte(1, 16, packet);
                              Writer.WriteByte(0x0d, 17, packet);
                              Writer.WriteString("0 0 0 0 0 0 0", 18, packet);
                              client.Send(packet);
                              Network.GamePackets.Clan cl = new Conquer_Online_Server.Network.GamePackets.Clan(client, 1);
                              client.Send(cl.ToArray());
                          }
                          else
                              packet[4] = 23;
                          client.Send(packet);
                          if (client.Entity.Clan != null)
                          {
                              string rBulletin = client.Entity.Clan.Bulletin + ".\n Current WarZone: " + Program.CurrentClanWarX.MapName;
                              byte[] pack = new byte[89 + rBulletin.Length];
                              Writer.WriteUInt16((ushort)(81 + rBulletin.Length), 0, pack);
                              Writer.WriteUInt16(1312, 2, pack);
                              pack[4] = 25;
                              pack[16] = 1;
                              pack[17] = (byte)rBulletin.Length;
                              for (int i = 18; i < 18 + rBulletin.Length; i++)
                                  pack[i] = (byte)rBulletin[i - 18];
                              client.Send(pack);
                          }
                          break;
                      }
                  case 25:
                      {
                          string newBulletin = "";
                          for (int i = 18; i < packet[17] + 18; i++)
                              newBulletin += (char)packet[i];

                          client.Entity.Clan.Bulletin = newBulletin;
                          Database.ClanTable.SaveClan(client.Entity.Clan);
                          client.Send(packet);
                          break;
                      }
                  case 0x18:
                      {
                          client.Send(packet);
                          break;
                      }
                  default:
                      Console.WriteLine("Clan Type " + packet[4]);
                      break;

              }
              break;
          }
      #endregion
                           */
                            /*
                        case GuildCommand.JoinRequest:
                            {
                                if (Kernel.GamePool.ContainsKey(command.dwParam))
                                {
                                    var Client = Kernel.GamePool[command.dwParam];
                                    if (Client.OnHoldGuildJoin == client.OnHoldGuildJoin && Client.OnHoldGuildJoin != 0)
                                    {
                                        if (Client.Guild != null)
                                        {
                                            if (Client.AsMember.Rank != Conquer_Online_Server.Game.Enums.GuildMemberRank.Member)
                                            {
                                                Client.Guild.AddMember(client);
                                                Client.OnHoldGuildJoin = 0;
                                                client.OnHoldGuildJoin = 0;
                                            }
                                        }
                                        else
                                        {
                                            if (client.AsMember.Rank != Conquer_Online_Server.Game.Enums.GuildMemberRank.Member)
                                            {
                                                client.Guild.AddMember(Client);
                                                Client.OnHoldGuildJoin = 0;
                                                client.OnHoldGuildJoin = 0;
                                            }
                                        }
                                        return;
                                    }
                                    if (client.Guild == null)
                                    {
                                        command.dwParam = client.Entity.UID;
                                        Client.Send(command);
                                        Client.OnHoldGuildJoin = (uint)new Random().Next();
                                        client.OnHoldGuildJoin = Client.OnHoldGuildJoin;
                                    }
                                }
                                break;
                            }
                             */
                            #endregion
                            case (Clan.Types)11://add player
                                {
                                    uint lider = BitConverter.ToUInt32(packet, 8);
                                    if (Kernel.GamePool.ContainsKey(lider))
                                    {
                                        packet[4] = 11;
                                        Writer.WriteUInt32(client.Entity.UID, 8, packet);

                                        packet[16] = 1;
                                        packet[17] = (byte)client.Entity.Name.Length;
                                        for (int i = 0; i < client.Entity.Name.Length; i++)
                                        {
                                            try
                                            {
                                                packet[18 + i] = Convert.ToByte(client.Entity.Name[i]);

                                            }
                                            catch { }
                                        }
                                        Kernel.GamePool[lider].Send(packet);
                                    }
                                    break;
                                }
                            case (Clan.Types)9://add player
                                {
                                    uint lider = BitConverter.ToUInt32(packet, 8);

                                    byte[] pack = new byte[89 + client.Entity.ClanName.Length + client.Entity.Name.Length];
                                    Writer.WriteUInt16((ushort)(81 + client.Entity.Name.Length + client.Entity.ClanName.Length), 0, pack);
                                    Writer.WriteUInt16(1312, 2, pack);
                                    pack[4] = 9;

                                    Writer.WriteUInt32(client.Entity.UID, 8, pack);
                                    Writer.WriteStringList(new List<string>()
                                    {
                                        client.Entity.ClanName, 
                                        client.Entity.Name
                                    }, 16, pack);
                                    Kernel.GamePool[lider].Send(pack);
                                    break;
                                }

                            case (Clan.Types)10://add player
                                {
                                    uint lider = BitConverter.ToUInt32(packet, 8);
                                    var Client = Kernel.GamePool[lider];

                                    if (Client == null) break;
                                    if (packet[16] == 1)
                                    {
                                        Clan clientClan = Client.Entity.GetClan;
                                        if (Client.Entity.ClanRank == Clan.Ranks.ClanLeader)
                                        {
                                            if (clientClan != null)
                                            {
                                                if (clientClan.Members.Count < 12)
                                                {
                                                    clientClan.Join(client);
                                                }
                                            }
                                        }
                                    }
                                    Database.EntityTable.UpdateClanID(Client);
                                    Database.EntityTable.UpdateClanRank(Client);
                                    break;
                                }
                            case (Clan.Types)12:
                                {
                                    if (packet[16] == 1)
                                    {
                                        Clan clientClan = client.Entity.GetClan;
                                        if (client.Entity.ClanRank == Clan.Ranks.ClanLeader)
                                        {
                                            if (clientClan != null)
                                            {
                                                if (clientClan.Members.Count < 12)
                                                {
                                                    GameClient member = null;
                                                    if (Kernel.GamePool.TryGetValue(BitConverter.ToUInt32(packet, 8), out member))
                                                    {
                                                        clientClan.Join(member);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    break;
                                }
                            case Clan.Types.Quit:
                                {
                                    Clan clan = client.Entity.GetClan;
                                    if (clan != null)
                                    {
                                        if (client.Entity.ClanRank != Clan.Ranks.ClanLeader)
                                        {
                                            if (clan.Members.ContainsKey(client.Entity.UID))
                                                clan.Members.Remove(client.Entity.UID);

                                            client.Entity.ClanRank = Clan.Ranks.None;
                                            client.Entity.ClanName = "";
                                            client.Entity.ClanId = 0;

                                            Database.EntityTable.UpdateClanID(client);
                                            Database.EntityTable.UpdateClanRank(client);
                                            Database.EntityTable.UpdateClanDonation(client);

                                            //client.Entity.Save("clanrank", 0);
                                            //client.Entity.Save("clanid", 0);
                                            //client.Entity.Save("clandonation", 0);

                                            #region Check Spouse and Re-Set Rank

                                            /*
                                            if (client.Entity.ClanRank == Clan.Ranks.Member)
                                            {
                                                if (clan.Members.ContainsKey(client.Entity.Spouse))
                                                {
                                                    Client Spouse;
                                                    if (World.GamePool.TryGetValue(client.Entity.Spouse, out Spouse))
                                                    {
                                                        Spouse.Hero.ClanRank = Spouse.Hero.ClanRank == Clan.Ranks.Spouse ? Clan.Ranks.Member : Clan.Ranks.Member;

                                                        Spouse.Hero.Save("clanrank", Convert.ToUInt16(Spouse.Hero.ClanRank));
                                                    }
                                                    else
                                                    {
                                                        MysqlCommand cmd = new MysqlCommand(CommandType.UPDATE);
                                                        cmd.Update("hero")
                                                            .Set("clanrank", Convert.ToUInt16(Clan.Ranks.Member), false)
                                                            .Where("id", client.Entity.Spouse);
                                                        c.SqlCmdQueue.Enqueue(cmd);
                                                    }
                                                }
                                            }
                                            */
                                            #endregion

                                            clan.InfoToMembers();
                                            client.SendScreen(client.Entity.SpawnPacket, false);

                                            clan.SendMessage(new Message(String.Format("{0} Has Left the Clan ", client.Entity.Name), Color.Red, Message.Clan));

                                            client.Send(clanp);
                                        }
                                    }
                                    break;
                                }
                            case Clan.Types.AddAlly:
                                {
                                    Clan clan = client.Entity.GetClan;
                                    if (clan != null)
                                    {
                                        if (client.Entity.ClanRank == Clan.Ranks.ClanLeader)
                                        {
                                            if (clan.Allies.Count() >= 5) { client.Send(new Message("The Ammount of Allies You can Have has exceeded", Color.Red, Message.TopLeft)); break; }

                                            if (Kernel.GamePool.TryGetValue(clanp.ID, out target))
                                            {
                                                Clan tclan = target.Entity.GetClan;
                                                if (tclan != null)
                                                {
                                                    if (target.Entity.ClanRank == Clan.Ranks.ClanLeader)
                                                    {
                                                        if (tclan.Allies.Count() >= 5) { client.Send(new Message("The Ammount of Allies the Target Clan can Have has exceeded", Color.Red, Message.TopLeft)); break; }

                                                        if (!clan.Allies.ContainsKey(tclan.ID))
                                                        {
                                                            if (!clan.Enemies.ContainsKey(tclan.ID))
                                                            {
                                                                String clanName = client.Entity.ClanName;

                                                                clanp.Offset16 = 2;
                                                                clanp.ID = client.Entity.UID;

                                                                Writer.WriteByte((Byte)clanName.Length, 17, clanp.ToArray());
                                                                Writer.WriteString(clanName, 18, clanp.ToArray());

                                                                tclan.AllyRequest = clan.ID;

                                                                target.Send(clanp);
                                                            }
                                                            else client.Send(new Message("That clan is Your Enemy.", Color.Red, Message.TopLeft));
                                                        }
                                                    }
                                                    else client.Send(new Message("This target is not the clan leader.", Color.Red, Message.TopLeft));
                                                }
                                            }
                                            else client.Send(new Message("Can not find target.", Color.Red, Message.TopLeft));
                                        }
                                        else client.Send(new Message("You are not the clan leader.", Color.Red, Message.TopLeft));
                                    }
                                    break;
                                }
                            case Clan.Types.AcceptAlliance:
                                {
                                    Clan clan = client.Entity.GetClan;
                                    if (clan != null)
                                    {
                                        if (client.Entity.ClanRank == Clan.Ranks.ClanLeader)
                                        {
                                            Clan tclan;
                                            if (Kernel.Clans.TryGetValue(clan.AllyRequest, out tclan))
                                            {
                                                if (tclan != null)
                                                {
                                                    if (!tclan.Enemies.ContainsKey(clan.ID))
                                                    {
                                                        if (!clan.Enemies.ContainsKey(tclan.ID))
                                                        {
                                                            if (!clan.Allies.ContainsKey(tclan.ID))
                                                                clan.Allies.Add(tclan.ID, tclan);
                                                            tclan.Allies.Add(clan.ID, clan);

                                                            clan.SendMessage(new ClanRelations(clan, ClanRelations.RelationTypes.Allies));
                                                            tclan.SendMessage(new ClanRelations(tclan, ClanRelations.RelationTypes.Allies));

                                                            clan.SendMessage(new Message(String.Format("Our Clan has Allianced with {0}", tclan.Name), Color.Red, Message.Clan));
                                                            tclan.SendMessage(new Message(String.Format("Our Clan has Allianced with {0}", clan.Name), Color.Red, Message.Clan));

                                                            clan.AddRelation(tclan.ID, ClanRelations.RelationTypes.Allies);
                                                            tclan.AddRelation(clan.ID, ClanRelations.RelationTypes.Allies);

                                                            clan.AllyRequest = tclan.AllyRequest = 0;
                                                        }
                                                        else client.Send(new Message("This Clan is Your Enemy.", Color.Red, Message.TopLeft));
                                                    }
                                                    client.Send(new Message("This Clan Has Enemied You!.", Color.Red, Message.TopLeft));
                                                }
                                            }
                                            else client.Send(new Message("Can not find target", Color.Red, Message.TopLeft));
                                        }
                                        else client.Send(new Message("You are not the clan leader.", Color.Red, Message.TopLeft));
                                    }
                                    break;
                                }
                            case Clan.Types.DeleteEnemy:
                                {
                                    Clan clan = client.Entity.GetClan;
                                    if (clan != null)
                                    {
                                        if (client.Entity.ClanRank == Clan.Ranks.ClanLeader)
                                        {
                                            String EnemyTarget = clanp.Offset18String;
                                            UInt32 ClanId = clan.GetClanId(EnemyTarget);

                                            Clan tclan;
                                            if (Kernel.Clans.TryGetValue(ClanId, out tclan))
                                            {
                                                clan.Enemies.Remove(ClanId);

                                                clan.DeleteRelation(ClanId, ClanRelations.RelationTypes.Enemies);

                                                clan.SendMessage(new ClanRelations(clan, ClanRelations.RelationTypes.Enemies));

                                                clan.SendMessage(new Message(String.Format("We are no longer Enemies With {0}", tclan.Name), Color.Red, Message.Clan));

                                                client.Send(clanp);
                                            }
                                        }
                                        else client.Send(new Message("You are not authorized to continue with this action", Color.Red, Message.TopLeft));
                                    }
                                    break;
                                }
                            case Clan.Types.DeleteAlly:
                                {
                                    Clan clan = client.Entity.GetClan;
                                    if (clan != null)
                                    {
                                        if (client.Entity.ClanRank == Clan.Ranks.ClanLeader)
                                        {
                                            String AlliedTarget = clanp.Offset18String;
                                            UInt32 ClanId = clan.GetClanId(AlliedTarget);

                                            Clan tclan;
                                            if (clan.Allies.TryGetValue(ClanId, out tclan))
                                            {
                                                clan.Allies.Remove(ClanId);
                                                tclan.Allies.Remove(clan.ID);

                                                clan.DeleteRelation(ClanId, ClanRelations.RelationTypes.Allies);
                                                tclan.DeleteRelation(clan.ID, ClanRelations.RelationTypes.Allies);

                                                clan.SendMessage(new ClanRelations(clan, ClanRelations.RelationTypes.Allies));
                                                tclan.SendMessage(new ClanRelations(tclan, ClanRelations.RelationTypes.Allies));

                                                clan.SendMessage(new Message(String.Format("We are no longer allied with {0}", tclan.Name), Color.Red, Message.Clan));
                                                tclan.SendMessage(new Message(String.Format("We are no longer allied with {0}", clan.Name), Color.Red, Message.Clan));

                                                client.Send(clanp);
                                            }
                                        }
                                        else client.Send(new Message("You are not authorized to continue with this action", Color.Red, Message.TopLeft));
                                    }
                                    break;
                                }
                            case Clan.Types.AddEnemy:
                                {
                                    Clan clan = client.Entity.GetClan;
                                    if (clan != null)
                                    {
                                        if (client.Entity.ClanRank == Clan.Ranks.ClanLeader)
                                        {
                                            String Enemy = clanp.Offset18String;
                                            UInt32 ClanId = clan.GetClanId(Enemy);
                                            if (!clan.Enemies.ContainsKey(ClanId))
                                            {
                                                if (!clan.Allies.ContainsKey(ClanId))
                                                {
                                                    if (clan.Enemies.Count() >= 5) { client.Send(new Message("The Ammount of Enemies You can Have has exceeded", Color.Red, Message.TopLeft)); break; }

                                                    Clan tclan;
                                                    if (Kernel.Clans.TryGetValue(ClanId, out tclan))
                                                    {
                                                        if (!clan.Enemies.ContainsKey(tclan.ID))
                                                            clan.Enemies.Add(tclan.ID, tclan);
                                                        clan.AddRelation(ClanId, ClanRelations.RelationTypes.Enemies);

                                                        clan.SendMessage(new ClanRelations(clan, ClanRelations.RelationTypes.Enemies));

                                                        clan.SendMessage(new Message(String.Format("We Have Enemied the clan {0}", tclan.Name), Color.Red, Message.Clan));
                                                        tclan.SendMessage(new Message(String.Format("The Clan {0} Has Made us their Enemy!", clan.Name), Color.Red, Message.Clan));
                                                    }
                                                }
                                                else client.Send(new Message("This clan is one of your alliance, What has gone wrong?", Color.Red, Message.TopLeft));
                                            }
                                            else client.Send(new Message("This clan is Already One of Your Enemies", Color.Red, Message.TopLeft));
                                        }
                                    }
                                    break;
                                }
                            case Clan.Types.SetAnnouncement:
                                {
                                    Clan clan = client.Entity.GetClan;
                                    if (clan != null)
                                    {
                                        if (client.Entity.ClanRank == Clan.Ranks.ClanLeader)
                                        {
                                            clan.Announcement = clanp.Offset18String;

                                            clan.SendMessage(new ClanAnnouncement(clan));
                                            clan.Save(client, "announcement", clan.Announcement);
                                        }
                                        else client.Send(new Message("You are not authorized to continue with this action", Color.Red, Message.TopLeft));
                                    }
                                    break;
                                }
                            case Clan.Types.TransferLeader:
                                {
                                    if (client.Entity.Myclan != null)
                                    {
                                        PrintPacket(packet);
                                        uint lider = 0;
                                        string name_receive = System.Text.Encoding.Default.GetString(packet, 18, packet[17]);
                                        foreach (var clien in Program.GamePool)
                                        {
                                            if (clien.Entity.Name == name_receive)
                                                lider = clien.Entity.UID;
                                        }
                                        if (lider == client.Entity.UID) return;
                                        Client.GameClient aClient = null;
                                        if (Conquer_Online_Server.Kernel.GamePool.TryGetValue(lider, out aClient))
                                        {

                                            if (Conquer_Online_Server.Kernel.Clans.ContainsKey(client.Entity.Myclan.ID))
                                            {
                                                if (Conquer_Online_Server.Kernel.Clans[client.Entity.Myclan.ID].Members.ContainsKey(aClient.Entity.UID))
                                                {
                                                    Conquer_Online_Server.Kernel.Clans[client.Entity.Myclan.ID].LeaderName = aClient.Entity.Name;
                                                    aClient.Entity.ClanRank = Clan.Ranks.ClanLeader;
                                                    aClient.Entity.Myclan.Members[aClient.Entity.UID].Rank = Clan.Ranks.ClanLeader;
                                                    if (aClient.Entity.Myclan.Members.ContainsKey(client.Entity.UID))
                                                        aClient.Entity.Myclan.Members[client.Entity.UID].Rank = 0;
                                                    client.Entity.ClanRank = 0;
                                                    Clan.SaveClan(aClient.Entity.Myclan);
                                                    Clan clan = client.Entity.GetClan;
                                                    clan.Join(client);
                                                }
                                            }

                                        }
                                        else
                                        {
                                            Conquer_Online_Server.Kernel.Clans[client.Entity.Myclan.ID].LeaderName = name_receive;
                                            client.Entity.ClanRank = 0;
                                            Clan clan = client.Entity.GetClan;
                                            clan.Join(client);
                                            Clan.SaveClan(client.Entity.Myclan);
                                            Clan.TransferClan(name_receive);
                                        }
                                    }
                                    break;
                                }
                            default:
                                Console.WriteLine(String.Format("Un Handled Clan clanp Type {0}", clanp.Type));
                                break;
                        }
                        break;
                    }
                #endregion
                #region Advertise
                case 2226:
                    {
                        Conquer_Online_Server.GamePackets.Advertise.Top8.Clear();
                        Conquer_Online_Server.GamePackets.Advertise.LoadTop8();
                        byte PageNumber = packet[4];
                        Conquer_Online_Server.Network.Test.Advertise2.Execute(client, packet);
                    }
                    return;
                #region advetise screen
                case 2227:
                    {
                        switch (packet[4])
                        {
                            case 1:
                                {
                                    uint Id = Conquer_Online_Server.BitConverter.ToUInt32(packet, 8);
                                    if (Kernel.Guilds.ContainsKey(Id))
                                    {
                                        if (client.Guild == null)
                                        {
                                            Kernel.Guilds[Id].AddMember(client);

                                        }
                                        // Conquer_Online_Server.Console.WriteLine("ID : " + Id);
                                        // PrintPacket(packet);
                                    }
                                    break;
                                }
                            case 2:
                                {
                                    //     Conquer_Online_Server.Console.WriteLine("2"); PrintPacket(packet); client.Send(packet); break;

                                    byte[] recruit = new byte[288];
                                    Writer.WriteUInt16(280, 0, recruit);
                                    Writer.WriteUInt16(2225, 2, recruit);
                                    client.Send(recruit);
                                    break;
                                }

                        }
                        break;
                    }
                #endregion
                case 2225:
                    {
                        if (client.Guild == null)
                            return;
                        if (client.AsMember.Rank == Conquer_Online_Server.Game.Enums.GuildMemberRank.Member)
                            return;
                        if (client.AsMember.Rank != Conquer_Online_Server.Game.Enums.GuildMemberRank.GuildLeader)
                            return;
                        uint GuildID = Conquer_Online_Server.BitConverter.ToUInt16(packet, 4);
                        string buletin = System.Text.ASCIIEncoding.ASCII.GetString(packet, 8, 254);
                        ulong donation = Conquer_Online_Server.BitConverter.ToUInt64(packet, 264);
                        //  byte Auto_join = packet[272];
                        //   byte Level = packet[274];
                        //   byte Reborn = packet[276];
                        //   ushort Flag = Conquer_Online_Server.BitConverter.ToUInt16(packet, 278);
                        //    byte Grade = packet[280];

                        if (client.Guild.SilverFund >= donation)
                        {
                            client.Guild.SilverFund -= donation;
                            client.Guild.Bulletin = buletin;
                            Conquer_Online_Server.GamePackets.Advertise.SaveTop8(client.Guild);
                        }
                    }
                    return;
                #endregion Advertise
                #region SubClass (2320)
                case 2320:
                    {
                        byte[] Packet = null;
                        switch (packet[8])
                        {
                            #region [Restore/Switch]
                            case 0:
                                byte To = packet[10];
                                Packet = new byte[0];
                                client.Send(packet);
                                if (To > 0)
                                {
                                    try
                                    {
                                        Packet = new byte[0];
                                        Packet = new SubClassShowFull(true) { ID = 1, Class = To, Level = client.Entity.SubClasses.Classes[To].Phase }.ToArray();//client.Entity.SubClasses.Classes[To].Phase
                                        client.Send(Packet);
                                        client.Entity.SubClass = To;
                                        client.Entity.SubClassLevel = client.Entity.SubClasses.Classes[To].Level;
                                        client.Entity.SubClasses.Active = To;
                                    }
                                    catch (Exception)
                                    {
                                        //Conquer_Online_Server.//Console.WriteLine(e); Program.SaveException(e);
                                    }
                                }
                                else
                                {
                                    client.Entity.SubClass = 0;
                                    client.Entity.SubClassLevel = 0;
                                    client.Entity.SubClasses.Active = 0;
                                    Packet = new SubClassShowFull(true) { ID = 1 }.ToArray();
                                    client.Send(Packet);
                                }
                                client.SendScreen(client.Entity.SpawnPacket, false);
                                break;
                            #endregion
                            #region [Upgrade]
                            case 2:
                                {
                                    byte Class = packet[10];
                                    ushort Required = 0;
                                    Conquer_Online_Server.Game.SubClass Sc = client.Entity.SubClasses.Classes[Class];
                                    #region [Set Required]
                                    switch ((Conquer_Online_Server.Game.ClassID)Sc.ID)
                                    {
                                        case Conquer_Online_Server.Game.ClassID.MartialArtist:
                                            switch (Sc.Level)
                                            {
                                                case 1: Required = 300; break;
                                                case 2: Required = 900; break;
                                                case 3: Required = 1800; break;
                                                case 4: Required = 2700; break;
                                                case 5: Required = 3600; break;
                                                case 6: Required = 5100; break;
                                                case 7: Required = 6900; break;
                                                case 8: Required = 8700; break;
                                                case 9: Required = ushort.MaxValue; break;
                                            }
                                            break;
                                        case Conquer_Online_Server.Game.ClassID.Warlock:
                                            switch (Sc.Level)
                                            {
                                                case 1: Required = 300; break;
                                                case 2: Required = 900; break;
                                                case 3: Required = 1800; break;
                                                case 4: Required = 2700; break;
                                                case 5: Required = 3600; break;
                                                case 6: Required = 5100; break;
                                                case 7: Required = 6900; break;
                                                case 8: Required = 8700; break;
                                                case 9: Required = ushort.MaxValue; break;
                                            }
                                            break;
                                        case Conquer_Online_Server.Game.ClassID.ChiMaster:
                                            switch (Sc.Level)
                                            {
                                                case 1: Required = 600; break;
                                                case 2: Required = 1800; break;
                                                case 3: Required = 3600; break;
                                                case 4: Required = 5400; break;
                                                case 5: Required = 7200; break;
                                                case 6: Required = 10200; break;
                                                case 7: Required = 13800; break;
                                                case 8: Required = 17400; break;
                                                case 9: Required = ushort.MaxValue; break;
                                            }
                                            break;
                                        case Conquer_Online_Server.Game.ClassID.Sage:
                                            switch (Sc.Level)
                                            {
                                                case 1: Required = 400; break;
                                                case 2: Required = 1200; break;
                                                case 3: Required = 2400; break;
                                                case 4: Required = 3600; break;
                                                case 5: Required = 4800; break;
                                                case 6: Required = 6800; break;
                                                case 7: Required = 9200; break;
                                                case 8: Required = 11600; break;
                                                case 9: Required = ushort.MaxValue; break;
                                            }
                                            break;
                                        case Conquer_Online_Server.Game.ClassID.Apothecary:
                                            switch (Sc.Level)
                                            {
                                                case 1: Required = 100; break;
                                                case 2: Required = 200; break;
                                                case 3: Required = 300; break;
                                                case 4: Required = 400; break;
                                                case 5: Required = 500; break;
                                                case 6: Required = 1000; break;
                                                case 7: Required = 4000; break;
                                                case 8: Required = 9000; break;
                                                case 9: Required = ushort.MaxValue; break;
                                            }
                                            break;
                                        case Conquer_Online_Server.Game.ClassID.Wrangler:
                                        case Conquer_Online_Server.Game.ClassID.Performer:
                                            switch (Sc.Level)
                                            {
                                                case 1: Required = 400; break;
                                                case 2: Required = 1200; break;
                                                case 3: Required = 2400; break;
                                                case 4: Required = 3600; break;
                                                case 5: Required = 4800; break;
                                                case 6: Required = 6800; break;
                                                case 7: Required = 9200; break;
                                                case 8: Required = 11600; break;
                                                case 9: Required = ushort.MaxValue; break;
                                            }
                                            break;
                                    }
                                    #endregion
                                    if (client.Entity.SubClasses.StudyPoints >= Required)
                                    {
                                        client.Entity.SubClasses.StudyPoints -= Required;
                                        client.Entity.SubClasses.Classes[Class].Level++;
                                        Packet = new byte[0];
                                        Packet = new SubClassShowFull(true) { ID = 1, Class = Class, Level = client.Entity.SubClasses.Classes[Class].Level }.ToArray();
                                        client.Send(Packet);
                                        Packet = new Network.GamePackets.SubClass(client.Entity).ToArray();
                                        client.Send(Packet);
                                        Database.SubClassTable.Update(client.Entity, client.Entity.SubClasses.Classes[Class]);
                                    }
                                    break;
                                }
                            #endregion
                            #region [Info]
                            case 6:
                                Game.Entity Owner = client.Entity;
                                if (Owner.SubClasses.Classes.Count > 0)
                                {
                                    Conquer_Online_Server.Game.SubClass[] Classes = new Conquer_Online_Server.Game.SubClass[Owner.SubClasses.Classes.Count];
                                    Owner.SubClasses.Classes.Values.CopyTo(Classes, 0);
                                    foreach (Conquer_Online_Server.Game.SubClass Class in Classes)
                                    {
                                        if (Class.ID == 9)
                                        {
                                            for (byte i = 0; i < Class.Phase; i++)
                                            {
                                                Packet = new byte[0];
                                                Packet = new SubClassShowFull(true) { ID = 4, Class = Class.ID, Level = Class.Level }.ToArray();
                                                client.Send(Packet);
                                            }
                                            continue;
                                        }
                                        Packet = new byte[0];
                                        Packet = new SubClassShowFull(true) { ID = 4, Class = Class.ID, Level = Class.Level }.ToArray();
                                        client.Send(Packet);
                                    }
                                }
                                Packet = new Conquer_Online_Server.Network.GamePackets.SubClass(client.Entity).ToArray();
                                client.Send(Packet);
                                break;
                            #endregion
                            #region [Learn]
                            case 9://class type packet6
                                byte Class1 = packet[10];
                                if (PacketHandler.PassLearn((byte)packet[10], client.Entity))
                                {
                                    if (!client.Entity.SubClasses.Classes.ContainsKey((byte)packet[10]))
                                    {
                                        {
                                            client.Entity.SubClasses.Classes.Add((byte)packet[10], new Conquer_Online_Server.Game.SubClass() { ID = (byte)packet[10], Level = 1, Phase = 1 });
                                            Conquer_Online_Server.Database.SubClassTable.Insert(client.Entity, (byte)packet[10]);
                                            Packet = new byte[0];
                                            Packet = new SubClassShowFull(true) { ID = 1, Class = Class1, Level = client.Entity.SubClasses.Classes[Class1].Level }.ToArray();
                                            client.Send(Packet);
                                            //  SubClassShowFull effect = new SubClassShowFull(true);
                                            //  effect.ID = SubClassShowFull.Effect;
                                            // effect.SubClassShowFull(client);
                                            // client.Send(effect);
                                            Packet = new Network.GamePackets.SubClass(client.Entity).ToArray();
                                            client.Send(Packet);
                                        }
                                    }
                                }

                                break;
                            #endregion
                            #region [UpgradePro]
                            case 10:
                                byte Class2 = packet[10];

                                if (client.Entity.SubClasses.Classes[(byte)Class2].Phase < client.Entity.SubClasses.Classes[(byte)Class2].Level)
                                {
                                    client.Entity.SubClasses.Classes[(byte)Class2].Phase++;
                                    Database.SubClassTable.Update(client.Entity, client.Entity.SubClasses.Classes[(byte)Class2]);
                                    Packet = new byte[0];
                                    Packet = new SubClassShowFull(true) { ID = 1, Class = Class2, Level = client.Entity.SubClasses.Classes[Class2].Level }.ToArray();
                                    client.Send(Packet);
                                    Packet = new Network.GamePackets.SubClass(client.Entity).ToArray();
                                    client.Send(Packet);
                                }

                                break;
                            #endregion
                            default:
                                Conquer_Online_Server.Console.WriteLine("Unknown 2320 packet type " + packet[4]);
                                break;
                        }
                        break;
                    }
                #endregion
                #region ItemAdding Stabilization
                case 1038:// server GhostworleD
                    {
                        ItemAddingStabilization stabilization = new ItemAddingStabilization(false);
                        stabilization.Deserialize(packet);
                        switch (packet[4])
                        {
                            case 1:
                                {
                                    StabilazeArtifact(stabilization, client);  //By Mrkeka                                  
                                    break;
                                }
                            case 0:
                                {
                                    StabilazeRefinery(stabilization, client);  //By Mrkeka                                   
                                    break;
                                }
                        }
                        break;
                    }
                #endregion
                #region Data (10010)
                case 10010:
                    {
                        if (client.Action != 2)
                            return;
                        HandleData(client, packet);
                        break;
                    }
                #endregion
                #region TimePacket (1033)
                case 1033:
                    {
                        ServerTime time = new ServerTime();
                        time.Year = (uint)DateTime.Now.Year;
                        time.Month = (uint)DateTime.Now.Month;
                        time.DayOfYear = (uint)DateTime.Now.DayOfYear;
                        time.DayOfMonth = (uint)DateTime.Now.Day;
                        time.Hour = (uint)DateTime.Now.Hour;
                        time.Minute = (uint)DateTime.Now.Minute;
                        time.Second = (uint)DateTime.Now.Second;
                        client.Send(time);
                        break;
                    }
                #endregion
                #region Chi (2533)
                case 2533:
                    {
                        Chi chi = new Chi(false);
                        chi.Deserialize(packet);
                        switch (chi.Type)
                        {
                            case Chi.Unlock:
                                UnlockChi(chi, client);
                                break;
                            case Chi.QueryInfo:
                                QueryChi(chi, client);
                                break;
                            case Chi.Study:
                                StudyChi(chi, client);
                                break;
                            case Chi.BuyStrength:
                                BuyStrengthChi(chi, client);
                                break;
                        }
                        break;
                    }
                #endregion
                #region inbox
                case 1046:
                    {
                        uint page = BitConverter.ToUInt16(packet, 8);
                        MaTrix.Inbox inbox = new MaTrix.Inbox();
                        inbox.check(client.Prizes, page);
                        inbox.Send(client);
                        break;
                    }
                case 1045:
                    {
                        uint Type = BitConverter.ToUInt16(packet, 4);
                        uint id = BitConverter.ToUInt16(packet, 8);
                        switch (Type)
                        {
                            case 1://show
                                {
                                    byte[] inbox = new byte[272];
                                    Writer.WriteUInt16((ushort)(inbox.Length - 8), 0, inbox);
                                    Writer.WriteUInt16(1048, 2, inbox);
                                    Writer.WriteUInt32(id, 4, inbox);//id    
                                    Writer.WriteString(client.Prizes[id].Message, 8, inbox);//string
                                    client.Send(inbox);
                                    break;
                                }
                            case 2://delete
                                {
                                    if (client.Prizes.ContainsKey(id))
                                        client.Prizes.Remove(id);
                                    if (client.Prizes.Count == 0)
                                        MaTrix.Inbox.SendInbox(client, false);
                                    break;
                                }
                            case 3://Money
                                {
                                    client.Entity.Money += client.Prizes[id].goldprize;
                                    client.Prizes[id].goldprize = 0;
                                    break;
                                }
                            case 4://ConquerPoints
                                {
                                    client.Entity.ConquerPoints += client.Prizes[id].cpsprize;
                                    client.Prizes[id].cpsprize = 0;
                                    break;
                                }
                            case 6:
                                {
                                    client.Prizes[id].itemprize.Invoke(client);
                                    client.Prizes[id].itemprize = null;
                                    break;
                                }
                            default:
                                Console.WriteLine("Unknown inbox Type:" + Type.ToString());
                                break;
                        }
                        client.Send(packet);
                        break;
                    }
                #endregion  
                default:
                    {
                        if (client.Account.State == Conquer_Online_Server.Database.AccountTable.AccountState.ProjectManager)
                            client.Send(new Message("Unknown type: " + ID + " with length " + packet.Length, System.Drawing.Color.CadetBlue, Message.Talk));
                        break;
                    }
            }
        }
        public static void SendWel(GameClient client)
        {
            byte[] Buf = new byte[150 + 8];
            Writer.WriteUInt16(150, 0, Buf);//Packet Lenght
            Writer.WriteUInt16(10010, 2, Buf);//Status Packet Id
            Writer.WriteUInt32(client.Entity.UID, 4, Buf);//Client Id
            Writer.WriteUInt32(227, 8, Buf);// Switch
            //  Writer.WriteUInt32((uint)Time32.Now.GetHashCode(), 16, Buf); // Status Effect Type
            Writer.WriteUInt32(164, 20, Buf); //StatusTypes.AzureShield
            Writer.WriteUInt32(1, 22, Buf); //StatusTypes.AzureShield
            Writer.WriteUInt32(3, 32, Buf);//Time duration for the effect
            Writer.WriteUInt32(1, 37, Buf);//Damage Coused by the skill
            Writer.WriteUInt32(30, 38, Buf);//Damage Coused by the skill
            Writer.WriteString("Welcome virulence-Co", 39, Buf);
        }
        private static void HandleData(GameClient client, byte[] packet)
        {
            Data gData = new Data(false);
            gData.Deserialize(packet);
            switch (gData.ID)
            {
                case Data.DetainWindowRequest:
                    {
                        if (!client.JustOpenedDetain)
                        {
                            if (client.DeatinedItem.Count != 0)
                                client.Send(new Data(true) { ID = Data.OpenWindow, dwParam = Data.WindowCommands.DetainRedeem, UID = client.Entity.UID });
                            if (client.ClaimableItem.Count != 0)
                                client.Send(new Data(true) { ID = Data.OpenWindow, dwParam = Data.WindowCommands.DetainClaim, UID = client.Entity.UID });
                        }

                        client.JustOpenedDetain = !client.JustOpenedDetain;
                        break;
                    }
                case 408:
                    {
                        if (!client.JustOpenedDetain)
                            if (client.ClaimableItem.Count != 0)
                                client.Send(new Data(true) { ID = Data.OpenWindow, dwParam = Data.WindowCommands.DetainClaim, UID = client.Entity.UID });
                        client.JustOpenedDetain = !client.JustOpenedDetain;
                        break;
                    }
                /*case Data.AllowAnimation:
                    {
                        LoginMessages(client);
                        client.Send(new FlowerPacket(client.Entity.Flowers));
                        //Database.SubClassTable.Load(client.Entity);
                        ClientEquip equips = new ClientEquip();
                        equips.DoEquips(client);
                        client.Send(equips);
                        client.Send(packet);
                    }
                    break;*/

                case Data.FinishSteedRace:
                    if (client.Entity.MapID == SteedRace.MAPID)
                        Program.World.SteedRace.FinishRace(client);
                    break;
                case 132:
                    {
                        client.Disconnect();
                        break;
                    }
                case Data.AppearanceType:
                    ChangeAppearance(gData, client);
                    break;
                case Data.LevelUpSpell:
                    LevelUpSpell(gData, client);
                    break;
                case Data.LevelUpProficiency:
                    LevelUpProficiency(gData, client);
                    break;
                case Data.SwingPickaxe:
                    client.Mining = true;
                    break;
                case Data.Revive:
                    Revive(gData, client);
                    break;
                case Data.UsePortal:
                    UsePortal(gData, client);
                    break;
                case Data.ChangePKMode:
                    ChangePKMode(gData, client);
                    break;
                case Data.ChangeAction:
                    ChangeAction(gData, client);
                    break;
                case Data.ChangeDirection:
                    ChangeDirection(gData, client);
                    break;
                case Data.Hotkeys:
                    client.Send(packet);
                    break;
                case Data.ConfirmSpells:
                    if (client.Spells != null)
                        foreach (Interfaces.ISkill spell in client.Spells.Values)
                            if (spell.ID != 3060)
                                spell.Send(client);
                    client.Send(packet);
                    break;
                case Data.ConfirmProficiencies:
                    if (client.Proficiencies != null)
                        foreach (Interfaces.IProf proficiency in client.Proficiencies.Values)
                            proficiency.Send(client);
                    client.Send(packet);
                    break;
                case Data.ConfirmGuild:
                    client.Send(packet);
                    break;
                case Data.ConfirmFriends:
                    #region Friends/Enemy/TradePartners/Apprentices
                    Message msg2 = new Message("Your friend, " + client.Entity.Name + ", has logged on.", System.Drawing.Color.Red, Message.TopLeft);

                    foreach (Game.ConquerStructures.Society.Friend friend in client.Friends.Values)
                    {
                        if (friend.IsOnline)
                        {
                            var pckt = new KnownPersons(true)
                            {
                                UID = client.Entity.UID,
                                Type = KnownPersons.RemovePerson,
                                Name = client.Entity.Name,
                                Online = true
                            };
                            friend.Client.Send(pckt);
                            pckt.Type = KnownPersons.AddFriend;
                            friend.Client.Send(pckt);
                            friend.Client.Send(msg2);
                        }
                        client.Send(new KnownPersons(true)
                        {
                            UID = friend.ID,
                            Type = KnownPersons.AddFriend,
                            Name = friend.Name,
                            Online = friend.IsOnline
                        });
                        if (friend.Message != "")
                        {
                            client.Send(new Message(friend.Message, client.Entity.Name, friend.Name, System.Drawing.Color.Red, Message.Whisper));
                            Database.KnownPersons.UpdateMessageOnFriend(friend.ID, client.Entity.UID, "");
                        }
                    }

                    foreach (Game.ConquerStructures.Society.Enemy enemy in client.Enemy.Values)
                    {
                        client.Send(new KnownPersons(true)
                        {
                            UID = enemy.ID,
                            Type = KnownPersons.AddEnemy,
                            Name = enemy.Name,
                            Online = enemy.IsOnline
                        });
                    }
                    Message msg3 = new Message("Your partner, " + client.Entity.Name + ", has logged in.", System.Drawing.Color.Red, Message.TopLeft);

                    foreach (Game.ConquerStructures.Society.TradePartner partner in client.Partners.Values)
                    {
                        if (partner.IsOnline)
                        {
                            var packet3 = new TradePartner(true)
                            {
                                UID = client.Entity.UID,
                                Type = TradePartner.BreakPartnership,
                                Name = client.Entity.Name,
                                HoursLeft = (int)(new TimeSpan(partner.ProbationStartedOn.AddDays(3).Ticks).TotalHours - new TimeSpan(DateTime.Now.Ticks).TotalHours),
                                Online = true
                            };
                            partner.Client.Send(packet3);
                            packet3.Type = TradePartner.AddPartner;
                            partner.Client.Send(packet3);
                            partner.Client.Send(msg3);
                        }
                        var packet4 = new TradePartner(true)
                        {
                            UID = partner.ID,
                            Type = TradePartner.AddPartner,
                            Name = partner.Name,
                            HoursLeft = (int)(new TimeSpan(partner.ProbationStartedOn.AddDays(3).Ticks).TotalHours - new TimeSpan(DateTime.Now.Ticks).TotalHours),
                            Online = partner.IsOnline
                        };
                        client.Send(packet4);
                    }

                    foreach (Game.ConquerStructures.Society.Apprentice appr in client.Apprentices.Values)
                    {
                        if (appr.IsOnline)
                        {
                            ApprenticeInformation AppInfo = new ApprenticeInformation();
                            AppInfo.Apprentice_ID = appr.ID;
                            AppInfo.Apprentice_Level = appr.Client.Entity.Level;
                            AppInfo.Apprentice_Class = appr.Client.Entity.Class;
                            AppInfo.Apprentice_PkPoints = appr.Client.Entity.PKPoints;
                            AppInfo.Apprentice_Experience = appr.Actual_Experience;
                            AppInfo.Apprentice_Composing = appr.Actual_Plus;
                            AppInfo.Apprentice_Blessing = appr.Actual_HeavenBlessing;
                            AppInfo.Apprentice_Name = appr.Name;
                            AppInfo.Apprentice_Online = true;
                            AppInfo.Apprentice_Spouse_Name = appr.Client.Entity.Spouse;
                            AppInfo.Enrole_date = appr.EnroleDate;
                            AppInfo.Mentor_ID = client.Entity.UID;
                            AppInfo.Mentor_Mesh = client.Entity.Mesh;
                            AppInfo.Mentor_Name = client.Entity.Name;
                            AppInfo.Type = 2;
                            client.Send(AppInfo);

                            MentorInformation Information = new MentorInformation(true);
                            Information.Mentor_Type = 1;
                            Information.Mentor_ID = client.Entity.UID;
                            Information.Apprentice_ID = appr.ID;
                            Information.Enrole_Date = appr.EnroleDate;
                            Information.Mentor_Level = client.Entity.Level;
                            Information.Mentor_Class = client.Entity.Class;
                            Information.Mentor_PkPoints = client.Entity.PKPoints;
                            Information.Mentor_Mesh = client.Entity.Mesh;
                            Information.Mentor_Online = true;
                            Information.Shared_Battle_Power = appr.Client.Entity.BattlePowerFrom(client.Entity);
                            Information.String_Count = 3;
                            Information.Mentor_Name = client.Entity.Name;
                            Information.Apprentice_Name = appr.Name;
                            Information.Mentor_Spouse_Name = client.Entity.Spouse;
                            appr.Client.ReviewMentor();
                            appr.Client.Send(Information);
                        }
                        else
                        {
                            ApprenticeInformation AppInfo = new ApprenticeInformation();
                            AppInfo.Apprentice_ID = appr.ID;
                            AppInfo.Apprentice_Name = appr.Name;
                            AppInfo.Apprentice_Online = false;
                            AppInfo.Enrole_date = appr.EnroleDate;
                            AppInfo.Mentor_ID = client.Entity.UID;
                            AppInfo.Mentor_Mesh = client.Entity.Mesh;
                            AppInfo.Mentor_Name = client.Entity.Name;
                            AppInfo.Type = 2;
                            client.Send(AppInfo);
                        }
                    }
                    #endregion
                    client.Send(packet);
                    break;
                case Data.EndTeleport:
                    break;
                case Data.GetSurroundings:
                    if (client.Booth != null)
                    {
                        client.Entity.TransformationID = 0;
                        client.Booth.Remove();
                        client.Booth = null;
                    }
                    GetSurroundings(client);
                    if (client.ChampionGroup != null)
                    {
                        byte[] p5442 = new byte[] { 20, 0, 86, 4, 40, 128, 14, 0, 160, 187, 13, 0, 103, 0, 21, 64, 12, 49, 0, 0, 84, 81, 83, 101, 114, 118, 101, 114 };
                        client.Send(p5442);
                    }
                    else
                        client.Send(new MapStatus() { BaseID = client.Map.BaseID, ID = client.Map.ID, Status = Database.MapsTable.MapInformations[client.Map.ID].Status, Weather = Database.MapsTable.MapInformations[client.Map.ID].Weather });
                    Game.Weather.CurrentWeatherBase.Send(client);
                    client.Send(gData);
                    break;
                case Data.SetLocation:
                    SetLocation(gData, client);
                    break;
                case Data.Jump:
                    client.LastMove = Time32.Now;
                    PlayerJump(gData, client);
                    client.Entity.SpellStamp = Time32.Now.AddSeconds(-1);
                    break;
                case Data.UnknownEntity:
                    {
                        #region UnknownEntity
                        Client.GameClient pClient = null;
                        if (Kernel.GamePool.TryGetValue(gData.dwParam, out pClient))
                        {
                            if (Kernel.GetDistance(pClient.Entity.X, pClient.Entity.Y, client.Entity.X, client.Entity.Y) <= Constants.pScreenDistance && client.Map.ID == pClient.Map.ID)
                            {
                                if (pClient.Guild != null)
                                    pClient.Guild.SendName(client);
                                if (client.Guild != null)
                                    client.Guild.SendName(pClient);
                                if (pClient.Entity.UID != client.Entity.UID)
                                {
                                    if (pClient.Map.ID == client.Map.ID)
                                    {
                                        if (pClient.Map.BaseID == 700 && pClient.Map.ID != 700)
                                        {
                                            if (client.InQualifier())
                                            {
                                                if (pClient.InQualifier())
                                                {
                                                    client.Entity.SendSpawn(pClient);
                                                    pClient.Entity.SendSpawn(client);
                                                    if (pClient.Guild != null)
                                                        client.Entity.SendSpawn(pClient, false);
                                                    if (client.Guild != null)
                                                        pClient.Entity.SendSpawn(client, false);
                                                }
                                                else
                                                {
                                                    client.Entity.SendSpawn(pClient);

                                                    if (pClient.Guild != null)
                                                        client.Entity.SendSpawn(pClient, false);
                                                    client.Screen.Add(pClient.Entity);
                                                }
                                            }
                                            else
                                            {
                                                if (pClient.InQualifier())
                                                {
                                                    pClient.Entity.SendSpawn(client);
                                                    if (client.Guild != null)
                                                        pClient.Entity.SendSpawn(client, false);
                                                    pClient.Screen.Add(client.Entity);
                                                }
                                                else
                                                {
                                                    client.Entity.SendSpawn(pClient, false);
                                                    pClient.Entity.SendSpawn(client, false);
                                                }
                                            }
                                        }
                                        else
                                        {
                                            client.Entity.SendSpawn(pClient, false);
                                            pClient.Entity.SendSpawn(client, false);
                                        }
                                    }
                                }
                            }
                        }
                        else
                        {
                            Game.Entity monster = null;
                            if (client.Map.Entities.TryGetValue(gData.dwParam, out monster))
                            {
                                if (Kernel.GetDistance(monster.X, monster.Y, client.Entity.X, client.Entity.Y) <= Constants.pScreenDistance)
                                {
                                    monster.SendSpawn(client, false);
                                }
                            }
                            if (client.Map.BodyGuards.TryGetValue(gData.dwParam, out monster) && (Kernel.GetDistance(monster.X, monster.Y, client.Entity.X, client.Entity.Y) <= 0x13))
                            {
                                monster.SendSpawn(client, false);
                                client.SendScreenSpawn(client.BodyGuard, true);
                            }

                            if (client.Map.Companions.TryGetValue(gData.dwParam, out monster))
                            {
                                if (Kernel.GetDistance(monster.X, monster.Y, client.Entity.X, client.Entity.Y) <= Constants.pScreenDistance)
                                {
                                    monster.SendSpawn(client, false);
                                }
                            }
                        }
                        #endregion
                        break;
                    }
                case Data.CompleteLogin:
                    {
                        LoginMessages(client);
                        ClientEquip equips = new ClientEquip();
                        equips.DoEquips(client);
                        if (client.Entity.MyJiang != null)
                        {
                            client.Entity.MyJiang.CreateStatusAtributes(client.Entity);
                        }
                        client.Entity.Hitpoints = client.Entity.MaxHitpoints;
                        client.Send(equips);
                        client.Send(packet);
                        break;
                    }
                case Data.ChangeFace:
                    ChangeFace(gData, client);
                    break;
                case Data.ObserveEquipment:
                    case Data.ObserveEquipment2:
                    case Data.ObserveKnownPerson:
                    ObserveEquipment(gData, client);
                    break;
                case Data.ViewEnemyInfo:
                    {
                        if (client.Enemy.ContainsKey(gData.dwParam))
                        {
                            if (client.Enemy[gData.dwParam].IsOnline)
                            {
                                KnownPersonInfo info = new KnownPersonInfo(true);
                                info.Fill(client.Enemy[gData.dwParam], true, false);
                                if (client.Enemy[gData.dwParam].Client.Guild != null)
                                    client.Enemy[gData.dwParam].Client.Guild.SendName(client);
                                client.Send(info);
                            }
                        }
                        break;
                    }
                case Data.ViewFriendInfo:
                    {
                        if (client.Friends.ContainsKey(gData.dwParam))
                        {
                            if (client.Friends[gData.dwParam].IsOnline)
                            {
                                KnownPersonInfo info = new KnownPersonInfo(true);
                                info.Fill(client.Friends[gData.dwParam], false, false);
                                if (client.Friends[gData.dwParam].Client.Guild != null)
                                    client.Friends[gData.dwParam].Client.Guild.SendName(client);
                                client.Send(info);
                            }
                        }
                        break;
                    }
                case Data.ViewPartnerInfo:
                    {
                        if (client.Partners.ContainsKey(gData.dwParam))
                        {
                            if (client.Partners[gData.dwParam].IsOnline)
                            {
                                TradePartnerInfo info = new TradePartnerInfo(true);
                                info.Fill(client.Partners[gData.dwParam]);
                                if (client.Partners[gData.dwParam].Client.Guild != null)
                                    client.Partners[gData.dwParam].Client.Guild.SendName(client);
                                client.Send(info);
                            }
                        }
                        break;
                    }
                case Data.EndFly:
                    client.Entity.RemoveFlag(Update.Flags.Fly);
                    break;
                case Data.EndTransformation:
                    client.Entity.Untransform();
                    break;
                case Data.XPListEnd:
                case Data.Die:
                    break;
                case Data.OwnBooth:
                    {
                        //client.Entity.TransformationTime = 3600;
                        //client.Entity.TransformationID = client.VendingDisguise;
                        //client.Entity.TransformationStamp = Time32.Now.AddDays(1);
                        //client.Entity.Update(Update.MaxHitpoints, client.Entity.MaxHitpoints, false);
                        client.Booth = new Conquer_Online_Server.Game.ConquerStructures.Booth(client, gData);
                        client.Send(new Data(true) { ID = Data.ChangeAction, UID = client.Entity.UID, dwParam = 0 });
                        break;
                    }
                case Data.Away:
                    {
                        if (client.Entity.Away == 0)
                            client.Entity.Away = 1;
                        else
                            client.Entity.Away = 0;
                        client.SendScreenSpawn(client.Entity, false);
                        break;
                    }
                case Data.DeleteCharacter:
                    {
                        if ((client.WarehousePW == 0 || gData.dwParam == 0) || (client.WarehousePW == gData.dwParam))
                        {
                            client.Account.EntityID = 0;
                            client.Account.Save();
                            client.Disconnect();
                        }
                        break;
                    }
                case Data.TeamSearchForMember:
                    {
                        if (client.Team != null)
                        {
                            Client.GameClient Client = null;
                            if (!client.Team.IsTeammate(gData.UID))
                                return;
                            if (Kernel.GamePool.TryGetValue(gData.UID, out Client))
                            {
                                gData.wParam1 = Client.Entity.X;
                                gData.wParam2 = Client.Entity.Y;
                                gData.Send(client);
                            }
                        }
                        break;
                    }
                default:
                    if (client.Account.State == Conquer_Online_Server.Database.AccountTable.AccountState.ProjectManager)
                        client.Send(new Message("Unknown generaldata id: " + gData.ID, System.Drawing.Color.CadetBlue, Message.Talk));
                    break;
            }
        }

        public static void PrintPacket(byte[] packet)
        {
            foreach (byte D in packet)
            {
                System.Console.Write((Convert.ToString(D, 16)).PadLeft(2, '0') + " ");
            }
            System.Console.Write("\n\n");
        }

        public static bool PassLearn(byte ID, Game.Entity Entity)
        {
            Boolean Pass = false;

            switch ((Game.ClassID)ID)
            {
                case Game.ClassID.MartialArtist:
                    if (Entity.Owner.Inventory.Contains(721259, 5))
                    {
                        Entity.Owner.Inventory.Remove(721259, 5);
                        Pass = true;
                        Entity.Owner.Entity.Update(_String.Effect, "get_special_dancer", true);
                    }
                    break;
                case Game.ClassID.Warlock:
                    if (Entity.Owner.Inventory.Contains(1080001, 10))
                    {
                        Entity.Owner.Inventory.Remove(1080001, 10);
                        Pass = true;
                        Entity.Owner.Entity.Update(_String.Effect, "get_special_dancer", true);
                    }
                    break;
                case Game.ClassID.ChiMaster:
                    if (Entity.Owner.Inventory.Contains(711188, 1))
                    {
                        Entity.Owner.Inventory.Remove(711188, 1);
                        Pass = true;
                        Entity.Owner.Entity.Update(_String.Effect, "get_special_dancer", true);
                    }
                    break;
                case Game.ClassID.Sage:
                    if (Entity.Owner.Inventory.Contains(723087, 20))
                    {
                        Entity.Owner.Inventory.Remove(723087, 20);
                        Pass = true;
                        Entity.Owner.Entity.Update(_String.Effect, "get_special_dancer", true);
                    }
                    break;
                case Game.ClassID.Apothecary:
                    if (Entity.Owner.Inventory.Contains(1088001, 10))
                    {
                        Entity.Owner.Inventory.Remove(1088001, 10);
                        Entity.Owner.Entity.Update(_String.Effect, "get_special_dancer", true);
                        Pass = true;
                    }
                    // 753003
                    break;
                case Game.ClassID.Performer:
                    if (Entity.Owner.Inventory.Contains(711679, 5))
                    {
                        Entity.Owner.Inventory.Remove(711679, 5);
                        Pass = true;
                        Entity.Owner.Entity.Update(_String.Effect, "get_special_dancer", true);
                    }
                    break;
                //1088001
                case Game.ClassID.Wrangler:
                    if (Entity.Owner.Inventory.Contains(723903, 40))
                    {
                        Entity.Owner.Inventory.Remove(723903, 40);
                        Pass = true;
                        _String str = new _String(true);
                        str.UID = Entity.Owner.Entity.UID;
                        str.TextsCount = 1;
                        str.Type = _String.Effect;
                        str.Texts.Add("get_special_dancer");
                        Entity.Owner.SendScreen(str, true);
                    }
                    break;
            }

            return Pass;
        }
        public static bool PassRequeriments(Game.SubClass Sc, Game.Entity Entity)
        {
            Boolean Pass = false;
            byte Level = 0;
            byte Reborns = 0;
            #region [Switch Phases]
            switch (Sc.Phase)
            {
                case 0:
                case 1: return true;
                case 2: Level = 90; Reborns = 0; break;
                case 3: Level = 110; Reborns = 0; break;
                case 4: Level = 120; Reborns = 0; break;
                case 5: Level = 90; Reborns = 0; break;
                case 6: Level = 110; Reborns = 0; break;
                case 7: Level = 120; Reborns = 0; break;
                case 8: Level = 120; Reborns = 0; break;
                case 9: Level = 120; Reborns = 0; break;
            }
            #endregion

            if (Sc.Level > Sc.Phase && Entity.Level >= Level && Entity.Reborn >= Reborns)
                Pass = true;

            if (Sc.Level == 9 && Sc.Phase == 9)
                Pass = false;

            return Pass;
        }
        public static void ChangeAppearance(Data generalData, GameClient client)
        {
            if (client.Entity.Tournament_Signed && ((Game.AppearanceType)generalData.dwParam) != AppearanceType.Garment)
                return;
            generalData.UID = client.Entity.UID;
            client.Entity.Appearance = (Game.AppearanceType)generalData.dwParam;
            client.SendScreen(generalData, true);
        }

        private static void SendChiRankings(GenericRanking ranking, GameClient client)
        {
            SendRankingQuery(ranking, client, GenericRanking.DragonChi, (uint)client.ChiData.DragonRank, (uint)client.ChiData.DragonPoints);
            SendRankingQuery(ranking, client, GenericRanking.PhoenixChi, (uint)client.ChiData.PhoenixRank, (uint)client.ChiData.PhoenixPoints);
            SendRankingQuery(ranking, client, GenericRanking.TigerChi, (uint)client.ChiData.TigerRank, (uint)client.ChiData.TigerPoints);
            SendRankingQuery(ranking, client, GenericRanking.TurtleChi, (uint)client.ChiData.TurtleRank, (uint)client.ChiData.TurtlePoints);
        }

        private static void SendRankingQuery(GenericRanking ranking, GameClient client, uint type, uint rank, uint points)
        {
            if (rank != 0)
            {
                ranking.RankingType = type;
                ranking.Append(rank, points, client.Entity.UID, client.Entity.Name);
                client.Send(ranking);
                ranking.Reset();
            }
        }
        public static bool PassJoinRequirements(Client.GameClient client, Game.ConquerStructures.Society.Guild guild)
        {
            GuildCommand cmd = new GuildCommand(true);
            cmd.Type = GuildCommand.GuildRequirements;
            cmd.dwParam2 = guild.LevelRequirement;
            cmd.dwParam3 = guild.RebornRequirement;
            cmd.dwParam4 = guild.ClassRequirement;
            if (((client.Entity.Class >= 10 && client.Entity.Class <= 15) && !guild.AllowTrojans) ||
                ((client.Entity.Class >= 20 && client.Entity.Class <= 25) && !guild.AllowWarriors) ||
                ((client.Entity.Class >= 40 && client.Entity.Class <= 45) && !guild.AllowArchers) ||
                ((client.Entity.Class >= 50 && client.Entity.Class <= 55) && !guild.AllowNinjas) ||
                ((client.Entity.Class >= 60 && client.Entity.Class <= 65) && !guild.AllowMonks) ||
                ((client.Entity.Class >= 70 && client.Entity.Class <= 75) && !guild.AllowPirates) ||
                ((client.Entity.Class >= 100 && client.Entity.Class <= 190) && !guild.AllowTaoists))
            {
                client.Send(cmd);
                return false;
            }
            if (client.Entity.Reborn < guild.RebornRequirement)
            {
                client.Send(cmd);
                return false;
            }
            if (client.Entity.Level < guild.LevelRequirement)
            {
                client.Send(cmd);
                return false;
            }
            return true;
        }
        private static bool SwitchEquipment(GameClient client, bool toAlternative)
        {
            if (client.Entity.ContainsFlag(Update.Flags.Fly))
            {
                client.Send(new Message("You cannot switch equipment during flight.", System.Drawing.Color.Red, Message.Talk));
                return false;
            }
            if (client.Equipment.Free(ConquerItem.AlternateRightWeapon) && !client.Equipment.Free(ConquerItem.AlternateLeftWeapon))
            {
                client.Send(new Message("Invalid weapons! Missing the important weapons? Unequip the alternative left weapon.", System.Drawing.Color.Red, Message.Talk));
                return false;
            }
            foreach (var eq in client.Equipment.Objects)
            {
                if (eq != null)
                {
                    var itemInfo = Database.ConquerItemInformation.BaseInformations[eq.ID];
                    if (!((EquipPassLvlReq(itemInfo, client) || EquipPassRbReq(itemInfo, client)) && EquipPassJobReq(itemInfo, client)))
                    {
                        client.Send(new Message("You cannot switch equipment because " + ((Game.Enums.ItemPositionName)eq.Position).ToString().Replace("_", "~") + "'" + (string)((eq.Position % 20) == ConquerItem.Boots ? "" : "s") + " stats are not compatible with you (level or profession).", "SYSTEM", System.Drawing.Color.Red, Message.Talk));
                        return false;
                    }
                }
            }
            client.Entity.AttackPacket = null;
            client.Entity.RemoveFlag(Update.Flags.Fly);
            client.AlternateEquipment = toAlternative;
            client.LoadItemStats();
            client.Equipment.UpdateEntityPacket();
            return true;
        }

        private static void QueryChi(Chi chi, GameClient client)
        {
            Client.GameClient pClient;
            if (Kernel.GamePool.TryGetValue(chi.UID, out pClient))
                client.Send(new ChiPowers(true).Query(pClient, false));
        }

        private static void ShowGenericRanking(GenericRanking ranking, GameClient client)
        {
            ushort page = ranking.Page;
            Database.ChiTable.ChiData[] list = null;
            Func<Database.ChiTable.ChiData, int> select = null;

            if (ranking.RankingType == GenericRanking.DragonChi)
            {
                list = Database.ChiTable.Dragon;
                select = (chiData) => { return chiData.DragonPoints; };
            }
            else if (ranking.RankingType == GenericRanking.PhoenixChi)
            {
                list = Database.ChiTable.Phoenix;
                select = (chiData) => { return chiData.PhoenixPoints; };
            }
            else if (ranking.RankingType == GenericRanking.TigerChi)
            {
                list = Database.ChiTable.Tiger;
                select = (chiData) => { return chiData.TigerPoints; };
            }
            else if (ranking.RankingType == GenericRanking.TurtleChi)
            {
                list = Database.ChiTable.Turtle;
                select = (chiData) => { return chiData.TurtlePoints; };
            }
            if (list.Length < page * 10) return;
            uint count = (uint)Math.Min(list.Length - page * 10, 10);
            var nRanking = new GenericRanking(true, count);
            nRanking.Mode = GenericRanking.Ranking;
            nRanking.RankingType = ranking.RankingType;
            nRanking.Page = page;
            nRanking.RegisteredCount = (ushort)list.Length;
            int rank = (int)page * 10;
            for (int i = rank; i < rank + count; i++)
            {
                var current = list[i];
                nRanking.Append((uint)(i + 1), (uint)select(current), current.UID, current.Name);
            }
            client.Send(nRanking);
        }

        private static void UnlockChi(Chi chi, GameClient client)
        {
            if (chi.Mode == Game.Enums.ChiPowerType.Dragon)
                if (client.Entity.Level < 110)
                    return;
            if (chi.Mode == Game.Enums.ChiPowerType.Phoenix)
                if (client.Entity.Level < 110 || client.Entity.Reborn < 1 || client.ChiPowers.Count <= 0)
                    return;
                else if (client.ChiPowers[0].Points < 300)
                    return;
            if (chi.Mode == Game.Enums.ChiPowerType.Tiger)
                if (client.Entity.Level < 110 || client.Entity.Reborn < 2 || client.ChiPowers.Count <= 1)
                    return;
                else if (client.ChiPowers[1].Points < 300)
                    return;
            if (chi.Mode == Game.Enums.ChiPowerType.Turtle)
                if (client.Entity.Level < 110 || client.Entity.Reborn != 2 || client.ChiPowers.Count <= 2)
                    return;
                else if (client.ChiPowers[2].Points < 300)
                    return;

            if (client.ChiPoints >= 300)
            {
                foreach (var power in client.ChiPowers)
                    if (power.Power == chi.Mode)
                        return;
                client.ChiPoints -= 300;
                client.ChiPowers.Add(new Game.ConquerStructures.ChiPowerStructure(chi.Mode));
                client.Send(new ChiPowers(true).Query(client));
                Database.ChiTable.Save(client);
            }
        }

        private static Game.Enums.ChiAttribute RandomChi()
        {
            return (Game.Enums.ChiAttribute)Kernel.Random.Next(1, 14);
        }
        private static ushort ChiValue(Game.Enums.ChiAttribute attribute)
        {
            int max = Game.Enums.ChiMaxValues(attribute),
                min = Game.Enums.ChiMinValues(attribute);
            float baseDiff = max - min;
            baseDiff /= 10f;
            if (Kernel.Rate(4, 100)) return (ushort)Kernel.Random.Next((int)(max - baseDiff), max);
            else if (Kernel.Rate(10, 100)) return (ushort)Kernel.Random.Next((int)(max - 2 * baseDiff), (int)(max - baseDiff));
            else if (Kernel.Rate(1, 100)) return (ushort)Kernel.Random.Next((int)(max - 0 * baseDiff), (int)(max - baseDiff));
            else if (Kernel.Rate(40, 100)) return (ushort)Kernel.Random.Next((int)(max - 3 * baseDiff), (int)(max - 2 * baseDiff));

            else if (Kernel.Rate(3, 100)) return (ushort)Kernel.Random.Next((int)(max - 0 * baseDiff), (int)(max - 0 * baseDiff));
            else return (ushort)Kernel.Random.Next(min, max);
        }
        private static bool CanKeepChiPower(Game.ConquerStructures.ChiPowerStructure strct, int attribute)
        {
#if NOTMULTIPLECHIPOWERS
            var attr = strct.Attributes;
            var att = attr[attribute];
            for (int i = 0; i < attr.Length; i++)
                if (i != attribute)
                    if (attr[i].Type == att.Type)
                        return false;
#endif
            return true;
        }
        private static void StudyChi(Chi chi, GameClient client)
        {
            if (client.ChiPowers.Count >= (int)chi.Mode)
            {
                var powers = client.ChiPowers[(int)chi.Mode - 1];
                var attributes = powers.Attributes;
                uint cost = 50;
                if ((chi.dwParam & 0x1) == 0x1) cost += 50;
                if ((chi.dwParam & 0x2) == 0x2) cost += 50;
                if ((chi.dwParam & 0x4) == 0x4) cost += 50;
                if ((chi.dwParam & 0x8) == 0x8) cost += 50;
                if (client.ChiPoints >= cost)
                {
                    if ((chi.dwParam & 0x1) != 0x1)
                    {
                        do { attributes[0].Type = RandomChi(); }
                        while (!CanKeepChiPower(powers, 0));
                        attributes[0].Value = ChiValue(attributes[0].Type);
                    }
                    if ((chi.dwParam & 0x2) != 0x2)
                    {
                        do { attributes[1].Type = RandomChi(); }
                        while (!CanKeepChiPower(powers, 1));
                        attributes[1].Value = ChiValue(attributes[1].Type);
                    }
                    if ((chi.dwParam & 0x4) != 0x4)
                    {
                        do { attributes[2].Type = RandomChi(); }
                        while (!CanKeepChiPower(powers, 2));
                        powers.Attributes[2].Value = ChiValue(attributes[2].Type);
                    }
                    if ((chi.dwParam & 0x8) != 0x8)
                    {
                        do { attributes[3].Type = RandomChi(); }
                        while (!CanKeepChiPower(powers, 3));
                        powers.Attributes[3].Value = ChiValue(attributes[3].Type);
                    }
                    powers.CalculatePoints();
                    Database.ChiTable.Sort(chi.Mode);
                    powers.Power = chi.Mode;
                    client.Send(new ChiPowers(true).Query(client));
                    #region update ranking
                    Database.ChiTable.ChiData[] array = null;
                    switch (chi.Mode)
                    {
                        case Game.Enums.ChiPowerType.Dragon:
                            array = Database.ChiTable.Dragon;
                            break;

                        case Game.Enums.ChiPowerType.Phoenix:
                            array = Database.ChiTable.Phoenix;
                            break;

                        case Game.Enums.ChiPowerType.Tiger:
                            array = Database.ChiTable.Tiger;
                            break;

                        case Game.Enums.ChiPowerType.Turtle:
                            array = Database.ChiTable.Turtle;
                            break;
                    }
                    foreach (var chiData in array)
                    {
                        if (Kernel.GamePool.ContainsKey(chiData.UID))
                        {
                            var pClient = Kernel.GamePool[chiData.UID];
                            if (pClient == null) continue;
                            if (pClient.ChiData == null) continue;
                            SendRankingQuery(new GenericRanking(true) { Mode = GenericRanking.QueryCount }, pClient, GenericRanking.Chi + (uint)chi.Mode, pClient.ChiData.SelectRank(chi.Mode), pClient.ChiData.SelectPoints(chi.Mode));
                            if (pClient.Entity.UID == client.Entity.UID || pClient.ChiData.SelectRank(chi.Mode) < 50)
                                client.LoadItemStats();
                        }
                    }
                    #endregion
                    client.ChiPoints -= cost;
                    Database.ChiTable.Save(client);
                }
            }
        }

        private static void BuyStrengthChi(Chi chi, GameClient client)
        {
            uint cost = 4000 - client.ChiPoints;
            cost /= 4;
            //cost *= 100;//1000 (current cost) * 100 = 100000 cps (million) les??  100k now
            if (client.Entity.ConquerPoints >= cost)//that's it
            {
                client.Entity.ConquerPoints -= cost;
                client.ChiPoints = 4000;
                client.Send(new ChiPowers(true).Query(client));
            }
        }
        static void LevelUpSpell(Data generalData, Client.GameClient client)
        {
            ushort spellID = (ushort)generalData.dwParam;
            Interfaces.ISkill spell = null;
            if (client.Spells.TryGetValue(spellID, out spell))
            {
                var spellInfo = Database.SpellTable.GetSpell(spellID, client);
                if (spellInfo != null)
                {
                    if (client.Trade.InTrade)
                        return;
                    if (spellInfo.CPCost != 0)
                    {
                        if (client.Trade.InTrade)
                            return;
                        uint cpCost = spellInfo.CPCost;
                        int max = Math.Max((int)spell.Experience, 1);
                        int percentage = 100 - (int)(max / Math.Max((spellInfo.NeedExperience / 100), 1));
                        cpCost = (uint)(cpCost * percentage / 100);
                        if (client.Entity.ConquerPoints >= cpCost)
                        {
                            client.Entity.ConquerPoints -= cpCost;
                            spell.Level++;
                            if (spell.Level == spell.PreviousLevel / 2)
                                spell.Level = spell.PreviousLevel;
                            spell.Experience = 0;
                            spell.Send(client);
                        }
                    }
                }
            }
        }
        static void LevelUpProficiency(Data generalData, Client.GameClient client)
        {
            ushort proficiencyID = (ushort)generalData.dwParam;
            Interfaces.IProf proficiency = null;
            if (client.Proficiencies.TryGetValue(proficiencyID, out proficiency))
            {
                if (proficiency.Level != 20)
                {
                    if (client.Trade.InTrade)
                        return;
                    uint cpCost = 0;
                    #region Costs
                    switch (proficiency.Level)
                    {
                        case 1: cpCost = 28; break;
                        case 2: cpCost = 28; break;
                        case 3: cpCost = 28; break;
                        case 4: cpCost = 28; break;
                        case 5: cpCost = 28; break;
                        case 6: cpCost = 55; break;
                        case 7: cpCost = 81; break;
                        case 8: cpCost = 135; break;
                        case 9: cpCost = 162; break;
                        case 10: cpCost = 270; break;
                        case 11: cpCost = 324; break;
                        case 12: cpCost = 324; break;
                        case 13: cpCost = 324; break;
                        case 14: cpCost = 324; break;
                        case 15: cpCost = 375; break;
                        case 16: cpCost = 548; break;
                        case 17: cpCost = 799; break;
                        case 18: cpCost = 1154; break;
                        case 19: cpCost = 1420; break;
                    }
                    #endregion
                    uint needExperience = Database.DataHolder.ProficiencyLevelExperience(proficiency.Level);
                    int max = Math.Max((int)proficiency.Experience, 1);
                    int percentage = 100 - (int)(max / (needExperience / 100));
                    cpCost = (uint)(cpCost * percentage / 100);
                    if (client.Entity.ConquerPoints >= cpCost)
                    {
                        client.Entity.ConquerPoints -= cpCost;
                        proficiency.Level++;
                        if (proficiency.Level == proficiency.PreviousLevel / 2)
                        {
                            proficiency.Level = proficiency.PreviousLevel;
                            Database.DataHolder.ProficiencyLevelExperience((byte)(proficiency.Level + 1));
                        }
                        proficiency.Experience = 0;
                        proficiency.Send(client);
                    }
                }
            }
        }

        #region Guild Arsenal
        public static int ArsenalPosition(uint ID)
        {
            ushort pos = ItemPosition(ID);
            switch (pos)
            {
                case ConquerItem.Head:
                    return 0;
                case ConquerItem.Armor:
                    return 1;
                case ConquerItem.LeftWeapon:
                case ConquerItem.RightWeapon:
                    return 2;
                case ConquerItem.Ring:
                    return 3;
                case ConquerItem.Boots:
                    return 4;
                case ConquerItem.Necklace:
                    return 5;
                case ConquerItem.Fan:
                    return 6;
                case ConquerItem.Tower:
                    return 7;
                default:
                    return -1;
            }
        }
        static void ViewArsenalPage(ArsenalView view, Client.GameClient client)
        {
            if (client.Entity.GuildID == 0 || client.Guild == null) return;
            if (client.Guild.Arsenals.Length < view.ArsenalType) return;
            var Arsenal = client.Guild.Arsenals[view.ArsenalType];
            if (Arsenal.Unlocked)
            {
                uint beginAt = view.BeginAt - 1;
                uint length = (uint)Arsenal.OrderedList.Count;
                length -= beginAt;
                length = Math.Min(length, 8);
                view = new ArsenalView(true, length);
                view.BeginAt = beginAt + 1;
                for (int i = (int)beginAt; i < beginAt + length; i++)
                    view.AppendItem(Arsenal.OrderedList[i]);
                view.EndAt = length + view.BeginAt - 1;
                view.ArsenalType = (uint)(Arsenal.Position - 1);
                view.Count = length;
                view.Donation = Arsenal.Donation;
                view.Enchantment = Arsenal.Enhancement;
                view.EnchantmentExpirationDate = Arsenal.EnhancementExpirationDate();
                view.SharedBattlepower = Arsenal.SharedBattlePower;
                view.TotalInscribed = Arsenal.OrderedList.Count;
                client.Send(view);
            }
        }
        static void InscribeArsenalItem(ArsenalCommand command, Client.GameClient client)
        {
            ConquerItem item = null;
            if (client.Inventory.TryGetItem(command.dwParam2, out item))
            {
                int arsenalRealPosition = ArsenalPosition(item.ID);
                if ((item.ID % 10) >= 8 && arsenalRealPosition == command.dwParam && !item.Inscribed)
                {
                    if (client.Entity.GuildID != 0 && client.Guild != null && client.Guild.Arsenals[command.dwParam].Unlocked)
                    {
                        item.Inscribed = true;
                        item.Mode = Game.Enums.ItemMode.Update;
                        item.Send(client);
                        var Arsenal = client.Guild.Arsenals[command.dwParam];
                        Arsenal.AddItem(item, client);
                        client.Guild.SaveArsenal();
                    }
                }
            }
            client.Guild.Level = 1;
        }
        static void UninscribeArsenalItem(ArsenalCommand command, Client.GameClient client)
        {
            if (client.Entity.GuildID != 0 && client.Guild != null)
            {
                var Arsenal = client.Guild.Arsenals[command.dwParam];
                if (Arsenal.Unlocked)
                {
                    if (Arsenal.ItemDictionary.ContainsKey(command.dwParam2))
                    {
                        var item = Arsenal.ItemDictionary[command.dwParam2];
                        if (item.OwnerUID == client.Entity.UID)
                        {
                            ConquerItem Item = null;
                            #region Find the item
                            if (!client.Inventory.TryGetItem(item.UID, out Item))
                            {
                                bool found = false;
                                foreach (var eqItem in client.Equipment.Objects)
                                    if (eqItem != null)
                                        if (eqItem.UID == item.UID)
                                        { Item = eqItem; found = true; break; }
                                if (!found)
                                {
                                    foreach (var wh in client.Warehouses.Values)
                                        foreach (var eqItem in wh.Objects)
                                            if (eqItem != null)
                                                if (eqItem.UID == item.UID)
                                                { Item = eqItem; break; }
                                }
                            }
                            #endregion
                            if (Item != null)
                            {
                                Item.Inscribed = false;
                                if (Item.Warehouse == 0)
                                {
                                    Item.Mode = Game.Enums.ItemMode.Update;
                                    Item.Send(client);
                                }
                                Arsenal.RemoveItem(item, client);
                                client.Guild.ArsenalBPChanged = true;
                                client.Guild.GetMaxSharedBattlepower();
                                client.Guild.SaveArsenal();
                            }
                        }
                    }
                }
            }
        }
        static void UnlockArsenal(ArsenalCommand command, Client.GameClient client)
        {
            if (client.Entity.GuildID == 0) return;
            var Guild = client.Guild;
            if (Guild == null) return;
            if (Guild.Arsenals[command.dwParam].Unlocked)
            {
                client.Send(new Message("This arsenal was already unlocked!", System.Drawing.Color.Red, Message.Talk));
                return;
            }
            uint cost = Guild.GetCurrentArsenalCost();
            if (Guild.SilverFund >= cost)
            {
                Guild.SilverFund -= cost;
                Guild.Arsenals[command.dwParam].Unlocked = true;
                Guild.SendGuild(client);

                Guild.ArsenalBPChanged = true;
                Guild.GetMaxSharedBattlepower();
                client.Guild.SaveArsenal();
            }
            else
            {
                client.Send(new Message("Your guild doesn't have enough funds!", System.Drawing.Color.Red, Message.Talk));
            }
        }
        static void ViewGuildArsenal(Client.GameClient client)
        {
            if (client.Entity.GuildID == 0) return;
            if (client.Guild == null) return;
            ArsenalTab view = new ArsenalTab(true);
            view.SharedBattlepower = (uint)client.Guild.GetMaxSharedBattlepower();
            view.ArsenalCount = 8;
            foreach (var arsenal in client.Guild.Arsenals)
                view.AppendArsenal(arsenal);
            view.HeroDonation = client.GetArsenalDonation();
            view.HeroSharedBattlepower = client.Entity.GuildBattlePower;
            client.Send(view);
        }
        public static void UninscribeItem(ConquerItem item, Client.GameClient client)
        {
            if (client.Entity.GuildID == 0 || client.Guild == null) return;
            int arsenalPosition = ArsenalPosition(item.ID);
            client.Guild.Arsenals[arsenalPosition].RemoveItem(item, client);
            item.Inscribed = false;
            item.Mode = Game.Enums.ItemMode.Update;
            item.Send(client);
            //Save is done other else.
        }
        public static void UninscribeAllItems(Client.GameClient client)
        {
            foreach (var item in client.Inventory.Objects)
                if (item.Inscribed)
                    UninscribeItem(item, client);
            foreach (var item in client.Equipment.Objects)
                if (item != null)
                    if (item.Inscribed)
                        UninscribeItem(item, client);
            foreach (var wh in client.Warehouses.Values)
                foreach (var item in wh.Objects)
                    if (item.Inscribed)
                        UninscribeItem(item, client);

            client.Guild.ArsenalBPChanged = true;
            client.Guild.GetMaxSharedBattlepower();
            client.Guild.SaveArsenal();
        }
        public static void EnchantArsenal(ArsenalCommand command, Client.GameClient client)
        {
            if (client.Entity.GuildID == 0 || client.Guild == null) return;
            var guild = client.Guild;
            var arsenal = guild.Arsenals[command.dwParam];
            if (!arsenal.Unlocked) return;
            if (arsenal.SharedBattlePower == 3) return;
            uint cost = 20000000 + command.dwParam3 * 40000000;
            if (guild.SilverFund >= cost)
            {
                guild.SilverFund -= cost;
                arsenal.Enhancement = command.dwParam3;
                arsenal.EnhancementExpDate = DateTime.Now.AddDays(30);

                guild.ArsenalBPChanged = true;
                guild.GetMaxSharedBattlepower();
                client.Guild.SaveArsenal();
            }
        }
        #endregion

        public static void ReincarnationHash(Client.GameClient client)
        {
            if (Kernel.ReincarnatedCharacters.ContainsKey(client.Entity.UID))
            {
                if (client.Entity.Level >= 110 && client.Entity.Reborn == 2)
                {
                    ushort stats = 0;
                    uint lev1 = client.Entity.Level;
                    Game.Features.Reincarnation.ReincarnateInfo info = Kernel.ReincarnatedCharacters[client.Entity.UID];
                    client.Entity.Level = info.Level;
                    client.Entity.Experience = info.Experience;
                    Kernel.ReincarnatedCharacters.Remove(info.UID);
                    Database.ReincarnationTable.RemoveReincarnated(client.Entity);
                    stats = (ushort)(((client.Entity.Level - lev1) * 3) - 3);
                    client.Entity.Atributes += stats;
                }
            }
        }
        #region Reincarnation
        public class Reincarnation
        {
            private Client.GameClient _client;
            public Reincarnation(Client.GameClient client, byte new_class)
            {
                if (client.Entity.Level < 120)
                    return;
                if (Kernel.ReincarnatedCharacters.ContainsKey(client.Entity.UID))
                    return;
                _client = client;
                Database.ReincarnationTable.NewReincarnated(client.Entity);
                Game.Features.Reincarnation.ReincarnateInfo info = new Game.Features.Reincarnation.ReincarnateInfo();
                info.UID = client.Entity.UID;
                info.Level = client.Entity.Level;
                info.Experience = client.Entity.Experience;
                Kernel.ReincarnatedCharacters.Add(info.UID, info);
                client.Entity.FirstRebornClass = client.Entity.SecondRebornClass;
                client.Entity.SecondRebornClass = client.Entity.Class;
                client.Entity.Class = new_class;
                client.Entity.SecondRebornLevel = client.Entity.Level;
                //client.Entity.ReincarnationLev = client.Entity.Level;//kikoz
                client.Entity.Level = 15;
                client.Entity.Experience = 0;
                client.Entity.Atributes =
     (ushort)(client.ExtraAtributePoints(client.Entity.FirstRebornClass, client.Entity.FirstRebornLevel) +
      client.ExtraAtributePoints(client.Entity.SecondRebornClass, client.Entity.SecondRebornLevel) + 62);
                #region RemoveAllSpells
                Interfaces.ISkill[] spells = client.Spells.Values.ToArray();
                foreach (Interfaces.ISkill spell in spells)
                {
                    if (!Constants.AvaibleSpells.Contains(spell.ID))
                    {
                        client.RemoveSpell(spell);
                        Database.SkillTable.DeleteSpell(client, spell.ID);
                    }
                    //spell.Send(client);
                }
                //Skills.Clear();
                client.Spells.Clear();
                Database.SkillTable.removeAllSkills(client);//Samak
                //Profs.Clear();
                client.Proficiencies.Clear();
                Database.SkillTable.removeAllProfs(client);//Samak  


                #region Archer2
                #region Arch-Arch
                if (client.Entity.FirstRebornClass == 45 && client.Entity.SecondRebornClass == 45)
                {

                    if (client.Entity.Class == 41)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 10313 });//Star Arrow
                        client.AddSpell(new Spell(true) { ID = 5000 });//Freezing Arrows
                    }
                    else
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 5000 });//Freezing Arrows
                        client.AddSpell(new Spell(true) { ID = 5002 });//Poisonous Arrows
                    }
                }
                #endregion
                #region Arch-Fire
                else if (client.Entity.FirstRebornClass == 45 && client.Entity.SecondRebornClass == 145)
                {

                    if (client.Entity.Class == 11 || client.Entity.Class == 21 || client.Entity.Class == 41 || client.Entity.Class == 71)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 1000 });//Thunder
                        client.AddSpell(new Spell(true) { ID = 1001 });//Fire
                        client.AddSpell(new Spell(true) { ID = 1005 });//Cure
                        client.AddSpell(new Spell(true) { ID = 1195 });//Meditation
                        client.AddSpell(new Spell(true) { ID = 5002 });//Poisonous Arrows
                    }
                    else if (client.Entity.Class == 51 || client.Entity.Class == 61)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 1000 });//Thunder
                        client.AddSpell(new Spell(true) { ID = 1001 });//Fire
                        client.AddSpell(new Spell(true) { ID = 1005 });//Cure
                        client.AddSpell(new Spell(true) { ID = 1195 });//Meditation
                        client.AddSpell(new Spell(true) { ID = 10010 });//Poison
                    }
                    else if (client.Entity.Class == 132)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 5002 });//Poisonous Arrows
                        client.AddSpell(new Spell(true) { ID = 1120 });//FireCircle
                    }
                    else if (client.Entity.Class == 142)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 5002 });//Poisonous Arrows
                        client.AddSpell(new Spell(true) { ID = 3080 });//Dodge
                    }
                }
                #endregion
                #region Arch-Tro
                if (client.Entity.FirstRebornClass == 45 && client.Entity.SecondRebornClass == 15)
                {
                    if (client.Entity.Class == 41 || client.Entity.Class == 132 || client.Entity.Class == 142 || client.Entity.Class == 51 || client.Entity.Class == 61 || client.Entity.Class == 71)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 5002 });//Poisonous Arrows
                        client.AddSpell(new Spell(true) { ID = 1110 });//Cyclone
                        client.AddSpell(new Spell(true) { ID = 1190 });//SpiritHealing
                        client.AddSpell(new Spell(true) { ID = 1270 });//Robot
                    }
                    else if (client.Entity.Class == 11)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 3050 });//CruelShade
                        client.AddSpell(new Spell(true) { ID = 5002 });//Poisonous Arrows
                    }
                    else if (client.Entity.Class == 21)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 5002 });//Poisonous Arrows
                        client.AddSpell(new Spell(true) { ID = 1110 });//Cyclone
                        client.AddSpell(new Spell(true) { ID = 1190 });//SpiritHealing
                        client.AddSpell(new Spell(true) { ID = 1270 });//Robot
                        client.AddSpell(new Spell(true) { ID = 5100 });//Iron Shirt
                    }

                }

                #endregion
                #region Arch-War
                if (client.Entity.FirstRebornClass == 45 && client.Entity.SecondRebornClass == 25)
                {
                    if (client.Entity.Class == 142 || client.Entity.Class == 41)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 5002 });//Poisonous Arrows
                        client.AddSpell(new Spell(true) { ID = 1020 });//Shield
                        client.AddSpell(new Spell(true) { ID = 1040 });//Roar
                        client.AddSpell(new Spell(true) { ID = 3060 });//Reflect
                    }
                    else if (client.Entity.Class == 11 || client.Entity.Class == 51 || client.Entity.Class == 61 || client.Entity.Class == 71)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 5002 });//Poisonous Arrows
                        client.AddSpell(new Spell(true) { ID = 1015 });//Accuracy
                        client.AddSpell(new Spell(true) { ID = 1040 });//Roar
                        client.AddSpell(new Spell(true) { ID = 3060 });//Reflect
                        client.AddSpell(new Spell(true) { ID = 1320 });//FlyingMoon
                    }
                    else if (client.Entity.Class == 51)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 5002 });//Poisonous Arrows
                        client.AddSpell(new Spell(true) { ID = 3060 });//Reflect
                    }
                    else if (client.Entity.Class == 21)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 5002 });//Poisonous Arrows
                        client.AddSpell(new Spell(true) { ID = 3060 });//Reflect
                    }
                    else if (client.Entity.Class == 132)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 5002 });//Poisonous Arrows
                        client.AddSpell(new Spell(true) { ID = 1020 });//Shield
                        client.AddSpell(new Spell(true) { ID = 1040 });//Roar
                        client.AddSpell(new Spell(true) { ID = 3060 });//Reflect
                        client.AddSpell(new Spell(true) { ID = 1025 });//SuperMan
                    }
                }


                #endregion
                #region Arch-Water
                if (client.Entity.FirstRebornClass == 45 && client.Entity.SecondRebornClass == 135)
                {
                    if (client.Entity.Class == 41)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 1005 });//Cure
                        client.AddSpell(new Spell(true) { ID = 1090 });//MagicShield
                        client.AddSpell(new Spell(true) { ID = 1095 });//Stigma
                        client.AddSpell(new Spell(true) { ID = 1195 });//Meditation
                        client.AddSpell(new Spell(true) { ID = 5002 });//Poisonous Arrows
                        client.AddSpell(new Spell(true) { ID = 1280 });//WaterElf
                        client.AddSpell(new Spell(true) { ID = 1350 });//DivineHare
                    }
                    else if (client.Entity.Class == 11 || client.Entity.Class == 21 || client.Entity.Class == 61)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 1005 });//Cure
                        client.AddSpell(new Spell(true) { ID = 1085 });//StarOfAccuracy
                        client.AddSpell(new Spell(true) { ID = 1090 });//MagicShield
                        client.AddSpell(new Spell(true) { ID = 1095 });//Stigma
                        client.AddSpell(new Spell(true) { ID = 1195 });//Meditation
                        client.AddSpell(new Spell(true) { ID = 5002 });//Poisonous Arrows
                        client.AddSpell(new Spell(true) { ID = 1280 });//WaterElf
                        client.AddSpell(new Spell(true) { ID = 1350 });//DivineHare
                    }
                    else if (client.Entity.Class == 142)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 1050 });//XPRevive
                        client.AddSpell(new Spell(true) { ID = 5002 });//Poisonous Arrows
                        client.AddSpell(new Spell(true) { ID = 1055 });//HealingRain 
                        client.AddSpell(new Spell(true) { ID = 1175 });//AdvancedCure
                        client.AddSpell(new Spell(true) { ID = 1280 });//WaterElf
                        client.AddSpell(new Spell(true) { ID = 1350 });//DivineHare
                    }
                    else if (client.Entity.Class == 132)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 5002 });//Poisonous Arrows
                        client.AddSpell(new Spell(true) { ID = 1280 });//WaterElf
                        client.AddSpell(new Spell(true) { ID = 1350 });//DivineHare
                        client.AddSpell(new Spell(true) { ID = 3090 });//Pervade
                    }
                    else if (client.Entity.Class == 51)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 10010 });//Poison
                        client.AddSpell(new Spell(true) { ID = 1005 });//Cure
                        client.AddSpell(new Spell(true) { ID = 1085 });//StarOfAccuracy
                        client.AddSpell(new Spell(true) { ID = 1090 });//MagicShield
                        client.AddSpell(new Spell(true) { ID = 1095 });//Stigma
                        client.AddSpell(new Spell(true) { ID = 1195 });//Meditation
                    }
                    else if (client.Entity.Class == 71)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 5002 });//Poisonous Arrows
                        client.AddSpell(new Spell(true) { ID = 1005 });//Cure
                        client.AddSpell(new Spell(true) { ID = 1085 });//StarOfAccuracy
                        client.AddSpell(new Spell(true) { ID = 1090 });//MagicShield
                        client.AddSpell(new Spell(true) { ID = 1095 });//Stigma
                        client.AddSpell(new Spell(true) { ID = 1195 });//Meditation
                    }
                }
                #endregion
                #region Arch-Nin
                if (client.Entity.FirstRebornClass == 45 && client.Entity.SecondRebornClass == 55)
                {

                    if (client.Entity.Class == 41)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 6001 });//ToxicFog
                    }
                    else if (client.Entity.Class == 11 || client.Entity.Class == 21 || client.Entity.Class == 132 || client.Entity.Class == 142 || client.Entity.Class == 61 || client.Entity.Class == 71)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 5002 });//Poisonous Arrows
                        client.AddSpell(new Spell(true) { ID = 6001 });//ToxicFog
                    }
                    else if (client.Entity.Class == 51)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 5002 });//Poisonous Arrows
                        client.AddSpell(new Spell(true) { ID = 6000 });//TwofoldBlades
                        client.AddSpell(new Spell(true) { ID = 6001 });//ToxicFog
                        client.AddSpell(new Spell(true) { ID = 6002 });//PoisonStar
                        client.AddSpell(new Spell(true) { ID = 6004 });//ArcherBane
                        client.AddSpell(new Spell(true) { ID = 6011 });//FatalStrike
                        client.AddSpell(new Spell(true) { ID = 6010 });//ShurikenVortex
                    }
                }
                #endregion
                #region Arch-Monk
                if (client.Entity.FirstRebornClass == 145 && client.Entity.SecondRebornClass == 65)
                {

                    if (client.Entity.Class == 21)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 10400 });//Serenity
                        client.AddSpell(new Spell(true) { ID = 5002 });//Poisonous Arrows
                        client.AddSpell(new Spell(true) { ID = 1000 });//Thunder
                        client.AddSpell(new Spell(true) { ID = 1001 });//Fire
                        client.AddSpell(new Spell(true) { ID = 1005 });//Cure

                    }
                    else if (client.Entity.Class == 11 || client.Entity.Class == 41 || client.Entity.Class == 132 || client.Entity.Class == 142 || client.Entity.Class == 51 || client.Entity.Class == 61 || client.Entity.Class == 71)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 5002 });//Poisonous Arrows
                        client.AddSpell(new Spell(true) { ID = 10400 });//Serenity
                    }
                }
                #endregion
                #region Arch-Pirate
                if (client.Entity.FirstRebornClass == 145 && client.Entity.SecondRebornClass == 75)
                {

                    if (client.Entity.Class == 132 || client.Entity.Class == 142 || client.Entity.Class == 41)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 11070 });//Gale Bomb
                    }
                    else if (client.Entity.Class == 11 || client.Entity.Class == 21 || client.Entity.Class == 51 || client.Entity.Class == 61 || client.Entity.Class == 71)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 11070 });//Gale Bomb
                        client.AddSpell(new Spell(true) { ID = 5002 });//Poisonous Arrows
                    }
                }
                #endregion
                #endregion
                #region Trojan2
                #region Tro-Arch
                if (client.Entity.FirstRebornClass == 15 && client.Entity.SecondRebornClass == 45)
                {
                    if (client.Entity.Class == 41)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 1190 });//SpiritHealing
                        client.AddSpell(new Spell(true) { ID = 1110 });//Cyclone
                        client.AddSpell(new Spell(true) { ID = 1270 });//Robot
                        client.AddSpell(new Spell(true) { ID = 5000 });//Freezing Arrows
                    }
                    else if (client.Entity.Class == 71)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 1190 });//SpiritHealing
                        client.AddSpell(new Spell(true) { ID = 1110 });//Cyclone
                        client.AddSpell(new Spell(true) { ID = 1270 });//Robot
                    }
                    else
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 1190 });//SpiritHealing
                        client.AddSpell(new Spell(true) { ID = 1110 });//Cyclone
                        client.AddSpell(new Spell(true) { ID = 1270 });//Robot
                        client.AddSpell(new Spell(true) { ID = 5002 });//Poisonous Arrows
                    }
                }

                #endregion
                #region Tro-Fire
                if (client.Entity.FirstRebornClass == 15 && client.Entity.SecondRebornClass == 145)
                {

                    if (client.Entity.Class == 41 || client.Entity.Class == 51 || client.Entity.Class == 61 || client.Entity.Class == 71)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 1190 });//SpiritHealing
                        client.AddSpell(new Spell(true) { ID = 1110 });//Cyclone
                        client.AddSpell(new Spell(true) { ID = 1270 });//Robot
                        client.AddSpell(new Spell(true) { ID = 1000 });//Thunder
                        client.AddSpell(new Spell(true) { ID = 1001 });//Fire
                        client.AddSpell(new Spell(true) { ID = 1005 });//Cure
                        client.AddSpell(new Spell(true) { ID = 1195 });//Meditation
                    }
                    else if (client.Entity.Class == 11 || client.Entity.Class == 21)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 1270 });//Robot
                        client.AddSpell(new Spell(true) { ID = 1000 });//Thunder
                        client.AddSpell(new Spell(true) { ID = 1001 });//Fire
                        client.AddSpell(new Spell(true) { ID = 1005 });//Cure
                        client.AddSpell(new Spell(true) { ID = 1195 });//Meditation
                    }
                    else if (client.Entity.Class == 142)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 3080 });//Dodge
                        client.AddSpell(new Spell(true) { ID = 1190 });//SpiritHealing
                        client.AddSpell(new Spell(true) { ID = 1110 });//Cyclone
                        client.AddSpell(new Spell(true) { ID = 1270 });//Robot
                    }
                    else if (client.Entity.Class == 132)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 1190 });//SpiritHealing
                        client.AddSpell(new Spell(true) { ID = 1110 });//Cyclone
                        client.AddSpell(new Spell(true) { ID = 1270 });//Robot
                        client.AddSpell(new Spell(true) { ID = 1120 });//FireCircle
                    }
                }
                #endregion
                #region Tro-Tro
                if (client.Entity.FirstRebornClass == 15 && client.Entity.SecondRebornClass == 15)
                {

                    if (client.Entity.Class == 41 || client.Entity.Class == 51 || client.Entity.Class == 61 || client.Entity.Class == 71)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 1190 });//SpiritHealing
                        client.AddSpell(new Spell(true) { ID = 1110 });//Cyclone
                        client.AddSpell(new Spell(true) { ID = 1270 });//Robot
                        client.AddSpell(new Spell(true) { ID = 3050 });//CruelShade

                    }
                    else if (client.Entity.Class == 142)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 1190 });//SpiritHealing
                        client.AddSpell(new Spell(true) { ID = 1110 });//Cyclone
                        client.AddSpell(new Spell(true) { ID = 1270 });//Robot
                        client.AddSpell(new Spell(true) { ID = 3050 });//CruelShade
                    }
                    else if (client.Entity.Class == 11)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 3050 });//Cruel Shade
                        client.AddSpell(new Spell(true) { ID = 10315 });//DragonWhirl
                    }
                    else if (client.Entity.Class == 21)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 3050 });//Cruel Shade
                        client.AddSpell(new Spell(true) { ID = 1110 });//Cyclone
                        client.AddSpell(new Spell(true) { ID = 1190 });//SpiritHealing
                        client.AddSpell(new Spell(true) { ID = 1270 });//Robot
                        client.AddSpell(new Spell(true) { ID = 5100 });//Iron Shirt

                    }
                    else if (client.Entity.Class == 132)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 3050 });//Cruel Shade
                        client.AddSpell(new Spell(true) { ID = 1270 });//Robot
                        client.AddSpell(new Spell(true) { ID = 1190 });//Spirit Healing
                        client.AddSpell(new Spell(true) { ID = 1110 });//Cyclone
                    }
                }


                #endregion
                #region Tro-War
                if (client.Entity.FirstRebornClass == 15 && client.Entity.SecondRebornClass == 25)
                {

                    if (client.Entity.Class == 41 || client.Entity.Class == 142)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 1110 });//Cyclone
                        client.AddSpell(new Spell(true) { ID = 1190 });//SpiritHealing
                        client.AddSpell(new Spell(true) { ID = 5100 });//IronShirt
                        client.AddSpell(new Spell(true) { ID = 1040 });//Roar
                        client.AddSpell(new Spell(true) { ID = 1020 });//ShieldShield
                        client.AddSpell(new Spell(true) { ID = 1270 });//Robot
                        client.AddSpell(new Spell(true) { ID = 3060 });//Reflect
                    }
                    else if (client.Entity.Class == 11 || client.Entity.Class == 51 || client.Entity.Class == 61 || client.Entity.Class == 71)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 1110 });//Cyclone
                        client.AddSpell(new Spell(true) { ID = 1190 });//SpiritHealing
                        client.AddSpell(new Spell(true) { ID = 5100 });//IronShirt
                        client.AddSpell(new Spell(true) { ID = 1270 });//Robot
                        client.AddSpell(new Spell(true) { ID = 3060 });//Reflect
                        client.AddSpell(new Spell(true) { ID = 1040 });//Roar
                        client.AddSpell(new Spell(true) { ID = 1015 });//Accuracy
                        client.AddSpell(new Spell(true) { ID = 1320 });//FlyingMoon
                    }
                    else if (client.Entity.Class == 21)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 1110 });//Cyclone
                        client.AddSpell(new Spell(true) { ID = 1190 });//SpiritHealing
                        client.AddSpell(new Spell(true) { ID = 1270 });//Robot
                        client.AddSpell(new Spell(true) { ID = 3060 });//Reflect
                    }
                    else if (client.Entity.Class == 132)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 1110 });//Cyclone
                        client.AddSpell(new Spell(true) { ID = 1190 });//SpiritHealing
                        client.AddSpell(new Spell(true) { ID = 1270 });//Robot
                        client.AddSpell(new Spell(true) { ID = 3060 });//Reflect
                        client.AddSpell(new Spell(true) { ID = 5100 });//IronShirt
                        client.AddSpell(new Spell(true) { ID = 1040 });//Roar
                        client.AddSpell(new Spell(true) { ID = 1020 });//ShieldShield
                        client.AddSpell(new Spell(true) { ID = 1025 });//SuperMan
                    }
                }
                #endregion
                #region Tro-Water
                if (client.Entity.FirstRebornClass == 15 && client.Entity.SecondRebornClass == 135)
                {

                    if (client.Entity.Class == 41)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 1110 });//Cyclone
                        client.AddSpell(new Spell(true) { ID = 1190 });//SpiritHealing
                        client.AddSpell(new Spell(true) { ID = 1270 });//Robot
                        client.AddSpell(new Spell(true) { ID = 1005 });//Cure
                        client.AddSpell(new Spell(true) { ID = 1095 });//Stigma
                        client.AddSpell(new Spell(true) { ID = 1195 });//Meditation
                        client.AddSpell(new Spell(true) { ID = 1090 });//MagicShield
                        client.AddSpell(new Spell(true) { ID = 1075 });//Invisibility

                    }
                    else if (client.Entity.Class == 142)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 1110 });//Cyclone
                        client.AddSpell(new Spell(true) { ID = 1190 });//SpiritHealing
                        client.AddSpell(new Spell(true) { ID = 1270 });//Robot
                        client.AddSpell(new Spell(true) { ID = 1050 });//XPRevive
                        client.AddSpell(new Spell(true) { ID = 1175 });//AdvancedCure
                        client.AddSpell(new Spell(true) { ID = 1075 });//Invisibility
                    }
                    else if (client.Entity.Class == 11)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 1270 });//Robot
                        client.AddSpell(new Spell(true) { ID = 1005 });//Cure
                        client.AddSpell(new Spell(true) { ID = 1195 });//Meditation
                        client.AddSpell(new Spell(true) { ID = 1095 });//Stigma
                        client.AddSpell(new Spell(true) { ID = 1090 });//MagicShield
                        client.AddSpell(new Spell(true) { ID = 1085 });//StarOfAccuracy
                    }
                    else if (client.Entity.Class == 21 || client.Entity.Class == 51 || client.Entity.Class == 71)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 1110 });//Cyclone
                        client.AddSpell(new Spell(true) { ID = 1190 });//SpiritHealing
                        client.AddSpell(new Spell(true) { ID = 1270 });//Robot
                        client.AddSpell(new Spell(true) { ID = 1005 });//Cure
                        client.AddSpell(new Spell(true) { ID = 1085 });//StarOfAccuracy
                        client.AddSpell(new Spell(true) { ID = 1095 });//Stigma
                        client.AddSpell(new Spell(true) { ID = 1195 });//Meditation
                        client.AddSpell(new Spell(true) { ID = 1090 });//MagicShield
                    }
                    else if (client.Entity.Class == 132)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 1110 });//Cyclone
                        client.AddSpell(new Spell(true) { ID = 1190 });//SpiritHealing
                        client.AddSpell(new Spell(true) { ID = 1270 });//Robot
                        client.AddSpell(new Spell(true) { ID = 3090 });//Pervade
                    }
                    else if (client.Entity.Class == 61)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 1110 });//Cyclone
                        client.AddSpell(new Spell(true) { ID = 1190 });//SpiritHealing
                        client.AddSpell(new Spell(true) { ID = 1270 });//Robot
                        client.AddSpell(new Spell(true) { ID = 1005 });//Cure
                        client.AddSpell(new Spell(true) { ID = 1085 });//StarOfAccuracy
                        client.AddSpell(new Spell(true) { ID = 1095 });//Stigma
                        client.AddSpell(new Spell(true) { ID = 1195 });//Meditation
                        client.AddSpell(new Spell(true) { ID = 1090 });//MagicShield
                        client.AddSpell(new Spell(true) { ID = 1350 });//DivineHare
                        client.AddSpell(new Spell(true) { ID = 1280 });//Water Elf
                    }
                }
                #endregion
                #region Tro-Nin
                if (client.Entity.FirstRebornClass == 15 && client.Entity.SecondRebornClass == 55)
                {

                    if (client.Entity.Class == 51)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 1110 });//Cyclone
                        client.AddSpell(new Spell(true) { ID = 1190 });//SpiritHealing
                        client.AddSpell(new Spell(true) { ID = 1270 });//Robot
                        client.AddSpell(new Spell(true) { ID = 6000 });//TwofoldBlades
                        client.AddSpell(new Spell(true) { ID = 6001 });//ToxicFog
                        client.AddSpell(new Spell(true) { ID = 6002 });//PoisonStar
                        client.AddSpell(new Spell(true) { ID = 6004 });//ArcherBane
                        client.AddSpell(new Spell(true) { ID = 6011 });//FatalStrike
                        client.AddSpell(new Spell(true) { ID = 6010 });//ShurikenVortex
                    }
                    else
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 1110 });//Cyclone
                        client.AddSpell(new Spell(true) { ID = 1190 });//SpiritHealing
                        client.AddSpell(new Spell(true) { ID = 1270 });//Robot
                        client.AddSpell(new Spell(true) { ID = 6001 });//ToxicFog
                    }
                }
                #endregion
                #region Tro-Monk
                if (client.Entity.FirstRebornClass == 15 && client.Entity.SecondRebornClass == 65)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                    client.AddSpell(new Spell(true) { ID = 1110 });//Cyclone
                    client.AddSpell(new Spell(true) { ID = 1190 });//SpiritHealing
                    client.AddSpell(new Spell(true) { ID = 1270 });//Robot
                    client.AddSpell(new Spell(true) { ID = 10400 });//Serenity
                }
                #endregion
                #region Tro-Pirate
                if (client.Entity.FirstRebornClass == 15 && client.Entity.SecondRebornClass == 75)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                    client.AddSpell(new Spell(true) { ID = 1110 });//Cyclone
                    client.AddSpell(new Spell(true) { ID = 1190 });//SpiritHealing
                    client.AddSpell(new Spell(true) { ID = 1270 });//Robot
                    client.AddSpell(new Spell(true) { ID = 11070 });//Gale Bomb
                }
                #endregion
                #endregion
                #region Ninja2
                #region Nin-Arch
                if (client.Entity.FirstRebornClass == 55 && client.Entity.SecondRebornClass == 45)
                {

                    if (client.Entity.Class == 41)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 6001 });//Toxic Fog
                        client.AddSpell(new Spell(true) { ID = 5000 });//Freezing Arrow
                    }
                    else if (client.Entity.Class == 51)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 5002 });//Poisonous Arrows
                    }
                    else if (client.Entity.Class == 11 || client.Entity.Class == 21 || client.Entity.Class == 142 || client.Entity.Class == 132 || client.Entity.Class == 61 || client.Entity.Class == 71)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 6001 });//Toxic Fog
                        client.AddSpell(new Spell(true) { ID = 5002 });//Poisonous Arrows
                    }
                }
                #endregion
                #region Nin-Fire
                {

                    if (client.Entity.FirstRebornClass == 55 && client.Entity.SecondRebornClass == 145)
                    {

                        if (client.Entity.Class == 11 || client.Entity.Class == 21 || client.Entity.Class == 41 || client.Entity.Class == 51 || client.Entity.Class == 61 || client.Entity.Class == 71)
                        {
                            client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                            client.AddSpell(new Spell(true) { ID = 6001 });//Toxic Fog
                            client.AddSpell(new Spell(true) { ID = 1000 });//Thunder
                            client.AddSpell(new Spell(true) { ID = 1001 });//Fire
                            client.AddSpell(new Spell(true) { ID = 1005 });//Cure
                            client.AddSpell(new Spell(true) { ID = 1195 });//Meditation
                        }
                        else if (client.Entity.Class == 142)
                        {
                            client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                            client.AddSpell(new Spell(true) { ID = 6001 });//Toxic Fog
                            client.AddSpell(new Spell(true) { ID = 3080 });//Dodge
                            client.AddSpell(new Spell(true) { ID = 1000 });//Thunder
                        }
                        else if (client.Entity.Class == 132)
                        {
                            client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                            client.AddSpell(new Spell(true) { ID = 1120 });//FireCircle
                            client.AddSpell(new Spell(true) { ID = 6001 });//Toxic Fog
                        }
                    }
                }
                #endregion
                #region Nin-Tro
                if (client.Entity.FirstRebornClass == 55 && client.Entity.SecondRebornClass == 15)
                {

                    if (client.Entity.Class == 41 || client.Entity.Class == 51 || client.Entity.Class == 132 || client.Entity.Class == 142 || client.Entity.Class == 61 || client.Entity.Class == 71)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 1110 });//Cyclone
                        client.AddSpell(new Spell(true) { ID = 1190 });//SpiritHealing
                        client.AddSpell(new Spell(true) { ID = 1270 });//Robot
                        client.AddSpell(new Spell(true) { ID = 6001 });//Toxic Fog
                    }
                    else if (client.Entity.Class == 11)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 6001 });//Toxic Fog
                    }
                    else if (client.Entity.Class == 21)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 1110 });//Cyclone
                        client.AddSpell(new Spell(true) { ID = 1190 });//SpiritHealing
                        client.AddSpell(new Spell(true) { ID = 1270 });//Robot
                        client.AddSpell(new Spell(true) { ID = 6001 });//Toxic Fog
                        client.AddSpell(new Spell(true) { ID = 5100 });//IronShirt
                    }

                }
                #endregion
                #region Nin-War
                if (client.Entity.FirstRebornClass == 55 && client.Entity.SecondRebornClass == 25)
                {

                    if (client.Entity.Class == 41 || client.Entity.Class == 142)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 6001 });//Toxic Fog
                        client.AddSpell(new Spell(true) { ID = 1020 });//Shield
                        client.AddSpell(new Spell(true) { ID = 3060 });//Reflect
                        client.AddSpell(new Spell(true) { ID = 1040 });//Roar
                    }
                    else if (client.Entity.Class == 11 || client.Entity.Class == 51 || client.Entity.Class == 61 || client.Entity.Class == 71)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 6001 });//Toxic Fog
                        client.AddSpell(new Spell(true) { ID = 1015 });//Accuracy
                        client.AddSpell(new Spell(true) { ID = 3060 });//Reflect
                        client.AddSpell(new Spell(true) { ID = 1040 });//Roar
                        client.AddSpell(new Spell(true) { ID = 1320 });//FlyingMoon
                    }
                    else if (client.Entity.Class == 21)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 6001 });//Toxic Fog
                        client.AddSpell(new Spell(true) { ID = 3060 });//Reflect

                    }
                    else if (client.Entity.Class == 132)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 6001 });//Toxic Fog
                        client.AddSpell(new Spell(true) { ID = 1020 });//ShieldShield
                        client.AddSpell(new Spell(true) { ID = 1025 });//SuperMan
                        client.AddSpell(new Spell(true) { ID = 3060 });//Reflect
                        client.AddSpell(new Spell(true) { ID = 1040 });//Roar
                    }
                }
                #endregion
                #region Nin-Water
                if (client.Entity.FirstRebornClass == 55 && client.Entity.SecondRebornClass == 135)
                {

                    if (client.Entity.Class == 41)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 6001 });//Toxic Fog
                        client.AddSpell(new Spell(true) { ID = 1005 });//Cure
                        client.AddSpell(new Spell(true) { ID = 1095 });//Stigma
                        client.AddSpell(new Spell(true) { ID = 1195 });//Meditation
                        client.AddSpell(new Spell(true) { ID = 1090 });//MagicShield
                        client.AddSpell(new Spell(true) { ID = 1075 });//Invisibility
                    }
                    else if (client.Entity.Class == 142)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 6001 });//Toxic Fog
                        client.AddSpell(new Spell(true) { ID = 1050 });//XPRevive
                        client.AddSpell(new Spell(true) { ID = 1175 });//AdvancedCure
                        client.AddSpell(new Spell(true) { ID = 1075 });//Invisibility
                        client.AddSpell(new Spell(true) { ID = 1055 });//HealingRain
                    }
                    else if (client.Entity.Class == 11 || client.Entity.Class == 21 || client.Entity.Class == 51 || client.Entity.Class == 61 || client.Entity.Class == 71)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 6001 });//Toxic Fog
                        client.AddSpell(new Spell(true) { ID = 1005 });//Cure
                        client.AddSpell(new Spell(true) { ID = 1085 });//StarOfAccuracy
                        client.AddSpell(new Spell(true) { ID = 1090 });//MagicShield
                        client.AddSpell(new Spell(true) { ID = 1095 });//Stigma
                        client.AddSpell(new Spell(true) { ID = 1195 });//Meditation
                    }
                    else if (client.Entity.Class == 132)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 6001 });//Toxic Fog
                        client.AddSpell(new Spell(true) { ID = 3090 });//Pervade
                    }
                }
                #endregion
                #region Nin-Nin
                if (client.Entity.FirstRebornClass == 55 && client.Entity.SecondRebornClass == 55)
                {

                    if (client.Entity.Class == 51)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 6000 });//
                        client.AddSpell(new Spell(true) { ID = 6001 });//
                        client.AddSpell(new Spell(true) { ID = 6002 });//
                        client.AddSpell(new Spell(true) { ID = 6003 });//
                        client.AddSpell(new Spell(true) { ID = 6004 });//
                        client.AddSpell(new Spell(true) { ID = 6010 });//
                        client.AddSpell(new Spell(true) { ID = 6011 });//
                    }
                    else
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 6001 });//Toxic Fog
                    }
                }
                #endregion
                #region Nin-Monk
                if (client.Entity.FirstRebornClass == 55 && client.Entity.SecondRebornClass == 65)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                    client.AddSpell(new Spell(true) { ID = 10400 });//Serenity
                    client.AddSpell(new Spell(true) { ID = 6001 });//ToxicFog
                }
                #endregion
                #region Nin-Pirate
                if (client.Entity.FirstRebornClass == 55 && client.Entity.SecondRebornClass == 75)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                    client.AddSpell(new Spell(true) { ID = 11070 });//Gale Bomb
                    client.AddSpell(new Spell(true) { ID = 6001 });//ToxicFog
                }
                #endregion
                #endregion
                #region Fire2
                #region Fire-Arch
                if (client.Entity.FirstRebornClass == 145 && client.Entity.SecondRebornClass == 45)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                    client.AddSpell(new Spell(true) { ID = 1000 });//Thunder
                    client.AddSpell(new Spell(true) { ID = 1001 });//Fire
                    client.AddSpell(new Spell(true) { ID = 1005 });//Cure
                    client.AddSpell(new Spell(true) { ID = 1195 });//Meditation
                    client.AddSpell(new Spell(true) { ID = 5002 });//PoisonousArrows
                }
                #endregion
                #region Fire-Fire
                if (client.Entity.FirstRebornClass == 145 && client.Entity.SecondRebornClass == 145)
                {

                    if (client.Entity.Class == 41 || client.Entity.Class == 11 || client.Entity.Class == 51 || client.Entity.Class == 21 || client.Entity.Class == 71)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 3080 });//Dodge
                        client.AddSpell(new Spell(true) { ID = 1000 });//
                        client.AddSpell(new Spell(true) { ID = 1001 });//
                        client.AddSpell(new Spell(true) { ID = 1005 });//
                        client.AddSpell(new Spell(true) { ID = 1195 });//
                    }
                    else if (client.Entity.Class == 142)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 10310 });//Heaven Blade 
                        client.AddSpell(new Spell(true) { ID = 3080 });//Dodge
                    }
                    else if (client.Entity.Class == 132)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 3080 });//
                        client.AddSpell(new Spell(true) { ID = 1120 });//FireCircle
                    }
                    else if (client.Entity.Class == 61)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 1350 });//DivineHare
                        client.AddSpell(new Spell(true) { ID = 1280 });//Water Elf
                    }
                }
                #endregion
                #region Fire-Tro
                if (client.Entity.FirstRebornClass == 145 && client.Entity.SecondRebornClass == 15)
                {

                    if (client.Entity.Class == 41 || client.Entity.Class == 142 || client.Entity.Class == 132 || client.Entity.Class == 51 || client.Entity.Class == 61)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 1000 });//
                        client.AddSpell(new Spell(true) { ID = 1001 });//
                        client.AddSpell(new Spell(true) { ID = 1005 });//
                        client.AddSpell(new Spell(true) { ID = 1195 });//
                        client.AddSpell(new Spell(true) { ID = 1270 });//
                        client.AddSpell(new Spell(true) { ID = 1110 });//
                        client.AddSpell(new Spell(true) { ID = 1190 });//
                    }
                    else if (client.Entity.Class == 71)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 1000 });//
                        client.AddSpell(new Spell(true) { ID = 1001 });//
                        client.AddSpell(new Spell(true) { ID = 1005 });//
                        client.AddSpell(new Spell(true) { ID = 1195 });//
                        client.AddSpell(new Spell(true) { ID = 1110 });//
                    }
                    else if (client.Entity.Class == 21)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 1000 });//
                        client.AddSpell(new Spell(true) { ID = 1001 });//
                        client.AddSpell(new Spell(true) { ID = 1005 });//
                        client.AddSpell(new Spell(true) { ID = 1195 });//
                        client.AddSpell(new Spell(true) { ID = 1270 });//
                        client.AddSpell(new Spell(true) { ID = 5100 });//
                        client.AddSpell(new Spell(true) { ID = 1110 });//
                        client.AddSpell(new Spell(true) { ID = 1190 });//
                    }
                    else if (client.Entity.Class == 11)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 1000 });//
                        client.AddSpell(new Spell(true) { ID = 1001 });//
                        client.AddSpell(new Spell(true) { ID = 1005 });//
                        client.AddSpell(new Spell(true) { ID = 1195 });//
                        client.AddSpell(new Spell(true) { ID = 3050 });//
                    }
                }
                #endregion
                #region Fire-War
                if (client.Entity.FirstRebornClass == 145 && client.Entity.SecondRebornClass == 25)
                {

                    if (client.Entity.Class == 41)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 1000 });//
                        client.AddSpell(new Spell(true) { ID = 1001 });//
                        client.AddSpell(new Spell(true) { ID = 1005 });//
                        client.AddSpell(new Spell(true) { ID = 1195 });//
                        client.AddSpell(new Spell(true) { ID = 1020 });//
                        client.AddSpell(new Spell(true) { ID = 1040 });//
                        client.AddSpell(new Spell(true) { ID = 3060 });//
                    }
                    else if (client.Entity.Class == 142)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 1020 });//
                        client.AddSpell(new Spell(true) { ID = 1040 });//
                        client.AddSpell(new Spell(true) { ID = 3060 });//
                    }
                    else if (client.Entity.Class == 11 || client.Entity.Class == 51 || client.Entity.Class == 61 || client.Entity.Class == 71)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 1000 });//
                        client.AddSpell(new Spell(true) { ID = 1001 });//
                        client.AddSpell(new Spell(true) { ID = 1005 });//
                        client.AddSpell(new Spell(true) { ID = 1195 });//
                        client.AddSpell(new Spell(true) { ID = 1015 });//
                        client.AddSpell(new Spell(true) { ID = 1040 });//
                        client.AddSpell(new Spell(true) { ID = 1320 });//
                        client.AddSpell(new Spell(true) { ID = 3060 });//
                    }
                    else if (client.Entity.Class == 21)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 1000 });//
                        client.AddSpell(new Spell(true) { ID = 1001 });//
                        client.AddSpell(new Spell(true) { ID = 1005 });//
                        client.AddSpell(new Spell(true) { ID = 1195 });//
                        client.AddSpell(new Spell(true) { ID = 3060 });//
                    }
                    else if (client.Entity.Class == 132)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 1000 });//
                        client.AddSpell(new Spell(true) { ID = 1001 });//
                        client.AddSpell(new Spell(true) { ID = 1005 });//
                        client.AddSpell(new Spell(true) { ID = 1195 });//
                        client.AddSpell(new Spell(true) { ID = 3060 });//
                        client.AddSpell(new Spell(true) { ID = 1025 });//
                        client.AddSpell(new Spell(true) { ID = 1020 });//
                        client.AddSpell(new Spell(true) { ID = 1040 });//
                    }
                }
                #endregion
                #region Fire-Water
                if (client.Entity.FirstRebornClass == 145 && client.Entity.SecondRebornClass == 135)
                {

                    if (client.Entity.Class == 41)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 1005 });//
                        client.AddSpell(new Spell(true) { ID = 1195 });//
                        client.AddSpell(new Spell(true) { ID = 1095 });//
                        client.AddSpell(new Spell(true) { ID = 1090 });//
                        client.AddSpell(new Spell(true) { ID = 1075 });//Invisibility
                    }
                    else if (client.Entity.Class == 142)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 1050 });//
                        client.AddSpell(new Spell(true) { ID = 1055 });//
                        client.AddSpell(new Spell(true) { ID = 1175 });//
                        client.AddSpell(new Spell(true) { ID = 1075 });//Invisibility
                    }
                    else if (client.Entity.Class == 11 || client.Entity.Class == 21 || client.Entity.Class == 51)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 1005 });//
                        client.AddSpell(new Spell(true) { ID = 1085 });//
                        client.AddSpell(new Spell(true) { ID = 1090 });//
                        client.AddSpell(new Spell(true) { ID = 1095 });//
                        client.AddSpell(new Spell(true) { ID = 1195 });//
                    }
                    else if (client.Entity.Class == 132)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 3090 });//
                        client.AddSpell(new Spell(true) { ID = 1120 });//
                    }
                    else if (client.Entity.Class == 61 || client.Entity.Class == 71)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 1005 });//
                        client.AddSpell(new Spell(true) { ID = 1085 });//
                        client.AddSpell(new Spell(true) { ID = 1090 });//
                        client.AddSpell(new Spell(true) { ID = 1095 });//
                        client.AddSpell(new Spell(true) { ID = 1195 });//
                        client.AddSpell(new Spell(true) { ID = 1350 });//DivineHare
                        client.AddSpell(new Spell(true) { ID = 1280 });//Water Elf
                    }
                }
                #endregion
                #region Fire-Nin
                if (client.Entity.FirstRebornClass == 145 && client.Entity.SecondRebornClass == 55)
                {

                    if (client.Entity.Class == 51 || client.Entity.Class == 61 || client.Entity.Class == 71)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 3080 });//
                        client.AddSpell(new Spell(true) { ID = 6001 });//
                        client.AddSpell(new Spell(true) { ID = 1000 });//
                        client.AddSpell(new Spell(true) { ID = 1001 });//
                        client.AddSpell(new Spell(true) { ID = 1005 });//
                        client.AddSpell(new Spell(true) { ID = 1195 });//
                    }
                    else
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 6001 });//
                        client.AddSpell(new Spell(true) { ID = 1000 });//
                        client.AddSpell(new Spell(true) { ID = 1001 });//
                        client.AddSpell(new Spell(true) { ID = 1005 });//
                        client.AddSpell(new Spell(true) { ID = 1195 });//
                    }
                }
                #endregion
                #region Fire-Monk
                if (client.Entity.FirstRebornClass == 145 && client.Entity.SecondRebornClass == 65)
                {

                    if (client.Entity.Class == 11 || client.Entity.Class == 21 || client.Entity.Class == 41 || client.Entity.Class == 132 || client.Entity.Class == 142)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 1000 });//Thunder
                        client.AddSpell(new Spell(true) { ID = 1000 });//Fire
                        client.AddSpell(new Spell(true) { ID = 1005 });//Cure
                        client.AddSpell(new Spell(true) { ID = 1195 });//Meditation
                        client.AddSpell(new Spell(true) { ID = 10400 });//Serenity
                    }
                    else if (client.Entity.Class == 51 || client.Entity.Class == 61 || client.Entity.Class == 71)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 1000 });//Thunder
                        client.AddSpell(new Spell(true) { ID = 1000 });//Fire
                        client.AddSpell(new Spell(true) { ID = 1005 });//Cure
                        client.AddSpell(new Spell(true) { ID = 1195 });//Meditation
                        client.AddSpell(new Spell(true) { ID = 10400 });//Serenity
                        client.AddSpell(new Spell(true) { ID = 3080 });//Dodge
                    }
                }
                #endregion
                #region Fire-Pirate
                if (client.Entity.FirstRebornClass == 145 && client.Entity.SecondRebornClass == 75)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                    client.AddSpell(new Spell(true) { ID = 1000 });//Thunder
                    client.AddSpell(new Spell(true) { ID = 1000 });//Fire
                    client.AddSpell(new Spell(true) { ID = 1005 });//Cure
                    client.AddSpell(new Spell(true) { ID = 1195 });//Meditation
                    client.AddSpell(new Spell(true) { ID = 11070 });//Gale Bomb

                }
                #endregion
                #endregion
                #region War2
                #region War-Arch
                if (client.Entity.FirstRebornClass == 25 && client.Entity.SecondRebornClass == 45)
                {

                    if (client.Entity.Class == 41)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 5000 });//Freezing Arrows
                    }
                    else if (client.Entity.Class == 132 || client.Entity.Class == 142)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 1020 });
                        client.AddSpell(new Spell(true) { ID = 1040 });
                        client.AddSpell(new Spell(true) { ID = 5002 });//Poisonous Arrows
                    }
                    else if (client.Entity.Class == 11 || client.Entity.Class == 51 || client.Entity.Class == 61 || client.Entity.Class == 71)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 1040 });
                        client.AddSpell(new Spell(true) { ID = 5002 });
                    }
                    else if (client.Entity.Class == 21)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 5002 });
                    }
                }
                #endregion
                #region War-Fire
                if (client.Entity.FirstRebornClass == 25 && client.Entity.SecondRebornClass == 145)
                {

                    if (client.Entity.Class == 41)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 1020 });
                        client.AddSpell(new Spell(true) { ID = 1040 });
                        client.AddSpell(new Spell(true) { ID = 1000 });
                        client.AddSpell(new Spell(true) { ID = 1001 });
                        client.AddSpell(new Spell(true) { ID = 1005 });
                        client.AddSpell(new Spell(true) { ID = 1195 });
                    }
                    else if (client.Entity.Class == 142)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 1020 });
                        client.AddSpell(new Spell(true) { ID = 1040 });
                        client.AddSpell(new Spell(true) { ID = 3080 });
                    }
                    else if (client.Entity.Class == 11 || client.Entity.Class == 51 || client.Entity.Class == 61 || client.Entity.Class == 71)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 1040 });
                        client.AddSpell(new Spell(true) { ID = 1000 });
                        client.AddSpell(new Spell(true) { ID = 1001 });
                        client.AddSpell(new Spell(true) { ID = 1005 });
                        client.AddSpell(new Spell(true) { ID = 1195 });
                    }
                    else if (client.Entity.Class == 25)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 1000 });
                        client.AddSpell(new Spell(true) { ID = 1001 });
                        client.AddSpell(new Spell(true) { ID = 1005 });
                        client.AddSpell(new Spell(true) { ID = 1195 });
                    }
                    else if (client.Entity.Class == 132)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 1020 });
                        client.AddSpell(new Spell(true) { ID = 1040 });
                        client.AddSpell(new Spell(true) { ID = 1120 });
                    }
                }
                #endregion
                #region War-Tro
                if (client.Entity.FirstRebornClass == 25 && client.Entity.SecondRebornClass == 15)
                {

                    if (client.Entity.Class == 41 || client.Entity.Class == 142 || client.Entity.Class == 132 || client.Entity.Class == 51 || client.Entity.Class == 61 || client.Entity.Class == 71)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 1320 });
                        client.AddSpell(new Spell(true) { ID = 1040 });
                        client.AddSpell(new Spell(true) { ID = 1110 });
                        client.AddSpell(new Spell(true) { ID = 1190 });
                        client.AddSpell(new Spell(true) { ID = 1270 });
                    }
                    else if (client.Entity.Class == 11)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 1320 });
                        client.AddSpell(new Spell(true) { ID = 1040 });
                        client.AddSpell(new Spell(true) { ID = 3050 });
                    }
                    else if (client.Entity.Class == 21)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 5100 });
                        client.AddSpell(new Spell(true) { ID = 1110 });
                        client.AddSpell(new Spell(true) { ID = 1190 });
                        client.AddSpell(new Spell(true) { ID = 1270 });
                    }
                }
                #endregion
                #region War-War
                if (client.Entity.FirstRebornClass == 25 && client.Entity.SecondRebornClass == 25)
                {

                    if (client.Entity.Class == 41 || client.Entity.Class == 142)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 1040 });
                        client.AddSpell(new Spell(true) { ID = 1320 });
                        client.AddSpell(new Spell(true) { ID = 3060 });
                    }
                    else if (client.Entity.Class == 11 || client.Entity.Class == 51 || client.Entity.Class == 61 || client.Entity.Class == 71)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 1040 });
                        client.AddSpell(new Spell(true) { ID = 1020 });
                        client.AddSpell(new Spell(true) { ID = 3060 });
                        client.AddSpell(new Spell(true) { ID = 1015 });
                    }
                    else if (client.Entity.Class == 21)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 10311 });//Perseverance
                        client.AddSpell(new Spell(true) { ID = 3060 });
                    }
                    else if (client.Entity.Class == 132)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 1025 });
                        client.AddSpell(new Spell(true) { ID = 1040 });
                        client.AddSpell(new Spell(true) { ID = 1320 });
                        client.AddSpell(new Spell(true) { ID = 3060 });
                    }
                }
                #endregion
                #region War-Water
                if (client.Entity.FirstRebornClass == 25 && client.Entity.SecondRebornClass == 135)
                {

                    if (client.Entity.Class == 41)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 1020 });
                        client.AddSpell(new Spell(true) { ID = 1040 });
                        client.AddSpell(new Spell(true) { ID = 1005 });
                        client.AddSpell(new Spell(true) { ID = 1075 });//Invisibility
                        client.AddSpell(new Spell(true) { ID = 1090 });
                        client.AddSpell(new Spell(true) { ID = 1095 });
                        client.AddSpell(new Spell(true) { ID = 1195 });
                        client.AddSpell(new Spell(true) { ID = 1280 });
                        client.AddSpell(new Spell(true) { ID = 1350 });
                    }
                    if (client.Entity.Class == 142)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 1020 });
                        client.AddSpell(new Spell(true) { ID = 1040 });
                        client.AddSpell(new Spell(true) { ID = 1005 });
                        client.AddSpell(new Spell(true) { ID = 1175 });
                        client.AddSpell(new Spell(true) { ID = 1050 });
                        client.AddSpell(new Spell(true) { ID = 1055 });
                        client.AddSpell(new Spell(true) { ID = 1280 });
                        client.AddSpell(new Spell(true) { ID = 1350 });
                        client.AddSpell(new Spell(true) { ID = 1075 });//Invisibility
                    }
                    else if (client.Entity.Class == 11)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 1005 });
                        client.AddSpell(new Spell(true) { ID = 1040 });
                        client.AddSpell(new Spell(true) { ID = 1085 });
                        client.AddSpell(new Spell(true) { ID = 1090 });
                        client.AddSpell(new Spell(true) { ID = 1095 });
                        client.AddSpell(new Spell(true) { ID = 1195 });
                        client.AddSpell(new Spell(true) { ID = 1280 });
                        client.AddSpell(new Spell(true) { ID = 1350 });
                    }
                    else if (client.Entity.Class == 21)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 1005 });
                        client.AddSpell(new Spell(true) { ID = 1085 });
                        client.AddSpell(new Spell(true) { ID = 1090 });
                        client.AddSpell(new Spell(true) { ID = 1095 });
                        client.AddSpell(new Spell(true) { ID = 1195 });
                        client.AddSpell(new Spell(true) { ID = 1280 });
                        client.AddSpell(new Spell(true) { ID = 1350 });
                    }
                    else if (client.Entity.Class == 132)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 1020 });
                        client.AddSpell(new Spell(true) { ID = 1025 });
                        client.AddSpell(new Spell(true) { ID = 1040 });
                        client.AddSpell(new Spell(true) { ID = 3090 });
                        client.AddSpell(new Spell(true) { ID = 1280 });
                        client.AddSpell(new Spell(true) { ID = 1350 });
                    }
                    else if (client.Entity.Class == 51 || client.Entity.Class == 71)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 1005 });
                        client.AddSpell(new Spell(true) { ID = 1040 });
                        client.AddSpell(new Spell(true) { ID = 1085 });
                        client.AddSpell(new Spell(true) { ID = 1090 });
                        client.AddSpell(new Spell(true) { ID = 1095 });
                        client.AddSpell(new Spell(true) { ID = 1195 });
                    }
                    else if (client.Entity.Class == 61)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 1005 });
                        client.AddSpell(new Spell(true) { ID = 1040 });
                        client.AddSpell(new Spell(true) { ID = 1085 });
                        client.AddSpell(new Spell(true) { ID = 1090 });
                        client.AddSpell(new Spell(true) { ID = 1095 });
                        client.AddSpell(new Spell(true) { ID = 1195 });
                        client.AddSpell(new Spell(true) { ID = 1350 });//DivineHare
                        client.AddSpell(new Spell(true) { ID = 1280 });//Water Elf
                    }
                }
                #endregion
                #region War-Nin
                if (client.Entity.FirstRebornClass == 25 && client.Entity.SecondRebornClass == 55)
                {

                    if (client.Entity.Class == 51)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 1320 });
                        client.AddSpell(new Spell(true) { ID = 1040 });

                    }
                    else
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 1320 });
                        client.AddSpell(new Spell(true) { ID = 1040 });
                        client.AddSpell(new Spell(true) { ID = 6001 });

                    }
                }
                #endregion
                #region War-Monk
                if (client.Entity.FirstRebornClass == 25 && client.Entity.SecondRebornClass == 65)
                {

                    if (client.Entity.Class == 21 || client.Entity.Class == 41 || client.Entity.Class == 51 || client.Entity.Class == 61 || client.Entity.Class == 142 || client.Entity.Class == 71)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 1040 });//Roar
                        client.AddSpell(new Spell(true) { ID = 1320 });//FlyingMoon
                        client.AddSpell(new Spell(true) { ID = 10400 });//Serenity
                    }
                    else if (client.Entity.Class == 11)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 1040 });//Roar
                        client.AddSpell(new Spell(true) { ID = 1320 });//FlyingMoon
                        client.AddSpell(new Spell(true) { ID = 10400 });//Serenity
                        client.AddSpell(new Spell(true) { ID = 1110 });//Cyclone
                    }
                    else if (client.Entity.Class == 132)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 1040 });//Roar
                        client.AddSpell(new Spell(true) { ID = 1320 });//FlyingMoon
                        client.AddSpell(new Spell(true) { ID = 10400 });//Serenity
                        client.AddSpell(new Spell(true) { ID = 3080 });// Dodge
                    }
                }
                #endregion
                #region War-Pirate
                if (client.Entity.FirstRebornClass == 25 && client.Entity.SecondRebornClass == 75)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                    client.AddSpell(new Spell(true) { ID = 1040 });//Roar
                    client.AddSpell(new Spell(true) { ID = 1320 });//FlyingMoon
                    client.AddSpell(new Spell(true) { ID = 11070 });//Gale Bomb
                    client.AddSpell(new Spell(true) { ID = 3060 });// Reflec

                }
                #endregion
                #endregion
                #region Water2
                #region Water-Arch
                if (client.Entity.FirstRebornClass == 135 && client.Entity.SecondRebornClass == 45)
                {

                    if (client.Entity.Class == 41)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 1005 });
                        client.AddSpell(new Spell(true) { ID = 1075 });//Invisibility
                        client.AddSpell(new Spell(true) { ID = 1090 });
                        client.AddSpell(new Spell(true) { ID = 1095 });
                        client.AddSpell(new Spell(true) { ID = 1195 });
                        client.AddSpell(new Spell(true) { ID = 5000 });
                        client.AddSpell(new Spell(true) { ID = 5002 });
                    }
                    else if (client.Entity.Class == 61)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 1005 });
                        client.AddSpell(new Spell(true) { ID = 1075 });//Invisibility
                        client.AddSpell(new Spell(true) { ID = 1090 });
                        client.AddSpell(new Spell(true) { ID = 1095 });
                        client.AddSpell(new Spell(true) { ID = 1195 });
                        client.AddSpell(new Spell(true) { ID = 5000 });
                        client.AddSpell(new Spell(true) { ID = 5002 });
                        client.AddSpell(new Spell(true) { ID = 1350 });//DivineHare
                        client.AddSpell(new Spell(true) { ID = 1280 });//Water Elf
                    }
                    else if (client.Entity.Class == 71)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 1005 });
                        client.AddSpell(new Spell(true) { ID = 1075 });//Invisibility
                        client.AddSpell(new Spell(true) { ID = 1090 });
                        client.AddSpell(new Spell(true) { ID = 1095 });
                        client.AddSpell(new Spell(true) { ID = 1085 });//Star Of Accuracy
                        client.AddSpell(new Spell(true) { ID = 5000 });
                        client.AddSpell(new Spell(true) { ID = 5002 });
                        client.AddSpell(new Spell(true) { ID = 1350 });//DivineHare
                        client.AddSpell(new Spell(true) { ID = 1280 });//Water Elf
                    }
                    else
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 1005 });
                        client.AddSpell(new Spell(true) { ID = 1075 });//Invisibility
                        client.AddSpell(new Spell(true) { ID = 1090 });
                        client.AddSpell(new Spell(true) { ID = 1095 });
                        client.AddSpell(new Spell(true) { ID = 1195 });
                        client.AddSpell(new Spell(true) { ID = 5000 });
                        client.AddSpell(new Spell(true) { ID = 5002 });
                    }
                }
                #endregion
                #region Water-Fire
                if (client.Entity.FirstRebornClass == 135 && client.Entity.SecondRebornClass == 145)
                {

                    if (client.Entity.Class == 11 || client.Entity.Class == 21 | client.Entity.Class == 41 || client.Entity.Class == 51 || client.Entity.Class == 71)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 1050 });
                        client.AddSpell(new Spell(true) { ID = 1175 });
                        client.AddSpell(new Spell(true) { ID = 1075 });//Invisibility
                        client.AddSpell(new Spell(true) { ID = 1055 });
                        client.AddSpell(new Spell(true) { ID = 1000 });
                        client.AddSpell(new Spell(true) { ID = 1001 });
                        client.AddSpell(new Spell(true) { ID = 1005 });
                        client.AddSpell(new Spell(true) { ID = 1195 });
                    }
                    else if (client.Entity.Class == 61)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 1050 });
                        client.AddSpell(new Spell(true) { ID = 1175 });
                        client.AddSpell(new Spell(true) { ID = 1075 });//Invisibility
                        client.AddSpell(new Spell(true) { ID = 1055 });
                        client.AddSpell(new Spell(true) { ID = 1000 });
                        client.AddSpell(new Spell(true) { ID = 1001 });
                        client.AddSpell(new Spell(true) { ID = 1005 });
                        client.AddSpell(new Spell(true) { ID = 1195 });
                        client.AddSpell(new Spell(true) { ID = 1350 });//DivineHare
                        client.AddSpell(new Spell(true) { ID = 1280 });//Water Elf
                    }
                    else if (client.Entity.Class == 132)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 1050 });
                        client.AddSpell(new Spell(true) { ID = 1175 });
                        client.AddSpell(new Spell(true) { ID = 1075 });//Invisibility
                        client.AddSpell(new Spell(true) { ID = 1055 });
                        client.AddSpell(new Spell(true) { ID = 1120 });
                    }
                    else if (client.Entity.Class == 142)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 1050 });
                        client.AddSpell(new Spell(true) { ID = 1175 });
                        client.AddSpell(new Spell(true) { ID = 1075 });//Invisibility
                        client.AddSpell(new Spell(true) { ID = 1055 });
                        client.AddSpell(new Spell(true) { ID = 3080 });
                    }
                }

                #endregion
                #region Water-Tro
                if (client.Entity.FirstRebornClass == 135 && client.Entity.SecondRebornClass == 15)
                {

                    if (client.Entity.Class == 41 || client.Entity.Class == 142 || client.Entity.Class == 132 || client.Entity.Class == 51)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 1005 });//Cure
                        client.AddSpell(new Spell(true) { ID = 1085 });//StarOfAccuracy
                        client.AddSpell(new Spell(true) { ID = 1090 });//MagicShield
                        client.AddSpell(new Spell(true) { ID = 1095 });//Stigma
                        client.AddSpell(new Spell(true) { ID = 1195 });//Meditation
                        client.AddSpell(new Spell(true) { ID = 1190 });//SpiritHealing
                        client.AddSpell(new Spell(true) { ID = 1110 });//Cyclone
                        client.AddSpell(new Spell(true) { ID = 1270 });//Robot
                    }
                    else if (client.Entity.Class == 61)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 1005 });//Cure
                        client.AddSpell(new Spell(true) { ID = 1085 });//StarOfAccuracy
                        client.AddSpell(new Spell(true) { ID = 1090 });//MagicShield
                        client.AddSpell(new Spell(true) { ID = 1095 });//Stigma
                        client.AddSpell(new Spell(true) { ID = 1195 });//Meditation
                        client.AddSpell(new Spell(true) { ID = 1190 });//SpiritHealing
                        client.AddSpell(new Spell(true) { ID = 1110 });//Cyclone
                        client.AddSpell(new Spell(true) { ID = 1270 });//Robot
                        client.AddSpell(new Spell(true) { ID = 1350 });//DivineHare
                        client.AddSpell(new Spell(true) { ID = 1280 });//Water Elf
                    }
                    else if (client.Entity.Class == 71)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 1005 });//Cure
                        client.AddSpell(new Spell(true) { ID = 1085 });//StarOfAccuracy
                        client.AddSpell(new Spell(true) { ID = 1090 });//MagicShield
                        client.AddSpell(new Spell(true) { ID = 1095 });//Stigma
                        client.AddSpell(new Spell(true) { ID = 1190 });//SpiritHealing
                        client.AddSpell(new Spell(true) { ID = 1110 });//Cyclone
                        client.AddSpell(new Spell(true) { ID = 1270 });//Robot
                    }
                    else if (client.Entity.Class == 21)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 1005 });//
                        client.AddSpell(new Spell(true) { ID = 1085 });//
                        client.AddSpell(new Spell(true) { ID = 1090 });//
                        client.AddSpell(new Spell(true) { ID = 1095 });//
                        client.AddSpell(new Spell(true) { ID = 1195 });//
                        client.AddSpell(new Spell(true) { ID = 1190 });//
                        client.AddSpell(new Spell(true) { ID = 1110 });//
                        client.AddSpell(new Spell(true) { ID = 1270 });//
                        client.AddSpell(new Spell(true) { ID = 5100 });//
                    }
                    else if (client.Entity.Class == 11)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 1005 });//
                        client.AddSpell(new Spell(true) { ID = 1085 });//
                        client.AddSpell(new Spell(true) { ID = 1090 });//
                        client.AddSpell(new Spell(true) { ID = 1095 });//
                        client.AddSpell(new Spell(true) { ID = 1195 });//
                        client.AddSpell(new Spell(true) { ID = 3050 });//
                    }
                }
                #endregion
                #region Water-War
                if (client.Entity.FirstRebornClass == 135 && client.Entity.SecondRebornClass == 25)
                {

                    if (client.Entity.Class == 41)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 1005 });//
                        client.AddSpell(new Spell(true) { ID = 1085 });//
                        client.AddSpell(new Spell(true) { ID = 1090 });//
                        client.AddSpell(new Spell(true) { ID = 1095 });//
                        client.AddSpell(new Spell(true) { ID = 1195 });//
                        client.AddSpell(new Spell(true) { ID = 1020 });//
                        client.AddSpell(new Spell(true) { ID = 1040 });//
                        client.AddSpell(new Spell(true) { ID = 3060 });//
                        client.AddSpell(new Spell(true) { ID = 1350 });//
                        client.AddSpell(new Spell(true) { ID = 1280 });//
                    }
                    else if (client.Entity.Class == 142)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 1005 });//
                        client.AddSpell(new Spell(true) { ID = 1085 });//
                        client.AddSpell(new Spell(true) { ID = 1090 });//
                        client.AddSpell(new Spell(true) { ID = 1095 });//
                        client.AddSpell(new Spell(true) { ID = 1195 });//
                        client.AddSpell(new Spell(true) { ID = 1020 });//
                        client.AddSpell(new Spell(true) { ID = 1040 });//
                        client.AddSpell(new Spell(true) { ID = 3060 });//
                    }
                    else if (client.Entity.Class == 11 || client.Entity.Class == 51 || client.Entity.Class == 71)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 1005 });//
                        client.AddSpell(new Spell(true) { ID = 1085 });//
                        client.AddSpell(new Spell(true) { ID = 1090 });//
                        client.AddSpell(new Spell(true) { ID = 1095 });//
                        client.AddSpell(new Spell(true) { ID = 1195 });//
                        client.AddSpell(new Spell(true) { ID = 1015 });//
                        client.AddSpell(new Spell(true) { ID = 1040 });//
                        client.AddSpell(new Spell(true) { ID = 3060 });//
                        client.AddSpell(new Spell(true) { ID = 1320 });//
                    }
                    else if (client.Entity.Class == 61)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 1005 });//
                        client.AddSpell(new Spell(true) { ID = 1085 });//
                        client.AddSpell(new Spell(true) { ID = 1090 });//
                        client.AddSpell(new Spell(true) { ID = 1095 });//
                        client.AddSpell(new Spell(true) { ID = 1195 });//
                        client.AddSpell(new Spell(true) { ID = 1015 });//
                        client.AddSpell(new Spell(true) { ID = 1040 });//
                        client.AddSpell(new Spell(true) { ID = 3060 });//
                        client.AddSpell(new Spell(true) { ID = 1320 });//
                        client.AddSpell(new Spell(true) { ID = 1350 });//DivineHare
                        client.AddSpell(new Spell(true) { ID = 1280 });//Water Elf
                    }
                    else if (client.Entity.Class == 21)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 1005 });//
                        client.AddSpell(new Spell(true) { ID = 1085 });//
                        client.AddSpell(new Spell(true) { ID = 1090 });//
                        client.AddSpell(new Spell(true) { ID = 1095 });//
                        client.AddSpell(new Spell(true) { ID = 1195 });//
                        client.AddSpell(new Spell(true) { ID = 3060 });//
                    }
                    else if (client.Entity.Class == 132)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 1005 });//
                        client.AddSpell(new Spell(true) { ID = 1085 });//
                        client.AddSpell(new Spell(true) { ID = 1090 });//
                        client.AddSpell(new Spell(true) { ID = 1095 });//
                        client.AddSpell(new Spell(true) { ID = 1195 });//
                        client.AddSpell(new Spell(true) { ID = 1020 });//
                        client.AddSpell(new Spell(true) { ID = 1040 });//
                        client.AddSpell(new Spell(true) { ID = 3060 });//
                        client.AddSpell(new Spell(true) { ID = 1025 });//
                    }
                }
                #endregion
                #region Water-Water
                if (client.Entity.FirstRebornClass == 135 && client.Entity.SecondRebornClass == 135)
                {

                    if (client.Entity.Class == 11 || client.Entity.Class == 21 || client.Entity.Class == 41 || client.Entity.Class == 51 || client.Entity.Class == 71)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 1005 });//
                        client.AddSpell(new Spell(true) { ID = 1085 });//
                        client.AddSpell(new Spell(true) { ID = 1090 });//
                        client.AddSpell(new Spell(true) { ID = 1095 });//
                        client.AddSpell(new Spell(true) { ID = 1195 });//
                        client.AddSpell(new Spell(true) { ID = 3090 });//
                    }
                    else if (client.Entity.Class == 61)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 1005 });//
                        client.AddSpell(new Spell(true) { ID = 1085 });//
                        client.AddSpell(new Spell(true) { ID = 1090 });//
                        client.AddSpell(new Spell(true) { ID = 1095 });//
                        client.AddSpell(new Spell(true) { ID = 1195 });//
                        client.AddSpell(new Spell(true) { ID = 3090 });//
                        client.AddSpell(new Spell(true) { ID = 1350 });//DivineHare
                        client.AddSpell(new Spell(true) { ID = 1280 });//Water Elf
                    }
                    else if (client.Entity.Class == 132)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 3090 });//
                        client.AddSpell(new Spell(true) { ID = 30000 });//Azure Shield
                    }
                    else if (client.Entity.Class == 142)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 1050 });//
                        client.AddSpell(new Spell(true) { ID = 1075 });//Invisibility
                        client.AddSpell(new Spell(true) { ID = 1055 });//
                        client.AddSpell(new Spell(true) { ID = 1175 });//
                        client.AddSpell(new Spell(true) { ID = 3090 });//
                    }
                }

                #endregion
                #region Water-Nin
                if (client.Entity.FirstRebornClass == 135 && client.Entity.SecondRebornClass == 55)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                    client.AddSpell(new Spell(true) { ID = 1005 });//
                    client.AddSpell(new Spell(true) { ID = 1085 });//
                    client.AddSpell(new Spell(true) { ID = 1090 });//
                    client.AddSpell(new Spell(true) { ID = 1095 });//
                    client.AddSpell(new Spell(true) { ID = 1195 });//
                    client.AddSpell(new Spell(true) { ID = 6001 });//
                }
                #endregion
                #region Water-Monk
                if (client.Entity.FirstRebornClass == 135 && client.Entity.SecondRebornClass == 65)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                    client.AddSpell(new Spell(true) { ID = 1005 });//Cure
                    client.AddSpell(new Spell(true) { ID = 1085 });//Star of Accuracy
                    client.AddSpell(new Spell(true) { ID = 1090 });//Magic Shield
                    client.AddSpell(new Spell(true) { ID = 1095 });//Stigma
                    client.AddSpell(new Spell(true) { ID = 1195 });//Meditation
                    client.AddSpell(new Spell(true) { ID = 10400 });//Serenity
                }
                #endregion
                #region Water-Pirate
                if (client.Entity.FirstRebornClass == 135 && client.Entity.SecondRebornClass == 75)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                    client.AddSpell(new Spell(true) { ID = 1005 });//Cure
                    client.AddSpell(new Spell(true) { ID = 1085 });//Star of Accuracy
                    client.AddSpell(new Spell(true) { ID = 1090 });//Magic Shield
                    client.AddSpell(new Spell(true) { ID = 1095 });//Stigma
                    client.AddSpell(new Spell(true) { ID = 1195 });//Meditation
                    client.AddSpell(new Spell(true) { ID = 11070 });//Gale Bomb
                }
                #endregion
                #endregion
                #region Monk2
                #region Monk-Arch
                if (client.Entity.FirstRebornClass == 65 && client.Entity.SecondRebornClass == 45)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                    client.AddSpell(new Spell(true) { ID = 5002 });//Poisonous Arrows
                    client.AddSpell(new Spell(true) { ID = 10400 });//Serenity
                }
                #endregion
                #region Monk-Fire
                if (client.Entity.FirstRebornClass == 65 && client.Entity.SecondRebornClass == 145)
                {

                    if (client.Entity.Class == 11 || client.Entity.Class == 21 | client.Entity.Class == 41 || client.Entity.Class == 61 || client.Entity.Class == 71)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 1000 });//Thunder
                        client.AddSpell(new Spell(true) { ID = 1001 });//Fire
                        client.AddSpell(new Spell(true) { ID = 1005 });//Cure
                        client.AddSpell(new Spell(true) { ID = 1195 });//Meditation
                        client.AddSpell(new Spell(true) { ID = 10400 });//Serenity
                    }
                    else if (client.Entity.Class == 142)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 10400 });//Serenity
                    }
                    else if (client.Entity.Class == 132)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 1120 });//Fire Circle
                        client.AddSpell(new Spell(true) { ID = 10400 });//Serenity
                    }
                    else if (client.Entity.Class == 51)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 1085 });//Star of Accuracy
                        client.AddSpell(new Spell(true) { ID = 1090 });//Magic Shield
                        client.AddSpell(new Spell(true) { ID = 1095 });//Stigma
                        client.AddSpell(new Spell(true) { ID = 1005 });//Cure
                        client.AddSpell(new Spell(true) { ID = 1195 });//Meditation
                        client.AddSpell(new Spell(true) { ID = 10400 });//Serenity
                    }
                }

                #endregion
                #region Monk-Tro
                if (client.Entity.FirstRebornClass == 65 && client.Entity.SecondRebornClass == 15)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                    client.AddSpell(new Spell(true) { ID = 10400 });//Serenity
                    client.AddSpell(new Spell(true) { ID = 1190 });//SpiritHealing
                    client.AddSpell(new Spell(true) { ID = 1110 });//Cyclone
                    client.AddSpell(new Spell(true) { ID = 1270 });//Robot
                }
                #endregion
                #region Monk-War
                if (client.Entity.FirstRebornClass == 65 && client.Entity.SecondRebornClass == 25)
                {

                    if (client.Entity.Class == 41 || client.Entity.Class == 142)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 10400 });//Serenity
                        client.AddSpell(new Spell(true) { ID = 1020 });//Shield
                        client.AddSpell(new Spell(true) { ID = 1040 });//Roar
                        client.AddSpell(new Spell(true) { ID = 3060 });//Reflect
                    }
                    else if (client.Entity.Class == 11 || client.Entity.Class == 51 || client.Entity.Class == 61 || client.Entity.Class == 71)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 10400 });//Serenity
                        client.AddSpell(new Spell(true) { ID = 1020 });//Shield
                        client.AddSpell(new Spell(true) { ID = 1040 });//Roar
                        client.AddSpell(new Spell(true) { ID = 3060 });//Reflect
                        client.AddSpell(new Spell(true) { ID = 1320 });//Flying Moon (XP)
                        client.AddSpell(new Spell(true) { ID = 1015 });//Accuracy
                    }
                    else if (client.Entity.Class == 21)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 10400 });//Serenity
                        client.AddSpell(new Spell(true) { ID = 3060 });//Reflect
                    }
                    else if (client.Entity.Class == 132)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 10400 });//Serenity
                        client.AddSpell(new Spell(true) { ID = 1020 });//Shield
                        client.AddSpell(new Spell(true) { ID = 1040 });//Roar
                        client.AddSpell(new Spell(true) { ID = 3060 });//Reflect
                        client.AddSpell(new Spell(true) { ID = 1025 });//Superman
                    }
                }
                #endregion
                #region Monk-Water
                if (client.Entity.FirstRebornClass == 65 && client.Entity.SecondRebornClass == 135)
                {

                    if (client.Entity.Class == 11 || client.Entity.Class == 21 || client.Entity.Class == 41 || client.Entity.Class == 51 || client.Entity.Class == 61)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 10400 });//Serenity
                        client.AddSpell(new Spell(true) { ID = 1020 });//Shield
                        client.AddSpell(new Spell(true) { ID = 1040 });//Roar
                        client.AddSpell(new Spell(true) { ID = 1280 });//Water Elf
                        client.AddSpell(new Spell(true) { ID = 1195 });//Meditation
                        client.AddSpell(new Spell(true) { ID = 1015 });//Accuracy
                        client.AddSpell(new Spell(true) { ID = 1350 });//DivineHare
                        client.AddSpell(new Spell(true) { ID = 1095 });//Stigma
                    }
                    else if (client.Entity.Class == 132)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 3090 });//Pervade
                        client.AddSpell(new Spell(true) { ID = 10400 });//Serenity
                    }
                    else if (client.Entity.Class == 142)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 10400 });//Serenity
                        client.AddSpell(new Spell(true) { ID = 1280 });//Water Elf
                        client.AddSpell(new Spell(true) { ID = 1175 });//dvanced Cure
                        client.AddSpell(new Spell(true) { ID = 1075 });//Invisibility 
                        client.AddSpell(new Spell(true) { ID = 1055 });//Healing Rain
                        client.AddSpell(new Spell(true) { ID = 1050 });//XP Revive
                        client.AddSpell(new Spell(true) { ID = 1350 });//Divine Hare
                    }
                    else if (client.Entity.Class == 71)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 10400 });//Serenity
                        client.AddSpell(new Spell(true) { ID = 1020 });//Shield
                        client.AddSpell(new Spell(true) { ID = 1040 });//Roar
                        client.AddSpell(new Spell(true) { ID = 1195 });//Meditation
                        client.AddSpell(new Spell(true) { ID = 1015 });//Accuracy
                        client.AddSpell(new Spell(true) { ID = 1095 });//Stigma
                    }
                }

                #endregion
                #region Monk-Nin
                if (client.Entity.FirstRebornClass == 65 && client.Entity.SecondRebornClass == 55)
                {
                    if (client.Entity.Class == 51)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 10400 });//Serenity
                        client.AddSpell(new Spell(true) { ID = 6002 });//PoisonStar
                        client.AddSpell(new Spell(true) { ID = 6001 });//Toxic Fog
                    }
                    else if (client.Entity.Class == 11 || client.Entity.Class == 132 || client.Entity.Class == 21 || client.Entity.Class == 41 || client.Entity.Class == 61 || client.Entity.Class == 142 || client.Entity.Class == 71)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 10400 });//Serenity
                        client.AddSpell(new Spell(true) { ID = 6001 });//Toxic Fog
                    }
                }
                #endregion
                #region Monk-Monk
                if (client.Entity.FirstRebornClass == 65 && client.Entity.SecondRebornClass == 65)
                {

                    if (client.Entity.Class == 11 || client.Entity.Class == 21 || client.Entity.Class == 41 || client.Entity.Class == 51 || client.Entity.Class == 132 || client.Entity.Class == 142 || client.Entity.Class == 71)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 10400 });//Serenity
                    }
                    else if (client.Entity.Class == 61)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 10405 });//soulshackle
                        client.AddSpell(new Spell(true) { ID = 10400 });//Serenity
                    }
                }
                #endregion
                #region Monk-Pirate
                if (client.Entity.FirstRebornClass == 65 && client.Entity.SecondRebornClass == 75)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                    client.AddSpell(new Spell(true) { ID = 10400 });//Serenity
                    client.AddSpell(new Spell(true) { ID = 11070 });//Gale Bomb
                }
                #endregion
                #endregion
                #region Pirate2
                #region Pirate-Arch
                if (client.Entity.FirstRebornClass == 75 && client.Entity.SecondRebornClass == 45)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                    client.AddSpell(new Spell(true) { ID = 11070 });//Gale Bomb
                    client.AddSpell(new Spell(true) { ID = 5002 });//Poisonous Arrows
                }
                #endregion
                #region Pirate-Fire
                if (client.Entity.FirstRebornClass == 75 && client.Entity.SecondRebornClass == 145)
                {

                    if (client.Entity.Class == 11 || client.Entity.Class == 21 | client.Entity.Class == 41 || client.Entity.Class == 61 || client.Entity.Class == 71 || client.Entity.Class == 51)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 1000 });//Thunder
                        client.AddSpell(new Spell(true) { ID = 1001 });//Fire
                        client.AddSpell(new Spell(true) { ID = 1005 });//Cure
                        client.AddSpell(new Spell(true) { ID = 1195 });//Meditation
                        client.AddSpell(new Spell(true) { ID = 11070 });//Gale Bomb
                    }
                    else if (client.Entity.Class == 142)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 11070 });//Gale Bomb
                    }
                    else if (client.Entity.Class == 132)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 1120 });//Fire Circle
                        client.AddSpell(new Spell(true) { ID = 11070 });//Gale Bomb
                    }
                }

                #endregion
                #region Pirate-Tro
                if (client.Entity.FirstRebornClass == 75 && client.Entity.SecondRebornClass == 15)
                {
                    client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                    client.AddSpell(new Spell(true) { ID = 11070 });//Gale Bomb
                    client.AddSpell(new Spell(true) { ID = 1190 });//SpiritHealing
                    client.AddSpell(new Spell(true) { ID = 1110 });//Cyclone
                    client.AddSpell(new Spell(true) { ID = 1270 });//Robot
                }
                #endregion
                #region Pirate-War
                if (client.Entity.FirstRebornClass == 75 && client.Entity.SecondRebornClass == 25)
                {

                    if (client.Entity.Class == 41 || client.Entity.Class == 142)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 11070 });//Gale Bomb
                        client.AddSpell(new Spell(true) { ID = 1020 });//Shield
                        client.AddSpell(new Spell(true) { ID = 1040 });//Roar
                        client.AddSpell(new Spell(true) { ID = 3060 });//Reflect
                    }
                    else if (client.Entity.Class == 11 || client.Entity.Class == 51 || client.Entity.Class == 61 || client.Entity.Class == 71)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 11070 });//Gale Bomb
                        client.AddSpell(new Spell(true) { ID = 1020 });//Shield
                        client.AddSpell(new Spell(true) { ID = 1040 });//Roar
                        client.AddSpell(new Spell(true) { ID = 3060 });//Reflect
                        client.AddSpell(new Spell(true) { ID = 1320 });//Flying Moon (XP)
                        client.AddSpell(new Spell(true) { ID = 1015 });//Accuracy
                    }
                    else if (client.Entity.Class == 21)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 11070 });//Gale Bomb
                        client.AddSpell(new Spell(true) { ID = 3060 });//Reflect
                    }
                    else if (client.Entity.Class == 132)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 11070 });//Gale Bomb
                        client.AddSpell(new Spell(true) { ID = 1020 });//Shield
                        client.AddSpell(new Spell(true) { ID = 1040 });//Roar
                        client.AddSpell(new Spell(true) { ID = 3060 });//Reflect
                        client.AddSpell(new Spell(true) { ID = 1025 });//Superman
                    }
                }
                #endregion
                #region Pirate-Water
                if (client.Entity.FirstRebornClass == 75 && client.Entity.SecondRebornClass == 135)
                {

                    if (client.Entity.Class == 11 || client.Entity.Class == 21 || client.Entity.Class == 41 || client.Entity.Class == 51 || client.Entity.Class == 61 || client.Entity.Class == 71)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 11070 });//Gale Bomb
                        client.AddSpell(new Spell(true) { ID = 1020 });//Shield
                        client.AddSpell(new Spell(true) { ID = 1040 });//Roar
                        client.AddSpell(new Spell(true) { ID = 1280 });//Water Elf
                        client.AddSpell(new Spell(true) { ID = 1195 });//Meditation
                        client.AddSpell(new Spell(true) { ID = 1015 });//Accuracy
                        client.AddSpell(new Spell(true) { ID = 1350 });//DivineHare
                        client.AddSpell(new Spell(true) { ID = 1095 });//Stigma
                    }
                    else if (client.Entity.Class == 132)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 3090 });//Pervade
                        client.AddSpell(new Spell(true) { ID = 11070 });//Gale Bomb
                    }
                    else if (client.Entity.Class == 142)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 11070 });//Gale Bomb
                        client.AddSpell(new Spell(true) { ID = 1280 });//Water Elf
                        client.AddSpell(new Spell(true) { ID = 1175 });//dvanced Cure
                        client.AddSpell(new Spell(true) { ID = 1075 });//Invisibility 
                        client.AddSpell(new Spell(true) { ID = 1055 });//Healing Rain
                        client.AddSpell(new Spell(true) { ID = 1050 });//XP Revive
                        client.AddSpell(new Spell(true) { ID = 1350 });//Divine Hare
                    }
                }

                #endregion
                #region Pirate-Nin
                if (client.Entity.FirstRebornClass == 75 && client.Entity.SecondRebornClass == 55)
                {
                    if (client.Entity.Class == 51)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 11070 });//Gale Bomb
                        client.AddSpell(new Spell(true) { ID = 6002 });//PoisonStar
                    }
                    else if (client.Entity.Class == 11 || client.Entity.Class == 132 || client.Entity.Class == 21 || client.Entity.Class == 41 || client.Entity.Class == 51 || client.Entity.Class == 61 || client.Entity.Class == 71)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 11070 });//Gale Bomb
                        client.AddSpell(new Spell(true) { ID = 6001 });//Toxic Fog
                    }
                }
                #endregion
                #region Pirate-Monk
                if (client.Entity.FirstRebornClass == 75 && client.Entity.SecondRebornClass == 65)
                {

                    if (client.Entity.Class == 11 || client.Entity.Class == 21 || client.Entity.Class == 41 || client.Entity.Class == 51 || client.Entity.Class == 132 || client.Entity.Class == 142)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 11070 });//Gale Bomb
                    }
                    else if (client.Entity.Class == 61)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 10405 });//soulshackle
                        client.AddSpell(new Spell(true) { ID = 10400 });//Serenity
                    }
                    else if (client.Entity.Class == 71)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 11070 });//Gale Bomb
                        client.AddSpell(new Spell(true) { ID = 10400 });//Serenity
                    }
                }
                #endregion
                #region Pirate-Pirate
                if (client.Entity.FirstRebornClass == 75 && client.Entity.SecondRebornClass == 75)
                {

                    if (client.Entity.Class == 11 || client.Entity.Class == 21 || client.Entity.Class == 41 || client.Entity.Class == 51 || client.Entity.Class == 132 || client.Entity.Class == 142 || client.Entity.Class == 61)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 11070 });//Gale Bomb
                    }
                    else if (client.Entity.Class == 71)
                    {
                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 11070 });//Gale Bomb
                        client.AddSpell(new Spell(true) { ID = 11040 });//Scurvy Bomb
                    }
                }
                #endregion
                #endregion
                #endregion
                #region Low level items
                for (byte i = 1; i < 9; i++)
                {
                    if (i != 7)
                    {
                        ConquerItem item = client.Equipment.TryGetItem(i);
                        if (item != null && item.ID != 0)
                        {
                            try
                            {
                                //client.UnloadItemStats(item, false);
                                Database.ConquerItemInformation cii = new Conquer_Online_Server.Database.ConquerItemInformation(item.ID, item.Plus);
                                item.ID = cii.LowestID(Network.PacketHandler.ItemMinLevel(Network.PacketHandler.ItemPosition(item.ID)));
                                item.Mode = Conquer_Online_Server.Game.Enums.ItemMode.Update;
                                item.Send(client);
                                client.LoadItemStats();
                                Database.ConquerItemTable.UpdateItemID(item, client);
                            }
                            catch
                            {
                                Console.WriteLine("Reborn item problem: " + item.ID);
                            }
                        }
                    }
                }
                ConquerItem hand = client.Equipment.TryGetItem(5);
                if (hand != null)
                {
                    client.Equipment.Remove(5);
                    client.CalculateStatBonus();
                    client.CalculateHPBonus();
                }
                hand = client.Equipment.TryGetItem(25);
                if (hand != null)
                {
                    client.Equipment.Remove(25);
                    client.CalculateStatBonus();
                    client.CalculateHPBonus();
                }
                client.LoadItemStats();
                client.SendScreen(client.Entity.SpawnPacket, false);
                #endregion
                Database.DataHolder.GetStats(client.Entity.Class, client.Entity.Level, client);
                client.CalculateStatBonus();
                client.CalculateHPBonus();
                client.GemAlgorithm();
                client.SendStatMessage();
                //Database.ReincarnationTable.NewReincarnated(client.Entity);
                Network.PacketHandler.WorldMessage(client.Entity.Name + " has got Reincarnation! Congratulations!");

            }
        }
        #endregion
        #region Guilds
        static void AllyGuilds(string name, Client.GameClient client)
        {
            foreach (var guild in Kernel.Guilds.Values)
            {
                if (guild.Name == name && client.Guild.Name != name)
                {
                    if (guild.Leader != null)
                    {
                        if (guild.Leader.IsOnline)
                        {
                            guild.Leader.Client.OnMessageBoxEventParams = new object[]
                                                            {
                                                                guild,
                                                                client.Guild
                                                            };
                            client.OnMessageBoxEventParams = new object[]
                                                            {
                                                                guild,
                                                                client.Guild
                                                            };
                            Client.GameClient Leader = guild.Leader.Client;
                            Leader.MessageOK = delegate
                            {
                                Game.ConquerStructures.Society.Guild Guild1 =
                                    Leader.OnMessageBoxEventParams[0] as Game.ConquerStructures.Society.Guild;
                                Game.ConquerStructures.Society.Guild Guild2 =
                                    Leader.OnMessageBoxEventParams[1] as Game.ConquerStructures.Society.Guild;
                                if (Guild1.Ally.Count == 6 || Guild2.Ally.Count == 6)
                                    return;
                                Guild1.AddAlly(Guild2.Name);
                                Guild2.AddAlly(Guild1.Name);

                                if (Guild1.Leader.Client != null)
                                {
                                    if (Guild1.Leader.Client.Socket.Alive)
                                    {
                                        if (Guild2.Leader.Client != null && Guild2.Leader.Client.Socket.Alive)
                                        {
                                            Guild2.Leader.Client.Send(new Message(Guild1.Leader.Name + " has accepted your ally request.", System.Drawing.Color.Blue, Message.TopLeft));
                                        }
                                    }
                                }
                            };
                            guild.Leader.Client.MessageCancel = delegate
                            {
                                try
                                {
                                    if (guild.Leader.Client != null)
                                    {
                                        if (guild.Leader.Client.Socket.Alive)
                                        {
                                            if (guild.Leader.Client.OnMessageBoxEventParams != null)
                                            {
                                                Game.ConquerStructures.Society.Guild Guild2 =
                                                    guild.Leader.Client.OnMessageBoxEventParams[1] as Game.ConquerStructures.Society.Guild;
                                                Game.ConquerStructures.Society.Guild Guild1 =
                                                    guild.Leader.Client.OnMessageBoxEventParams[0] as Game.ConquerStructures.Society.Guild;

                                                if (Guild2.Leader.IsOnline)
                                                {
                                                    Guild2.Leader.Client.Send(new Message(Guild1.Leader.Name + " has declined your ally request.", System.Drawing.Color.Blue, Message.TopLeft));
                                                }
                                            }
                                        }
                                    }
                                }
                                catch (Exception e)
                                {
                                    Program.SaveException(e);
                                }
                            };
                            guild.Leader.Client.Send(new NpcReply(NpcReply.MessageBox, client.Entity.Name + " , GuildLeader of " + client.Guild.Name + " wants to make with you an alliance."));
                        }
                    }
                }
            }
        }
        #endregion
        #region Broadcast
        public static void BroadcastInfoAwaiting(Broadcast broadcast, Client.GameClient client)
        {
            byte[] buffer = new byte[500];
            Writer.WriteUInt16(2051, 2, buffer);
            int test = 0;
            ushort total = 0;
            if (broadcast.dwParam * 10 + 10 >= Constants.MaxBroadcasts)
                test = Constants.MaxBroadcasts;
            else
                test = (int)broadcast.dwParam * 10 + 10;
            for (uint i = broadcast.dwParam * 10; i < test; i++)
            {
                if (Game.ConquerStructures.Broadcast.Broadcasts.Count > i)
                {
                    var Broadcast = Game.ConquerStructures.Broadcast.Broadcasts[(int)i];
                    Writer.WriteUInt32((ushort)broadcast.dwParam, 4, buffer);
                    Writer.WriteUInt16(total, 8, buffer);
                    int offset = 12 + buffer[10] * 112;
                    buffer[10]++;
                    Writer.WriteUInt32(Broadcast.ID, offset, buffer); offset += 4;
                    Writer.WriteUInt32(i, offset, buffer); offset += 4;
                    Writer.WriteUInt32(Broadcast.EntityID, offset, buffer); offset += 4;
                    Writer.WriteString(Broadcast.EntityName, offset, buffer); offset += 16;
                    Writer.WriteUInt32(Broadcast.SpentCPs, offset, buffer); offset += 4;
                    Writer.WriteString(Broadcast.Message, offset, buffer);
                    if (buffer[10] % 4 == 0)
                    {
                        total++;
                        Writer.WriteUInt16((ushort)(12 + buffer[10] * 112 + 6 + 2), 0, buffer);
                        byte[] Buffer = new byte[12 + buffer[10] * 112 + 6 + 2 + 8];
                        System.Buffer.BlockCopy(buffer, 0, Buffer, 0, Buffer.Length);
                        client.Send(Buffer);
                        buffer = new byte[500];
                        Writer.WriteUInt16(2051, 2, buffer);
                    }
                }
                else
                {
                    Writer.WriteUInt16((ushort)(12 + buffer[10] * 112 + 6 + 2), 0, buffer);
                    byte[] Buffer = new byte[12 + buffer[10] * 112 + 6 + 2 + 8];
                    System.Buffer.BlockCopy(buffer, 0, Buffer, 0, Buffer.Length);
                    if (buffer[10] != 0 || buffer[10] == 0 && total == 0)
                        client.Send(Buffer);
                    break;
                }
            }
        }
        public static void BroadcastClientMessages(Broadcast broadcast, Client.GameClient client)
        {
            byte[] buffer = new byte[500];
            Writer.WriteUInt16(2051, 2, buffer);
            int test = 0;
            ushort total = 0;
            for (int i = 0; i < Game.ConquerStructures.Broadcast.Broadcasts.Count; i++)
                if (Game.ConquerStructures.Broadcast.Broadcasts[i].EntityID == client.Entity.UID)
                    test++;
            if ((10 * broadcast.dwParam + 10) >= Game.ConquerStructures.Broadcast.Broadcasts.Count)
            {
                return;
            }
            for (uint i = broadcast.dwParam * 10; i < test; i++)
            {
                if (Game.ConquerStructures.Broadcast.Broadcasts.Count > i)
                {
                    var Broadcast = Game.ConquerStructures.Broadcast.Broadcasts[(int)i];
                    if (Broadcast.EntityID != client.Entity.UID)
                        continue;
                    Writer.WriteUInt32((ushort)broadcast.dwParam, 4, buffer);
                    Writer.WriteUInt16(total, 8, buffer);
                    int offset = 12 + buffer[10] * 112;
                    buffer[10]++;
                    Writer.WriteUInt32(Broadcast.ID, offset, buffer); offset += 4;
                    Writer.WriteUInt32(i, offset, buffer); offset += 4;
                    Writer.WriteUInt32(Broadcast.EntityID, offset, buffer); offset += 4;
                    Writer.WriteString(Broadcast.EntityName, offset, buffer); offset += 16;
                    Writer.WriteUInt32(Broadcast.SpentCPs, offset, buffer); offset += 4;
                    Writer.WriteString(Broadcast.Message, offset, buffer);
                    if (buffer[10] % 4 == 0)
                    {
                        total++;
                        Writer.WriteUInt16((ushort)(12 + buffer[10] * 112 + 6 + 2), 0, buffer);
                        byte[] Buffer = new byte[12 + buffer[10] * 112 + 6 + 2 + 8];
                        System.Buffer.BlockCopy(buffer, 0, Buffer, 0, Buffer.Length);
                        client.Send(Buffer);
                        buffer = new byte[500];
                        Writer.WriteUInt16(2051, 2, buffer);
                    }
                }
                else
                {
                    Writer.WriteUInt16((ushort)(12 + buffer[10] * 112 + 6 + 2), 0, buffer);
                    byte[] Buffer = new byte[12 + buffer[10] * 112 + 6 + 2 + 8];
                    System.Buffer.BlockCopy(buffer, 0, Buffer, 0, Buffer.Length);
                    if (buffer[10] != 0 || buffer[10] == 0 && total == 0)
                        client.Send(Buffer);
                    break;
                }
            }
        }
        #endregion
        #region Booth
        static void ShowBoothItems(ItemUsage usage, Client.GameClient client)
        {
            Client.GameClient Owner = null;
            Game.Entity entity = null;

            Game.ConquerStructures.Booth booth = null;
            if (Game.ConquerStructures.Booth.TryGetValue(usage.UID, out booth))
            {
                Owner = booth.Base.Owner;
                entity = Owner.Entity;
                if (Owner != null)
                {
                    if (Owner.Trade != null)
                    {
                        if (Owner.Trade.InTrade) return;
                    }
                    if (Owner.Entity.UID != client.Entity.UID)
                    {
                        BoothItem Item = new BoothItem(true);
                        if (Owner.Booth != null)
                        {
                            foreach (Game.ConquerStructures.BoothItem item in Owner.Booth.ItemList.Values)
                            {
                                Item.Fill(item, Owner.Booth.Base.UID);
                                client.Send(Item);
                                item.Item.SendExtras(client);
                            }
                        }
                    }
                }
            }
        }
        static void AddItemOnBooth(ItemUsage usage, Client.GameClient client)
        {
            if (client.Booth != null && !client.Trade.InTrade)
            {
                if (!client.Booth.ItemList.ContainsKey(usage.UID))
                {
                    if (client.Inventory.ContainsUID(usage.UID))
                    {
                        Game.ConquerStructures.BoothItem item = new Conquer_Online_Server.Game.ConquerStructures.BoothItem();
                        item.Cost = usage.dwParam;
                        client.Inventory.TryGetItem(usage.UID, out item.Item);
                        Database.ConquerItemInformation infos = new Database.ConquerItemInformation(item.Item.ID, 0);
                        if (item.Item.Lock != 0 || item.Item.Suspicious || item.Item.Bound || infos.BaseInformation.Type != Database.ConquerItemBaseInformation.ItemType.Dropable)
                        {
                            return;
                        }
                        if (Constants.SoulList.Contains((int)item.Item.ID) && item.Cost < 1000000)
                        {
                            Network.GamePackets.NpcReply npc = new Network.GamePackets.NpcReply(6, "you cant sell any special soul item less than 1kk cps ok?");
                            npc.OptionID = 255;
                            client.Send(npc.ToArray());
                            return;
                        }
                        if (Constants.SoulList.Contains((int)item.Item.Purification.PurificationItemID) && item.Cost < 1000000)
                        {
                            Network.GamePackets.NpcReply npc = new Network.GamePackets.NpcReply(6, "you cant sell any special soul item less than 3kk cps ok?");
                            npc.OptionID = 255;
                            client.Send(npc.ToArray());
                            return;
                        }
                        if (Constants.SoulList.Contains((int)item.Item.Purification.PurificationItemID) && item.Cost_Type == Conquer_Online_Server.Game.ConquerStructures.BoothItem.CostType.Silvers)
                        {
                            Network.GamePackets.NpcReply npc = new Network.GamePackets.NpcReply(6, "you cant sell any special soul item for silver?");
                            npc.OptionID = 255;
                            client.Send(npc.ToArray());
                            return;
                        }
                        item.Cost_Type = usage.ID == ItemUsage.AddItemOnBoothForSilvers ? Conquer_Online_Server.Game.ConquerStructures.BoothItem.CostType.Silvers : Conquer_Online_Server.Game.ConquerStructures.BoothItem.CostType.ConquerPoints;
                        client.Booth.ItemList.Add(item.Item.UID, item);
                        client.Send(usage);
                        BoothItem Item = new BoothItem(true);
                        Item.Fill(item, client.Booth.Base.UID);
                        client.SendScreen(Item, false);
                    }
                }
            }
        }
        static void BuyFromBooth(ItemUsage usage, Client.GameClient client)
        {

            Client.GameClient Owner = null;
            Game.Entity entity = null;
            Game.ConquerStructures.Booth booth = null;
            if (Game.ConquerStructures.Booth.TryGetValue(usage.dwParam, out booth))
            {//k that should be it, test and see ok
                Owner = booth.Base.Owner;
                entity = Owner.Entity;
                if (Owner != null)
                {
                    if (Owner.Trade != null)
                    {
                        if (Owner.Trade.InTrade) return;
                    }
                    if (Owner.Entity.UID != client.Entity.UID)
                    {
                        if (Owner.Booth.ItemList.ContainsKey(usage.UID))
                        {
                            Game.ConquerStructures.BoothItem item;
                            if (Owner.Booth.ItemList.TryGetValue(usage.UID, out item))
                            {
                                if (client.Inventory.Count <= 39)
                                {
                                    if (item.Cost_Type == Conquer_Online_Server.Game.ConquerStructures.BoothItem.CostType.Silvers)
                                    {
                                        if (client.Entity.Money >= item.Cost)
                                        {
                                            client.Entity.Money -= item.Cost;
                                            //Database.EntityTable.UpdateMoney(client);
                                            Owner.Entity.Money += item.Cost;
                                            //Database.EntityTable.UpdateMoney(Owner);
                                            client.Send(usage);
                                            client.Inventory.Add(item.Item, Game.Enums.ItemUse.Move);
                                            usage.ID = ItemUsage.RemoveItemFromBooth;
                                            Owner.Send(usage);
                                            Owner.Inventory.Remove(item.Item.UID, Game.Enums.ItemUse.None, false);
                                            usage.ID = ItemUsage.RemoveInventory;
                                            Owner.Send(usage);
                                            Owner.Booth.ItemList.Remove(item.Item.UID);
                                            Database.ConquerItemInformation infos = new Database.ConquerItemInformation(item.Item.ID, 0);
                                            Owner.Send(Constants.BoothItemSell(client.Entity.Name, infos.BaseInformation.Name, false, item.Cost));
                                            Program.AddVendorLog(Owner.Entity.Name, client.Entity.Name, item.Cost.ToString() + " Silvers", item.Item);
                                        }
                                    }
                                    else
                                    {
                                        if (client.Entity.ConquerPoints >= item.Cost)
                                        {
                                            client.Entity.ConquerPoints -= item.Cost;
                                            Database.EntityTable.UpdateCps(client);
                                            Owner.Entity.ConquerPoints += item.Cost;
                                            Database.EntityTable.UpdateCps(Owner);
                                            client.Send(usage);
                                            client.Inventory.Add(item.Item, Game.Enums.ItemUse.Move);
                                            usage.ID = ItemUsage.RemoveItemFromBooth;
                                            Owner.Send(usage);
                                            Owner.Inventory.Remove(item.Item.UID, Game.Enums.ItemUse.None, false);
                                            usage.ID = ItemUsage.RemoveInventory;
                                            Owner.Send(usage);
                                            Owner.Booth.ItemList.Remove(item.Item.UID);
                                            Database.ConquerItemInformation infos = new Database.ConquerItemInformation(item.Item.ID, 0);
                                            Owner.Send(Constants.BoothItemSell(client.Entity.Name, infos.BaseInformation.Name, true, item.Cost));
                                            Program.AddVendorLog(Owner.Entity.Name, client.Entity.Name, item.Cost.ToString() + " CPs", item.Item);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        static void RemoveItemFromBooth(ItemUsage usage, Client.GameClient client)
        {
            if (client.Booth.ItemList.ContainsKey(usage.UID))
            {
                client.Booth.ItemList.Remove(usage.UID);
                client.SendScreen(usage, true);
            }
        }

        #endregion
        #region Mentor Apprentice
        static void ExpelApprentice(MentorApprentice ma, Client.GameClient client)
        {
            if (client.Apprentices.ContainsKey(ma.dwParam))
            {
                var appr = client.Apprentices[ma.dwParam];
                if (appr.IsOnline)
                {
                    ma.Type = MentorApprentice.DumpMentor;
                    ma.Online = false;
                    appr.Client.Send(ma);
                    appr.Client.Mentor = null;
                    appr.Client.ReviewMentor();
                }
                Database.KnownPersons.RemoveMentor(appr.ID);
                client.Apprentices.Remove(appr.ID);
            }
        }
        static void LeaveMentor(MentorApprentice ma, Client.GameClient client)
        {
            if (client.Mentor != null)
            {
                ma.Type = MentorApprentice.DumpMentor;
                client.Send(ma);
                if (client.Mentor.IsOnline)
                {
                    ma.Type = MentorApprentice.DumpApprentice;
                    client.Mentor.Client.Send(ma);
                    ApprenticeInformation AppInfo = new ApprenticeInformation();
                    AppInfo.Apprentice_ID = client.Entity.UID;
                    AppInfo.Apprentice_Level = 0;
                    AppInfo.Apprentice_Class = 0;
                    AppInfo.Apprentice_PkPoints = 0;
                    AppInfo.Apprentice_Name = client.Entity.Name;
                    AppInfo.Apprentice_Online = false;
                    AppInfo.Apprentice_Spouse_Name = "";
                    AppInfo.Enrole_date = 0;
                    AppInfo.Mentor_ID = client.Mentor.Client.Entity.UID;
                    AppInfo.Mentor_Mesh = client.Mentor.Client.Entity.Mesh;
                    AppInfo.Mentor_Name = client.Mentor.Client.Entity.Name;
                    AppInfo.Type = 2;
                    client.Mentor.Client.Send(AppInfo);
                    client.Mentor.Client.Apprentices.Remove(client.Entity.UID);
                }
                Database.KnownPersons.RemoveMentor(client.Entity.UID);

                client.Mentor = null;
                client.ReviewMentor();
            }
        }
        static void AddMentor(MentorApprentice ma, Client.GameClient client)
        {
            Client.GameClient Target = null;
            if (Kernel.GamePool.TryGetValue(ma.dwParam, out Target))
            {
                if (!client.Screen.Contains(Target.Entity.UID)) return;

                MentorApprentice Mentor = new MentorApprentice(true);
                Mentor.Type = MentorApprentice.AcceptRequestMentor;
                Mentor.dwParam = Target.Entity.UID;
                Mentor.UID = client.Entity.UID;
                Mentor.Dynamic = (byte)client.Entity.BattlePower;
                Mentor.Online = true;
                Mentor.Name = client.Entity.Name;

                Target.Send(Mentor);
            }
        }
        static void AddApprentice(MentorApprentice ma, Client.GameClient client)
        {
            Client.GameClient Target = null;
            if (Kernel.GamePool.TryGetValue(ma.dwParam, out Target))
            {
                if (!client.Screen.Contains(Target.Entity.UID)) return;
                if (client.apprtnum == 5) return;
                MentorApprentice Mentor = new MentorApprentice(true);
                Mentor.Type = MentorApprentice.AcceptRequestApprentice;
                Mentor.dwParam = Target.Entity.UID;
                Mentor.UID = client.Entity.UID;
                Mentor.Dynamic = (byte)client.Entity.BattlePower;
                Mentor.Online = true;
                Mentor.Name = client.Entity.Name;

                Target.Send(Mentor);
            }
        }
        static void AcceptRequestMentor(MentorApprentice ma, Client.GameClient client)
        {
            Client.GameClient Target = null;
            if (Kernel.GamePool.TryGetValue(ma.UID, out Target))
            {
                if (ma.Dynamic == 1)
                {
                    uint EnroleDate = (uint)(DateTime.Now.Year * 10000 + DateTime.Now.Month * 100 + DateTime.Now.Day);

                    Target.Mentor = new Conquer_Online_Server.Game.ConquerStructures.Society.Mentor();
                    Target.Mentor.ID = client.Entity.UID;
                    Target.Mentor.Name = client.Entity.Name;
                    Target.Mentor.EnroleDate = EnroleDate;

                    MentorInformation Information = new MentorInformation(true);
                    Information.Mentor_Type = 1;
                    Information.Mentor_ID = Target.Mentor.Client.Entity.UID;
                    Information.Apprentice_ID = Target.Entity.UID;
                    Information.Enrole_Date = EnroleDate;
                    Information.Mentor_Level = Target.Mentor.Client.Entity.Level;
                    Information.Mentor_Class = Target.Mentor.Client.Entity.Class;
                    Information.Mentor_PkPoints = Target.Mentor.Client.Entity.PKPoints;
                    Information.Mentor_Mesh = Target.Mentor.Client.Entity.Mesh;
                    Information.Mentor_Online = true;
                    Information.Shared_Battle_Power = Target.Entity.BattlePowerFrom(Target.Mentor.Client.Entity);
                    Information.String_Count = 3;
                    Information.Mentor_Name = Target.Mentor.Client.Entity.Name;
                    Information.Apprentice_Name = Target.Entity.Name;
                    Information.Mentor_Spouse_Name = Target.Mentor.Client.Entity.Spouse;

                    Target.Send(Information);
                    Target.ReviewMentor();
                    ApprenticeInformation AppInfo = new ApprenticeInformation();
                    AppInfo.Apprentice_ID = Target.Entity.UID;
                    AppInfo.Apprentice_Level = Target.Entity.Level;
                    AppInfo.Apprentice_Name = Target.Entity.Name;
                    AppInfo.Apprentice_Class = Target.Entity.Class;
                    AppInfo.Apprentice_PkPoints = Target.Entity.PKPoints;
                    AppInfo.Apprentice_Online = true;
                    AppInfo.Apprentice_Spouse_Name = Target.Entity.Spouse;
                    AppInfo.Enrole_date = EnroleDate;
                    AppInfo.Mentor_ID = client.Entity.UID;
                    AppInfo.Mentor_Mesh = client.Entity.Mesh;
                    AppInfo.Mentor_Name = client.Entity.Name;
                    AppInfo.Type = 2;
                    client.Send(AppInfo);
                    client.Apprentices.Add(Target.Entity.UID, new Conquer_Online_Server.Game.ConquerStructures.Society.Apprentice()
                    {
                        ID = Target.Entity.UID,
                        Name = Target.Entity.Name,
                        EnroleDate = EnroleDate
                    });
                    Database.KnownPersons.AddMentor(Target.Mentor, client.Apprentices[Target.Entity.UID]);
                }
                else
                {
                    Target.Send(new Message(client.Entity.Name + " declined your request.", System.Drawing.Color.Beige, Message.Talk));
                }
            }
        }
        static void AcceptRequestApprentice(MentorApprentice ma, Client.GameClient client)
        {
            Client.GameClient Target = null;
            if (Kernel.GamePool.TryGetValue(ma.UID, out Target))
            {
                if (ma.Dynamic == 1)
                {
                    uint EnroleDate = (uint)(DateTime.Now.Year * 10000 + DateTime.Now.Month * 100 + DateTime.Now.Day);
                    MentorInformation Information = new MentorInformation(true);
                    Information.Mentor_Type = 1;
                    Information.Mentor_ID = Target.Entity.UID;
                    Information.Apprentice_ID = client.Entity.UID;
                    Information.Enrole_Date = EnroleDate;
                    Information.Mentor_Level = Target.Entity.Level;
                    Information.Mentor_Class = Target.Entity.Class;
                    Information.Mentor_PkPoints = Target.Entity.PKPoints;
                    Information.Mentor_Mesh = Target.Entity.Mesh;
                    Information.Mentor_Online = true;
                    Information.Shared_Battle_Power = client.Entity.BattlePowerFrom(Target.Entity);
                    Information.String_Count = 3;
                    Information.Mentor_Name = Target.Entity.Name;
                    Information.Apprentice_Name = client.Entity.Name;
                    Information.Mentor_Spouse_Name = Target.Entity.Spouse;

                    client.Send(Information);
                    client.Mentor = new Conquer_Online_Server.Game.ConquerStructures.Society.Mentor();
                    client.Mentor.ID = Target.Entity.UID;
                    client.Mentor.Name = Target.Entity.Name;
                    client.Mentor.EnroleDate = EnroleDate;
                    client.ReviewMentor();

                    ApprenticeInformation AppInfo = new ApprenticeInformation();
                    AppInfo.Apprentice_ID = client.Entity.UID;
                    AppInfo.Apprentice_Level = client.Entity.Level;
                    AppInfo.Apprentice_Name = client.Entity.Name;
                    AppInfo.Apprentice_Online = true;
                    AppInfo.Apprentice_Class = client.Entity.Class;
                    AppInfo.Apprentice_PkPoints = client.Entity.PKPoints;
                    AppInfo.Apprentice_Spouse_Name = client.Entity.Spouse;
                    AppInfo.Enrole_date = EnroleDate;
                    AppInfo.Mentor_ID = Target.Entity.UID;
                    AppInfo.Mentor_Mesh = Target.Entity.Mesh;
                    AppInfo.Mentor_Name = Target.Entity.Name;
                    AppInfo.Type = 2;
                    Target.Send(AppInfo);
                    Target.Apprentices.Add(client.Entity.UID, new Conquer_Online_Server.Game.ConquerStructures.Society.Apprentice()
                    {
                        ID = client.Entity.UID,
                        Name = client.Entity.Name,
                        EnroleDate = EnroleDate
                    });
                    Database.KnownPersons.AddMentor(client.Mentor, Target.Apprentices[client.Entity.UID]);
                }
                else
                {
                    Target.Send(new Message(client.Entity.Name + " declined your request.", System.Drawing.Color.Beige, Message.Talk));
                }
            }
        }
        #endregion
        #region TradePartners
        static void RequestTradePartnership(TradePartner partner, Client.GameClient client)
        {
            if (client.Screen.Contains(partner.UID))
            {
                var Client = Kernel.GamePool[partner.UID];
                if (Client != null)
                {
                    if (Client.TradePartnerRequest != client.Entity.UID)
                    {
                        client.TradePartnerRequest = Client.Entity.UID;
                        partner.UID = client.Entity.UID;
                        partner.Name = client.Entity.Name;
                        Client.Send(partner);
                    }
                    else
                    {
                        DateTime Now = DateTime.Now;
                        client.Partners.Add(Client.Entity.UID, new Conquer_Online_Server.Game.ConquerStructures.Society.TradePartner()
                        {
                            ID = Client.Entity.UID,
                            Name = Client.Entity.Name,
                            ProbationStartedOn = Now
                        });
                        Client.Partners.Add(client.Entity.UID, new Conquer_Online_Server.Game.ConquerStructures.Society.TradePartner()
                        {
                            ID = Client.Entity.UID,
                            Name = Client.Entity.Name,
                            ProbationStartedOn = Now
                        });
                        client.Send(new TradePartner(true)
                        {
                            UID = Client.Entity.UID,
                            Type = TradePartner.AddPartner,
                            Name = Client.Entity.Name,
                            HoursLeft = (int)(new TimeSpan(Now.AddDays(3).Ticks).TotalHours - new TimeSpan(Now.Ticks).TotalHours),
                            Online = true
                        });
                        Client.Send(new TradePartner(true)
                        {
                            UID = client.Entity.UID,
                            Type = TradePartner.AddPartner,
                            Name = client.Entity.Name,
                            HoursLeft = (int)(new TimeSpan(Now.AddDays(3).Ticks).TotalHours - new TimeSpan(Now.Ticks).TotalHours),
                            Online = true
                        });
                        Database.KnownPersons.AddPartner(client, client.Partners[Client.Entity.UID]);
                        client.SendScreen(new Message(Client.Entity.Name + " has begun " + client.Entity.Name + " a partnership probation for three days!", System.Drawing.Color.Red, Message.TopLeft), true);
                    }
                }
            }
        }
        static void RejectPartnership(TradePartner partner, Client.GameClient client)
        {
            client.TradePartnerRequest = 0;
            var Client = Kernel.GamePool[partner.UID];
            if (Client != null)
            {
                Client.Send(new TradePartner(true)
                {
                    UID = client.Entity.UID,
                    Type = TradePartner.RejectRequest,
                    Name = client.Entity.Name,
                    Online = true
                });
            }
        }
        static void BreakPartnership(TradePartner partner, Client.GameClient client)
        {
            if (client.Partners.ContainsKey(partner.UID))
            {
                GameClient Client;
                if (Kernel.GamePool.TryGetValue(partner.UID, out Client))
                {
                    Client.Partners.Remove(client.Entity.UID);
                    Client.Send(new TradePartner(true)
                    {
                        UID = client.Entity.UID,
                        Type = TradePartner.BreakPartnership,
                        Name = "",
                        Online = false
                    });
                    Client.Send(new Message(client.Entity.Name + " has broken the partnership with you.", System.Drawing.Color.Red, Message.TopLeft));

                    client.Send(new TradePartner(true)
                    {
                        UID = partner.UID,
                        Type = TradePartner.BreakPartnership,
                        Name = "",
                        Online = false
                    });
                    client.Partners.Remove(partner.UID);
                    Database.KnownPersons.RemovePartner(client, partner.UID);
                    Client.Send(new Message("You have broken the partnership with " + partner.Name + ".", System.Drawing.Color.Red, Message.TopLeft));
                }
            }
        }
        #endregion
        #region KnownPersons
        static void RemoveFriend(KnownPersons knownperson, Client.GameClient client)
        {
            if (client.Friends.ContainsKey(knownperson.UID))
            {
                Game.ConquerStructures.Society.Friend friend = client.Friends[knownperson.UID];
                if (friend.IsOnline)
                {
                    friend.Client.Friends.Remove(client.Entity.UID);
                    friend.Client.Send(new KnownPersons(true)
                    {
                        UID = client.Entity.UID,
                        Type = KnownPersons.RemovePerson,
                        Name = "",
                        Online = false
                    });
                }
                client.Friends.Remove(friend.ID);
                client.Send(new KnownPersons(true)
                {
                    UID = friend.ID,
                    Type = KnownPersons.RemovePerson,
                    Name = "",
                    Online = false
                });
                Database.KnownPersons.RemoveFriend(client, friend.ID);
            }
        }
        static void RemoveEnemy(KnownPersons knownperson, Client.GameClient client)
        {
            if (client.Enemy.ContainsKey(knownperson.UID))
            {
                Game.ConquerStructures.Society.Enemy enemy = client.Enemy[knownperson.UID];

                client.Enemy.Remove(enemy.ID);
                client.Send(new KnownPersons(true)
                {
                    UID = enemy.ID,
                    Type = KnownPersons.RemovePerson,
                    Name = "",
                    Online = false
                });
                Database.KnownPersons.RemoveEnemy(client, enemy.ID);
            }
        }
        static void AddFriend(KnownPersons knownperson, Client.GameClient client)
        {
            if (!client.Friends.ContainsKey(knownperson.UID))
            {
                if (Kernel.GamePool.ContainsKey(knownperson.UID))
                {
                    Client.GameClient Client = Kernel.GamePool[knownperson.UID];
                    if (Client != null)
                    {
                        Client.MessageOK = delegate
                        {
                            if (client != null)
                            {
                                if (client.Socket.Alive)
                                {
                                    if (!Client.Friends.ContainsKey(client.Entity.UID))
                                    {
                                        client.Friends.Add(Client.Entity.UID, new Conquer_Online_Server.Game.ConquerStructures.Society.Friend()
                                        {
                                            ID = Client.Entity.UID,
                                            Name = Client.Entity.Name
                                        });
                                        Client.Friends.Add(client.Entity.UID, new Conquer_Online_Server.Game.ConquerStructures.Society.Friend()
                                        {
                                            ID = client.Entity.UID,
                                            Name = client.Entity.Name
                                        });
                                        client.Send(new KnownPersons(true)
                                        {
                                            UID = Client.Entity.UID,
                                            Type = KnownPersons.AddFriend,
                                            Name = Client.Entity.Name,
                                            Online = true
                                        });
                                        Client.Send(new KnownPersons(true)
                                        {
                                            UID = client.Entity.UID,
                                            Type = KnownPersons.AddFriend,
                                            Name = client.Entity.Name,
                                            Online = true
                                        });
                                        Database.KnownPersons.AddFriend(client, client.Friends[Client.Entity.UID]);
                                        client.SendScreen(new Message(Client.Entity.Name + " has accepted " + client.Entity.Name + "'s friendship request.", System.Drawing.Color.Red, Message.TopLeft), true);
                                    }
                                }
                            }
                        };
                        Client.MessageCancel = delegate
                        {
                            if (client != null)
                            {
                                if (client.Socket.Alive)
                                {
                                    if (Client != null)
                                    {
                                        if (Client.Socket.Alive)
                                        {
                                            client.Send(new Message(Client.Entity.Name + " has rejected your friendship request.", System.Drawing.Color.Red, Message.TopLeft));
                                        }
                                    }
                                }
                            }
                        };
                        Client.Send(new NpcReply(NpcReply.MessageBox, client.Entity.Name + " wants to be your friend."));
                    }
                }
            }
        }

        public static void AddEnemy(Client.GameClient client, Client.GameClient enemy)
        {
            if (!client.Enemy.ContainsKey(enemy.Entity.UID))
            {
                client.Enemy.Add(enemy.Entity.UID, new Conquer_Online_Server.Game.ConquerStructures.Society.Enemy()
                {
                    ID = enemy.Entity.UID,
                    Name = enemy.Entity.Name
                });
                client.Send(new KnownPersons(true)
                {
                    UID = enemy.Entity.UID,
                    Type = KnownPersons.AddEnemy,
                    Name = enemy.Entity.Name,
                    Online = true
                });
                Database.KnownPersons.AddEnemy(client, client.Enemy[enemy.Entity.UID]);
            }
        }

        #endregion

        public static void Teleport(Client.GameClient client, VIPTeleportLocations Location)
        {
            switch (Location)
            {
                case VIPTeleportLocations.TwinCity:
                case VIPTeleportLocations.TCSquare: client.Entity.Teleport((ushort)Game.Enums.Maps.TwinCity, 300, 278); break;
                case VIPTeleportLocations.WPFarm: client.Entity.Teleport((ushort)Game.Enums.Maps.TwinCity, 378, 162); break;
                case VIPTeleportLocations.WPBridge: client.Entity.Teleport((ushort)Game.Enums.Maps.TwinCity, 598, 678); break;
                case VIPTeleportLocations.WPAltar: client.Entity.Teleport((ushort)Game.Enums.Maps.TwinCity, 564, 793); break;
                case VIPTeleportLocations.WPApparation: client.Entity.Teleport((ushort)Game.Enums.Maps.TwinCity, 340, 650); break;
                case VIPTeleportLocations.WPPoltergiest: client.Entity.Teleport((ushort)Game.Enums.Maps.TwinCity, 230, 388); break;
                case VIPTeleportLocations.WPTurtledove: client.Entity.Teleport((ushort)Game.Enums.Maps.TwinCity, 627, 474); break;

                case VIPTeleportLocations.PhoenixCastle:
                case VIPTeleportLocations.PCSqaure: client.Entity.Teleport((ushort)Game.Enums.Maps.PhoenixCastle, 188, 264); break;
                case VIPTeleportLocations.MFWaterCave: client.Entity.Teleport((ushort)Game.Enums.Maps.PhoenixCastle, 380, 31); break;
                case VIPTeleportLocations.MFVillage: client.Entity.Teleport((ushort)Game.Enums.Maps.PhoenixCastle, 785, 472); break;
                case VIPTeleportLocations.MFLake: client.Entity.Teleport((ushort)Game.Enums.Maps.PhoenixCastle, 369, 568); break;
                case VIPTeleportLocations.MFMineCave: client.Entity.Teleport((ushort)Game.Enums.Maps.PhoenixCastle, 924, 560); break;
                case VIPTeleportLocations.MFBridge: client.Entity.Teleport((ushort)Game.Enums.Maps.PhoenixCastle, 648, 567); break;
                case VIPTeleportLocations.MFToApeCity: client.Entity.Teleport((ushort)Game.Enums.Maps.PhoenixCastle, 475, 841); break;

                case VIPTeleportLocations.ApeCity:
                case VIPTeleportLocations.ACSquare: client.Entity.Teleport((ushort)Game.Enums.Maps.ApeMoutain, 565, 562); break;
                case VIPTeleportLocations.ACSouth: client.Entity.Teleport((ushort)Game.Enums.Maps.ApeMoutain, 699, 640); break;
                case VIPTeleportLocations.ACEast: client.Entity.Teleport((ushort)Game.Enums.Maps.ApeMoutain, 624, 337); break;
                case VIPTeleportLocations.ACNorth: client.Entity.Teleport((ushort)Game.Enums.Maps.ApeMoutain, 200, 224); break;
                case VIPTeleportLocations.ACWest: client.Entity.Teleport((ushort)Game.Enums.Maps.ApeMoutain, 322, 621); break;

                case VIPTeleportLocations.DesertCity:
                case VIPTeleportLocations.DCSquare: client.Entity.Teleport((ushort)Game.Enums.Maps.DesertCity, 500, 650); break;
                case VIPTeleportLocations.DCSouth: client.Entity.Teleport((ushort)Game.Enums.Maps.DesertCity, 758, 750); break;
                case VIPTeleportLocations.DCVillage: client.Entity.Teleport((ushort)Game.Enums.Maps.DesertCity, 480, 271); break;
                case VIPTeleportLocations.DCMoonSpring: client.Entity.Teleport((ushort)Game.Enums.Maps.DesertCity, 291, 450); break;
                case VIPTeleportLocations.DCAncientMaze: client.Entity.Teleport((ushort)Game.Enums.Maps.DesertCity, 87, 321); break;

                case VIPTeleportLocations.BirdIland:
                case VIPTeleportLocations.BISquare: client.Entity.Teleport((ushort)Game.Enums.Maps.BirdIsland, 717, 571); break;
                case VIPTeleportLocations.BICenter: client.Entity.Teleport((ushort)Game.Enums.Maps.BirdIsland, 585, 593); break;
                case VIPTeleportLocations.BISouthWest: client.Entity.Teleport((ushort)Game.Enums.Maps.BirdIsland, 562, 786); break;
                case VIPTeleportLocations.BINorthWest: client.Entity.Teleport((ushort)Game.Enums.Maps.BirdIsland, 125, 323); break;
                case VIPTeleportLocations.BINorthEast: client.Entity.Teleport((ushort)Game.Enums.Maps.BirdIsland, 125, 323); break;
            }
        }
        #region Attack
        public static void Attack(Attack attack, Client.GameClient client)
        {
            client.Entity.RemoveMagicDefender();
            client.Entity.AttackPacket = attack;
            new Game.Attacking.Handle(attack, client.Entity, null);
        }
        #endregion
        #region Trade
        static void RequestTrade(Trade trade, Client.GameClient client)
        {
            Client.GameClient _client = null;
            if (Kernel.GamePool.TryGetValue(trade.dwParam, out _client))
            {
                if (_client.Trade.InTrade || client.Trade.InTrade || client.Entity.UID == trade.dwParam || Kernel.GetDistance(client.Entity.X, client.Entity.Y, _client.Entity.X, _client.Entity.Y) > Constants.pScreenDistance)
                {
                    client.Send(Constants.TradeInProgress);
                    return;
                }
                client.Trade.TraderUID = _client.Entity.UID;
                if (_client.Trade.TraderUID == client.Entity.UID)
                {
                    _client.Trade.InTrade = client.Trade.InTrade = true;
                    trade.Type = Trade.ShowTable;
                    client.Send(trade);
                    trade.dwParam = client.Entity.UID;
                    _client.Send(trade);
                }
                else
                {

                    //client.Send(Constants.TradeRequest);
                    client.Send(new Network.GamePackets.Message("[Trade]The trade request has been sent.", System.Drawing.Color.Red, Message.System));
                    trade.dwParam = client.Entity.UID;
                    PopupLevelBP request = new PopupLevelBP();
                    request.Requester = client.Entity.UID;
                    request.Receiver = _client.Entity.UID;
                    request.Level = client.Entity.Level;
                    request.BattlePower = (uint)client.Entity.BattlePower;
                    _client.Send(request);
                    _client.Send(trade);
                    _client.Send(request);

                }
            }
        }
        static void CloseTrade(Trade trade, Client.GameClient client)
        {
            Client.GameClient _client = null;
            if (Kernel.GamePool.TryGetValue(client.Trade.TraderUID, out _client))
            {
                _client.Trade = new Game.ConquerStructures.Trade();
                client.Trade = new Game.ConquerStructures.Trade();
                trade.Type = Trade.HideTable;
                trade.dwParam = _client.Entity.UID;
                client.Send(trade);
                trade.dwParam = client.Entity.UID;
                _client.Send(trade);
            }
        }
        static void AddTradeItem(Trade trade, Client.GameClient client)
        {
            ConquerItem item = null;
            if (client.Inventory.TryGetItem(trade.dwParam, out item))
            {
                Client.GameClient _client = null;
                if (Kernel.GamePool.TryGetValue(client.Trade.TraderUID, out _client) && !Constants.SoulList.Contains((int)item.ID) && !Constants.SoulList.Contains((int)item.Purification.PurificationItemID))
                {
                    Database.ConquerItemInformation infos = new Database.ConquerItemInformation(item.ID, 0);
                    if (infos.BaseInformation.Type != Database.ConquerItemBaseInformation.ItemType.Dropable || (item.Lock != 0 && !client.Partners.ContainsKey(_client.Entity.UID) && !client.Partners[_client.Entity.UID].StillOnProbation) || item.Bound || item.Suspicious)
                    {
                        trade.Type = Trade.RemoveItem;
                        client.Send(trade);
                        return;
                    }
                    if (_client.Inventory.Count + client.Trade.Items.Count >= 40 || client.Trade.Items.Count == 20)
                    {
                        trade.Type = Trade.RemoveItem;
                        client.Send(trade);
                        client.Send(Constants.TradeInventoryFull);
                        return;
                    }
                    client.Trade.Items.Add(item);
                    item.Mode = Game.Enums.ItemMode.Trade;
                    item.Send(_client);
                }
                else
                {
                    Network.GamePackets.NpcReply npc = new Network.GamePackets.NpcReply(6, "you cant trade any Special Soul only can sell in market in Shop more than 1 kk cps ok?");
                    npc.OptionID = 255;
                    client.Send(npc.ToArray());
                }



            }
        }
        static void SetTradeMoney(Trade trade, Client.GameClient client)
        {
            Client.GameClient _client = null;
            if (Kernel.GamePool.TryGetValue(client.Trade.TraderUID, out _client))
            {
                if (client.Trade.Money == 0)
                {
                    if (client.Entity.Money >= trade.dwParam)
                    {
                        client.Trade.Money = trade.dwParam;
                        trade.Type = Trade.ShowMoney;
                        _client.Send(trade);
                    }
                    else
                        CloseTrade(trade, client);
                }
            }
        }
        static void SetTradeConquerPoints(Trade trade, Client.GameClient client)
        {
            Client.GameClient _client = null;
            if (Kernel.GamePool.TryGetValue(client.Trade.TraderUID, out _client))
            {
                if (client.Trade.ConquerPoints == 0)
                {
                    if (client.Entity.ConquerPoints >= trade.dwParam)
                    {
                        client.Trade.ConquerPoints = trade.dwParam;
                        trade.Type = Trade.ShowConquerPoints;
                        _client.Send(trade);
                    }
                    else
                        CloseTrade(trade, client);
                }
            }
        }
        static void AcceptTrade(Trade trade, Client.GameClient client)
        {
            Client.GameClient _client = null;
            if (Kernel.GamePool.TryGetValue(client.Trade.TraderUID, out _client))
            {
                client.Trade.Accepted = true;
                _client.Send(trade);
                if (_client.Trade.Accepted)
                {
                    lock (client.ItemSyncRoot)
                    {
                        lock (_client.ItemSyncRoot)
                        {
                            if (client.Inventory.Count + _client.Trade.Items.Count <= 40)
                            {
                                foreach (ConquerItem item in _client.Trade.Items)
                                {
                                    if (_client.Inventory.ContainsUID(item.UID))
                                    {
                                        client.Inventory.Add(item, Game.Enums.ItemUse.Move);
                                        _client.Inventory.Remove(item.UID, Game.Enums.ItemUse.None, true);
                                    }
                                }
                            }
                            if (_client.Inventory.Count + client.Trade.Items.Count <= 40)
                            {
                                foreach (ConquerItem item in client.Trade.Items)
                                {
                                    if (client.Inventory.ContainsUID(item.UID))
                                    {
                                        _client.Inventory.Add(item, Game.Enums.ItemUse.Move);
                                        client.Inventory.Remove(item.UID, Game.Enums.ItemUse.None, true);
                                    }
                                }
                            }

                            if (_client.Trade.Money <= _client.Entity.Money)
                            {
                                _client.Entity.Money -= _client.Trade.Money;
                                client.Entity.Money += _client.Trade.Money;
                            }
                            if (client.Trade.Money <= client.Entity.Money)
                            {
                                client.Entity.Money -= client.Trade.Money;
                                _client.Entity.Money += client.Trade.Money;
                            }
                            if (_client.Trade.ConquerPoints <= _client.Entity.ConquerPoints)
                            {
                                _client.Entity.ConquerPoints -= _client.Trade.ConquerPoints;
                                client.Entity.ConquerPoints += _client.Trade.ConquerPoints;
                            }
                            if (client.Trade.ConquerPoints <= client.Entity.ConquerPoints)
                            {
                                client.Entity.ConquerPoints -= client.Trade.ConquerPoints;
                                _client.Entity.ConquerPoints += client.Trade.ConquerPoints;
                            }

                            trade.Type = Trade.HideTable;
                            trade.dwParam = client.Entity.UID;
                            client.Send(trade);
                            trade.dwParam = _client.Entity.UID;
                            _client.Send(trade);

                            Program.AddTradeLog(client.Trade, client.Entity.Name, _client.Trade, _client.Entity.Name);
                            _client.Trade = new Game.ConquerStructures.Trade();
                            client.Trade = new Game.ConquerStructures.Trade();
                            client.Entity.Money = (uint)client.Entity.Money;
                            _client.Entity.Money = (uint)_client.Entity.Money;
                            client.Entity.ConquerPoints = (uint)client.Entity.ConquerPoints;
                            _client.Entity.ConquerPoints = (uint)_client.Entity.ConquerPoints;
                            Database.EntityTable.UpdateCps(client);
                            Database.EntityTable.UpdateCps(_client);
                        }
                    }
                }
            }
        }
        #endregion
        #region ItemHandler
        public static void StabilazeRefinery(ItemAddingStabilization stabilizate, Client.GameClient client)
        {
            ConquerItem Item = null; //GhostworleD By keka           
            if (client.Inventory.TryGetItem(stabilizate.ItemUID, out Item))
            {
                if (Item.RefineStats.Identifier != 0)
                {
                    if (DateTime.Now <= Item.RefineryTime)
                    {
                        List<uint> purificationStones = stabilizate.PurificationItems;
                        int sum = 0;
                        List<ConquerItem> PurificationStones = new List<ConquerItem>(purificationStones.Count);
                        for (int i = 0; i < purificationStones.Count; i++)
                        {
                            ConquerItem pItem = null;
                            if (client.Inventory.TryGetItem(purificationStones[i], out pItem))
                            {
                                if (pItem.ID == 723694)
                                {
                                    sum += 10;
                                    PurificationStones.Add(pItem);
                                }
                                if (pItem.ID == 723695)
                                {
                                    sum += 100;
                                    PurificationStones.Add(pItem);
                                }
                            }
                        }
                        if (sum >= Database.DataHolder.PurifyStabilizationPoints((byte)Item.RefineStats.Level))
                        {
                            var Backup = Item;
                            Backup.RefineryTime = new DateTime(0);
                            Item = Backup;
                            Item.Send(client);
                            Database.ItemAddingTable.StabilizeRefinery(Item.UID, Backup.ExtraEffect.EffectID);
                            Database.ItemAddingTable.GetAddingsForItem(Item);
                            foreach (var item in PurificationStones)
                                client.Inventory.Remove(item, Conquer_Online_Server.Game.Enums.ItemUse.Remove);
                        }
                    }
                }
            }
        }
        public static void StabilazeArtifact(ItemAddingStabilization stabilizate, Client.GameClient client)
        {
            ConquerItem Item = null;
            if (client.Inventory.TryGetItem(stabilizate.ItemUID, out Item))
            {
                if (Item.Purification.PurificationDuration != 0)
                {
                    if (Item.Purification.PurificationItemID != 0)
                    {
                        List<uint> purificationStones = stabilizate.PurificationItems;
                        int sum = 0;
                        List<ConquerItem> PurificationStones = new List<ConquerItem>(purificationStones.Count);

                        for (int i = 0; i < purificationStones.Count; i++)
                        {
                            ConquerItem pItem = null;
                            if (client.Inventory.TryGetItem(purificationStones[i], out pItem))
                            {
                                if (pItem.ID == 723694)
                                {
                                    sum += 10;
                                    PurificationStones.Add(pItem);
                                }
                                if (pItem.ID == 723695)
                                {
                                    sum += 100;
                                    PurificationStones.Add(pItem);
                                }
                            }
                        }
                        if (sum >= Database.DataHolder.PurifyStabilizationPoints((byte)Item.Purification.PurificationLevel))
                        {
                            var Backup = Item.Purification;
                            Backup.PurificationDuration = 0;
                            Item.Purification = Backup;
                            Item.Send(client);
                            Database.ItemAddingTable.Stabilize(Item.UID, Backup.PurificationItemID);
                            foreach (var item in PurificationStones)
                                client.Inventory.Remove(item, Conquer_Online_Server.Game.Enums.ItemUse.Remove);
                        }
                    }
                }
            }
        }
        static bool DemonTime(Client.GameClient client)
        {
            if (Program.World.DemonBox) return true;
            else
            {
                client.Send(new Message("You can only open the DemonBoxes when it's Sunday and Friday at 05:00 to 05:15 and 14:00 to 14:15 Server time! ", Color.Red, 2012));
                return false;
            }
        }
        public static void PurifyRefinery(Purification ps, Client.GameClient client)
        {
            ConquerItem item = null, refine = null;
            client.Inventory.TryGetItem(ps.ItemUID, out item);
            client.Inventory.TryGetItem(ps.AddUID, out refine);
            if (refine != null)
            {
                if (item == null)
                    item = client.Equipment.TryGetItem(ps.ItemUID);
                if (item != null)
                {
                    Refinery.RefineryItem refineStats;
                    if (Kernel.DatabaseRefinery.TryGetValue(refine.ID, out refineStats))
                    {
                        Boolean valid = true;
                        if (item.Position < 100)
                        {
                            UInt32 iType = item.ID / 1000;
                            Positions pos = GetPositionFromID(item.ID);
                            if (pos != (Positions)refineStats.Position)
                                valid = false;
                            if (pos == Positions.Garment)
                                return;
                            if (pos == Positions.Steed)
                                return;
                            if (pos == Positions.Bottle)
                                return;
                            if (pos == Positions.SteedArmor)
                                return;
                            if (pos == Positions.SteedTalisman)
                                return;
                            if (pos == Positions.LeftAccessory)
                                return;
                            if (pos == Positions.RightAccessory)
                                return;
                            if (pos == Positions.DefenceTalisman)
                                return;
                            if (pos == Positions.AttackTalisman)
                                return;
                            else if (refineStats.Position == 5)
                                valid = item.IsTwoHander();
                            if (iType == refineStats.Position)
                                valid = true;
                        }
                        else
                        {
                            if (item.GetItemType() != (ConquerItem.ItemTypes)refineStats.Position)
                                valid = false;
                        }

                        if (valid)
                        {
                            if (item.Position == 7)
                                return;
                            if (item.Position == 9)
                                return;
                            if (item.Position == 11)
                                return;
                            if (item.Position == 12)
                                return;
                            if (item.Position == 10)
                                return;
                            if (item.Position == 18)
                                return;
                            if (item.Position == 17)
                                return;
                            if (item.Position == 15)
                                return;
                            if (item.Position == 16)
                                return;
                            client.Inventory.Remove(refine, Game.Enums.ItemUse.Remove);
                            item.RefineItem = refineStats.Identifier;
                            item.RefineryTime = DateTime.Now.AddDays(7);
                            item.Mode = Game.Enums.ItemMode.Update;
                            item.Send(client);

                            client.CalculateStatBonus();
                            client.CalculateHPBonus();
                            client.LoadItemStats();
                            //Calculations.AttackDefence(ref c.Hero);

                            Database.ConquerItemTable.UpdateRefineryItem(item);
                            Database.ConquerItemTable.UpdateRefineryTime(item);
                            client.Send(WindowStats(client));
                            //LoadItemStatus(client);
                            // c.Send(new Game_HeroStats(c.Hero));
                        }
                        else
                            client.Send(new Message(String.Format("You cannot refine your {0} with that {1}.",
                                Database.ConquerItemInformation.BaseInformations[item.ID].Name, Database.ConquerItemInformation.BaseInformations[refine.ID].Name), System.Drawing.Color.Red, Message.TopLeft));
                    }
                    else
                        Console.WriteLine(String.Format("No database refinery {0}", refine.ID));
                }
            }
        }
        public static void PurifyItem(Purification ps, Client.GameClient client)
        {
            ConquerItem Item = null, AddingItem = null;
            if (client.Inventory.TryGetItem(ps.ItemUID, out Item) && client.Inventory.TryGetItem(ps.AddUID, out AddingItem))
            {
                if (ps.ItemUID == ps.AddUID)
                    return;

                var PurifyInformation = Database.ConquerItemInformation.BaseInformations[AddingItem.ID];
                var ItemInformation = Database.ConquerItemInformation.BaseInformations[Item.ID];
                if (PurifyInformation.PurificationLevel > 0)
                {
                    if (ItemInformation.Level >= PurifyInformation.Level)
                    {

                        ////Cheat Engine Protection By AbdouMatrix
                        if (Conquer_Online_Server.MaTrix.SoulProtection.Soul_Protections.ContainsKey(PurifyInformation.ID))
                        {
                            var info = Conquer_Online_Server.MaTrix.SoulProtection.Soul_Protections[PurifyInformation.ID];
                            if (info.ItemType >= ConquerItem.AlternateGarment)
                            {
                                if (ItemInformation.ID / 1000 != info.ItemType)
                                    return;
                            }
                            else
                            {
                                if (GetPositionFromID(ItemInformation.ID) != info.Pos)
                                    return;
                            }

                        }  
                      

                        var doPurify = false;
                        if (client.Inventory.Contains(720027, (ushort)(PurifyInformation.PurificationMeteorNeed / 10)))
                        {
                            client.Inventory.Remove(720027, (byte)(PurifyInformation.PurificationMeteorNeed / 10));
                            doPurify = true;
                        }
                        if (!doPurify && client.Inventory.Contains(1088001, PurifyInformation.PurificationMeteorNeed))
                        {
                            client.Inventory.Remove(1088001, (byte)PurifyInformation.PurificationMeteorNeed);
                            doPurify = true;
                        }
                        if (doPurify)
                        {
                            if (Item.Purification.PurificationItemID > 0)
                                Database.ItemAddingTable.RemoveAdding(Item.UID, Item.Purification.PurificationItemID);
                            client.Send(ps);
                            ItemAdding.Purification_ purify = new ItemAdding.Purification_();
                            purify.AddedOn = DateTime.Now;
                            purify.Available = true;
                            purify.ItemUID = ps.ItemUID;
                            purify.PurificationLevel = PurifyInformation.PurificationLevel;
                            if (client.Entity.VIPLevel == 1)
                                purify.PurificationDuration = 8 * 24 * 60 * 60;
                            else if (client.Entity.VIPLevel == 2)
                                purify.PurificationDuration = 9 * 24 * 60 * 60;
                            else if (client.Entity.VIPLevel == 3)
                                purify.PurificationDuration = 11 * 24 * 60 * 60;
                            else if (client.Entity.VIPLevel == 4)
                                purify.PurificationDuration = 14 * 24 * 60 * 60;
                            else if (client.Entity.VIPLevel == 5)
                                purify.PurificationDuration = 14 * 24 * 60 * 60;
                            else if (client.Entity.VIPLevel == 6)
                                purify.PurificationDuration = 14 * 24 * 60 * 60;
                            else
                                purify.PurificationDuration = 7 * 24 * 60 * 60;
                            purify.PurificationItemID = AddingItem.ID;
                            Database.ItemAddingTable.AddPurification(purify);
                            Item.Purification = purify;
                            Item.Mode = Conquer_Online_Server.Game.Enums.ItemMode.Update;
                            Item.Send(client);
                            ItemAdding effect = new ItemAdding(true);
                            effect.Type = ItemAdding.PurificationEffect;
                            effect.Append2(purify);
                            client.Send(effect);
                            client.Inventory.Remove(AddingItem, Conquer_Online_Server.Game.Enums.ItemUse.Remove);
                            client.CalculateStatBonus();
                            client.LoadItemStats();
                            client.CalculateHPBonus();
                            client.Send(ps);
                        }
                    }
                }
            }
        }
        public static bool IsEquipment(long ID)
        {
            return ItemPosition((uint)ID) != 0;
        }
        public static void ReloadArrows(ConquerItem arrow, Client.GameClient client)
        {
            if (client.Entity.Class < 40 || client.Entity.Class > 45)
                return;
            if (client.Equipment.Free(4))
                return;
            if (client.Equipment.TryGetItem(4).ID / 1000 != 500)
                return;
            client.Equipment.DestroyArrow(5);
            uint id = 1050002;
            if (arrow != null)
                id = arrow.ID;
            if (client.Inventory.Contains(id, 1))
            {
                var newArrow = client.Inventory.GetItemByID(id);
                newArrow.Position = 5;
                client.Inventory.Remove(newArrow, Conquer_Online_Server.Game.Enums.ItemUse.Move);
                Database.ConquerItemInformation infos = new Database.ConquerItemInformation(id, 0);

                client.Equipment.Add(newArrow);
                client.Equipment.Objects[4].UID += 0;
                client.Equipment.Objects[4].Send(client);

                ClientEquip equips = new ClientEquip();
                equips.DoEquips(client);
                client.Send(equips);

                client.Send(Constants.ArrowsReloaded);
            }
            else if (!client.Inventory.Contains(id, 1))
            {
                client.Send(Constants.NoArrows(Database.ConquerItemInformation.BaseInformations[id].Name));
            }
        }
        static void ComposePlus(Compose compose, Client.GameClient client)
        {
            ConquerItem Item = null;
            ConquerItem[] Minors = null;
            if (client.Inventory.TryGetItem(compose[0], out Item) || (client.Equipment.TryGetItem(compose[0]) != null))
            {
                if (Item == null && client.Inventory.TryGetItem(compose[0], out Item) == false && (client.Equipment.TryGetItem(compose[0]) != null))
                    Item = client.Equipment.TryGetItem(compose[0]);

                if (compose.Mode == Compose.DragonBallUpgrade || compose.Mode == Compose.MeteorUpgrade)
                {
                    Minors = new ConquerItem[compose.Countx];
                    for (int i = 0; i < compose.Countx; i++)
                    {
                        if (!client.Inventory.TryGetItem(compose[i + 2], out Minors[i]))
                            return;
                        else
                            if (Minors[i].UID == Item.UID)
                                return;
                    }
                }
                else
                {
                    Minors = new ConquerItem[compose.Count - 1];
                    for (int i = 0; i < compose.Count - 1; i++)
                    {
                        if (!client.Inventory.TryGetItem(compose[i + 1], out Minors[i]))
                            return;
                        else
                            if (Minors[i].UID == Item.UID)
                                return;
                    }
                }
                ushort pos = ItemPosition(Item.ID);
                if (pos == ConquerItem.Bottle || pos == ConquerItem.Garment || pos == ConquerItem.LeftWeaponAccessory || pos == ConquerItem.RightWeaponAccessory || pos == ConquerItem.SteedArmor) //mohsen.. i'm remove crop 
                    return;

                if (compose.Mode == Compose.ChanceUpgrade)
                {
                    if (Item.Plus < 12 && Item.PlusProgress != 0)
                    {
                        double percent = (double)Item.PlusProgress / (double)Database.DataHolder.ComposePlusPoints(Item.Plus);
                        if (Kernel.Rate(percent))
                        {
                            Item.PlusProgress = 0;
                            Item.Plus++;
                        }
                        else
                            Item.PlusProgress = 0;
                        Item.Mode = Conquer_Online_Server.Game.Enums.ItemMode.Update;
                        Item.Send(client);
                        Database.ConquerItemTable.UpdatePlus(Item);
                        Database.ConquerItemTable.UpdatePlusProgress(Item);
                        if (Item.Plus >= 9)
                            Kernel.SendWorldMessage(new Message("Congratulations, " + client.Entity.Name + " has upgraded His " + Database.ConquerItemInformation.BaseInformations[Item.ID].Name + " to + " + Item.Plus + " and " + Item.PlusProgress + " in Progress!", System.Drawing.Color.Red, Network.GamePackets.Message.TopLeft), Program.GamePool);
                    }
                    return;
                }
                bool done = false;
                foreach (var item in Minors)
                {
                    var ItemPlus = item;
                    Database.ConquerItemInformation infos = new Conquer_Online_Server.Database.ConquerItemInformation(Item.ID, Item.Plus);
                    switch (compose.Mode)
                    {

                        case Compose.DragonBallUpgrade:
                            {
                                if (Item.ID % 10 == (byte)Game.Enums.ItemQuality.Super)
                                    break;
                                byte chance = (byte)(70 - ((infos.BaseInformation.Level - (infos.BaseInformation.Level > 100 ? 30 : 0)) / (10 - Item.ID % 10)));
                                if (Item.Durability < Item.MaximDurability)
                                    break;
                                if (Kernel.Rate(chance) || (compose.Count == compose.Countx + 2))
                                {
                                    switch ((Game.Enums.ItemQuality)(Item.ID % 10))
                                    {
                                        case Game.Enums.ItemQuality.Normal:
                                        case Game.Enums.ItemQuality.NormalV1:
                                        case Game.Enums.ItemQuality.NormalV2:
                                        case Game.Enums.ItemQuality.NormalV3: Item.ID = (Item.ID - (Item.ID % 10)) + (byte)Game.Enums.ItemQuality.Refined; break;
                                        default: Item.ID++; break;
                                    }
                                    Database.ConquerItemTable.UpdateItemID(Item, client);
                                    Item.Mode = Conquer_Online_Server.Game.Enums.ItemMode.Update;
                                    Item.Send(client);
                                    client.Send(new ItemUsage(true)
                                    {
                                        UID = client.Entity.UID,
                                        dwParam = 1,
                                        ID = ItemUsage.DragonBallUpgrade
                                    });
                                }
                                else
                                {
                                    Item.Durability = (ushort)(Item.Durability / 2);
                                    Database.ConquerItemTable.UpdateDurabilityItem(Item);
                                    Item.Mode = Conquer_Online_Server.Game.Enums.ItemMode.Update;
                                    Item.Send(client);
                                }

                                client.Inventory.Remove(ItemPlus, Conquer_Online_Server.Game.Enums.ItemUse.Remove);
                                break;

                            }
                        case Compose.MeteorUpgrade:
                            {
                                if (infos.BaseInformation.Level == ItemMaxLevel(ItemPosition(infos.BaseInformation.ID)))
                                    break;
                                byte chance = 70;
                                chance -= (byte)(infos.BaseInformation.Level / 10 * 3);
                                chance -= (byte)(((Item.ID % 10) + 1) * 3);
                                if (Item.Durability < Item.MaximDurability)
                                    break;
                                uint newid = 0;
                                if (!done)
                                    newid = infos.CalculateUplevel(); done = true;
                                if (newid != 0 && newid != Item.ID)
                                {
                                    if (Kernel.Rate(chance) || (compose.Count == compose.Countx + 2))
                                    {
                                        Item.ID = newid;
                                        infos = new Conquer_Online_Server.Database.ConquerItemInformation(Item.ID, Item.Plus);
                                        Item.Durability = Item.MaximDurability = infos.BaseInformation.Durability;
                                        Database.ConquerItemTable.UpdateItemID(Item, client);
                                        Database.ConquerItemTable.UpdateDurabilityItem(Item);
                                        Item.Mode = Conquer_Online_Server.Game.Enums.ItemMode.Update;
                                        Item.Send(client);

                                        client.Send(new ItemUsage(true)
                                        {
                                            UID = client.Entity.UID,
                                            dwParam = 1,
                                            ID = ItemUsage.MeteorUpgrade
                                        });

                                    }
                                    else
                                    {
                                        Item.Durability = (ushort)(Item.Durability / 2);
                                        Database.ConquerItemTable.UpdateDurabilityItem(Item);
                                        Item.Mode = Conquer_Online_Server.Game.Enums.ItemMode.Update;
                                        Item.Send(client);
                                    }

                                    //Item = ItemSocket(Item, 2);                                     
                                }
                                client.Inventory.Remove(ItemPlus, Conquer_Online_Server.Game.Enums.ItemUse.Remove);
                                break;
                            }
                        case Compose.CurrentSteed:
                        case Compose.Plus:
                            {
                                if (Item.Plus < 12 && Item.GetItemType() != ConquerItem.ItemTypes.GarmentID_1 && Item.GetItemType() != ConquerItem.ItemTypes.GarmentID_2 && Item.GetItemType() != ConquerItem.ItemTypes.BottleID && Item.GetItemType() != ConquerItem.ItemTypes.RightAccessory1 && Item.GetItemType() != ConquerItem.ItemTypes.RightAccessory2 && Item.GetItemType() != ConquerItem.ItemTypes.RightAccessory3 && Item.GetItemType() != ConquerItem.ItemTypes.LeftAccessory)
                                {
                                    Item.PlusProgress += Database.DataHolder.StonePlusPoints(ItemPlus.Plus);
                                    while (Item.PlusProgress >= Database.DataHolder.ComposePlusPoints(Item.Plus) && Item.Plus != 12)
                                    {
                                        Item.PlusProgress -= Database.DataHolder.ComposePlusPoints(Item.Plus);
                                        Item.Plus++;
                                        if (Item.Plus == 12)
                                            Item.PlusProgress = 0;
                                    }
                                    Item.Mode = Conquer_Online_Server.Game.Enums.ItemMode.Update;
                                    Item.Send(client);
                                    Database.ConquerItemTable.UpdatePlus(Item);
                                    Database.ConquerItemTable.UpdatePlusProgress(Item);
                                    client.Inventory.Remove(ItemPlus, Conquer_Online_Server.Game.Enums.ItemUse.Remove);
                                    if (Item.Plus >= 9)
                                        Kernel.SendWorldMessage(new Message("Congratulations, " + client.Entity.Name + " has upgraded His " + Database.ConquerItemInformation.BaseInformations[Item.ID].Name + " to + " + Item.Plus + " and " + Item.PlusProgress + " in Progress!", System.Drawing.Color.Red, Network.GamePackets.Message.TopLeft), Program.GamePool);
                                }
                                break;
                            }
                        case Compose.NewSteed:
                            {
                                if (Item.Plus < 12)
                                {
                                    Item.PlusProgress += Database.DataHolder.StonePlusPoints(ItemPlus.Plus);
                                    while (Item.PlusProgress >= Database.DataHolder.ComposePlusPoints(Item.Plus) && Item.Plus != 12)
                                    {
                                        Item.PlusProgress -= Database.DataHolder.ComposePlusPoints(Item.Plus);
                                        Item.Plus++;
                                        if (Item.Plus == 12)
                                            Item.PlusProgress = 0;
                                    }
                                    Item.Mode = Conquer_Online_Server.Game.Enums.ItemMode.Update;
                                    Item.Send(client);
                                    Database.ConquerItemTable.UpdatePlus(Item);
                                    client.Inventory.Remove(ItemPlus, Conquer_Online_Server.Game.Enums.ItemUse.Remove);
                                }

                                int color1 = (int)Item.SocketProgress;
                                int color2 = (int)ItemPlus.SocketProgress;

                                int G1 = color1 & 0xFF;
                                int G2 = color2 & 0xFF;
                                int B1 = (color1 >> 8) & 0xFF;
                                int B2 = (color2 >> 8) & 0xFF;
                                int R1 = (color1 >> 16) & 0xFF;
                                int R2 = (color2 >> 16) & 0xFF;
                                Item.NextGreen = (byte)((int)Math.Floor(0.9 * G1) + (int)Math.Floor(0.1 * G2) + 1);
                                Item.NextBlue = (byte)((int)Math.Floor(0.9 * B1) + (int)Math.Floor(0.1 * B2) + 1);
                                Item.NextRed = (byte)((int)Math.Floor(0.9 * R1) + (int)Math.Floor(0.1 * R2) + 1);
                                Item.SocketProgress = (uint)(Item.NextGreen | (Item.NextBlue << 8) | (Item.NextRed << 16));

                                Item.Mode = Conquer_Online_Server.Game.Enums.ItemMode.Update;
                                Item.Send(client);
                                Database.ConquerItemTable.UpdatePlusProgress(Item);
                                Database.ConquerItemTable.UpdateSocketProgress(Item);
                                //  Database.ConquerItemTable.UpdateNextSteedColor(Item); 
                                client.Inventory.Remove(ItemPlus, Conquer_Online_Server.Game.Enums.ItemUse.Remove);
                                break;
                            }

                    }
                }
            }
        }

        static void SocketItem(EmbedSocket socket, Client.GameClient client)
        {
            ConquerItem Item = null;
            ConquerItem Gem = null;
            if (client.Inventory.TryGetItem(socket.ItemUID, out Item))
            {
                ushort sock = ItemPosition(Item.ID);
                if (sock == 7 || sock == 9 || sock > 11)
                {
                    client.Send(new Message("Sorry can't make socket in this item !", System.Drawing.Color.Red, Message.Talk));
                    return;
                }
                if (client.Inventory.TryGetItem(socket.GemUID, out Gem) || socket.Mode == EmbedSocket.Remove)
                {
                    switch (socket.Mode)
                    {
                        case EmbedSocket.Add:
                            {
                                byte gemBase = (byte)(Gem.ID % 1000);
                                if (Enum.IsDefined(typeof(Game.Enums.Gem), gemBase))
                                {
                                    switch (socket.Slot)
                                    {
                                        case EmbedSocket.SlotOne:
                                            {
                                                if ((byte)Item.SocketOne == 255)
                                                {
                                                    var gem = (Conquer_Online_Server.Game.Enums.Gem)(Gem.ID % 1000);
                                                    if ((Item.ID >= 201003 && Item.ID <= 20109) && gem != Enums.Gem.NormalThunderGem && gem != Enums.Gem.RefinedThunderGem && gem != Enums.Gem.SuperThunderGem)
                                                        return;
                                                    if ((Item.ID >= 202003 && Item.ID <= 202009) && gem != Enums.Gem.NormalGloryGem && gem != Enums.Gem.RefinedGloryGem && gem != Enums.Gem.SuperGloryGem)
                                                        return;
                                                    Item.SocketOne = gem;
                                                    Item.Mode = Conquer_Online_Server.Game.Enums.ItemMode.Update;
                                                    Item.Send(client);
                                                    Database.ConquerItemTable.UpdateSockets(Item);
                                                    client.Inventory.Remove(Gem, Conquer_Online_Server.Game.Enums.ItemUse.Remove);
                                                    break;
                                                }
                                                break;
                                            }
                                        case EmbedSocket.SlotTwo:
                                            {
                                                var gem = (Conquer_Online_Server.Game.Enums.Gem)(Gem.ID % 1000);
                                                if ((Item.ID >= 201003 && Item.ID <= 20109) && gem != Enums.Gem.NormalThunderGem && gem != Enums.Gem.RefinedThunderGem && gem != Enums.Gem.SuperThunderGem)
                                                    return;
                                                if ((Item.ID >= 201003 && Item.ID <= 20109) && gem != Enums.Gem.NormalGloryGem && gem != Enums.Gem.RefinedGloryGem && gem != Enums.Gem.SuperGloryGem)
                                                    return;
                                                if ((byte)Item.SocketOne > 0 && (byte)Item.SocketOne < 255)
                                                {
                                                    if ((byte)Item.SocketTwo == 255)
                                                    {
                                                        Item.SocketTwo = gem;
                                                        Item.Mode = Conquer_Online_Server.Game.Enums.ItemMode.Update;
                                                        Item.Send(client);
                                                        Database.ConquerItemTable.UpdateSockets(Item);
                                                        client.Inventory.Remove(Gem, Conquer_Online_Server.Game.Enums.ItemUse.Remove);
                                                    }
                                                }
                                                else if ((byte)Item.SocketOne == 255)
                                                {
                                                    Item.SocketOne = gem;
                                                    Item.Mode = Conquer_Online_Server.Game.Enums.ItemMode.Update;
                                                    Item.Send(client);
                                                    Database.ConquerItemTable.UpdateSockets(Item);
                                                    client.Inventory.Remove(Gem, Conquer_Online_Server.Game.Enums.ItemUse.Remove);
                                                }
                                                break;
                                            }
                                    }
                                }
                                break;
                            }
                        case EmbedSocket.Remove:
                            {
                                switch (socket.Slot)
                                {
                                    case EmbedSocket.SlotOne:
                                        {
                                            if ((byte)Item.SocketOne != 0)
                                            {
                                                Item.SocketOne = Conquer_Online_Server.Game.Enums.Gem.EmptySocket;
                                                if ((byte)Item.SocketTwo != 0 && (byte)Item.SocketTwo != 255)
                                                {
                                                    Item.SocketOne = Item.SocketTwo;
                                                    Item.SocketTwo = Conquer_Online_Server.Game.Enums.Gem.EmptySocket;
                                                }
                                                Item.Mode = Conquer_Online_Server.Game.Enums.ItemMode.Update;
                                                Item.Send(client);
                                                Database.ConquerItemTable.UpdateSockets(Item);
                                                break;
                                            }
                                            break;
                                        }
                                    case EmbedSocket.SlotTwo:
                                        {
                                            if ((byte)Item.SocketTwo != 0 && (byte)Item.SocketTwo != 255)
                                            {
                                                Item.SocketTwo = Conquer_Online_Server.Game.Enums.Gem.EmptySocket;
                                                Item.Mode = Conquer_Online_Server.Game.Enums.ItemMode.Update;
                                                Item.Send(client);
                                                Database.ConquerItemTable.UpdateSockets(Item);
                                            }
                                            else
                                            {
                                                if ((byte)Item.SocketOne != 0)
                                                {
                                                    Item.SocketOne = Conquer_Online_Server.Game.Enums.Gem.EmptySocket;
                                                    Item.Mode = Conquer_Online_Server.Game.Enums.ItemMode.Update;
                                                    Item.Send(client);
                                                    Database.ConquerItemTable.UpdateSockets(Item);
                                                }
                                            }
                                            break;
                                        }
                                }
                                break;
                            }
                    }
                }
                client.Send(socket);
                System.Threading.Thread.Sleep(500);
            }
        }  

        static void LockItem(ItemLock itemLock, Client.GameClient client)
        {
            ConquerItem item = null;
            if (client.Inventory.TryGetItem(itemLock.UID, out item))
            {
                itemLock.ID = 1;
                item.Lock = 1;
                item.Mode = Game.Enums.ItemMode.Update;
                client.Send(itemLock);
                item.Send(client);
                Database.ConquerItemTable.UpdateLock(item);
            }
            else if (client.Equipment.TryGetItem(itemLock.UID) != null)
            {
                item = client.Equipment.TryGetItem(itemLock.UID);
                itemLock.ID = 1;
                item.Lock = 1;
                item.Mode = Game.Enums.ItemMode.Update;
                client.Send(itemLock);
                item.Send(client);
                Database.ConquerItemTable.UpdateLock(item);
            }
        }
        static void UnlockItemInstant(ItemLock itemLock, Client.GameClient client)
        {
            ConquerItem item = null;
            if (client.Inventory.TryGetItem(itemLock.UID, out item))
            {
                if (item.Lock == 1)
                {
                    item.Lock = 0;
                    item.Mode = Game.Enums.ItemMode.Update;
                    item.Send(client);
                    Database.ConquerItemTable.UpdateLock(item);
                }
                else
                    client.Send(new Message("Can't unlock an item that is in progress of unlocking.", System.Drawing.Color.FloralWhite, Message.TopLeft));
            }
        }
        static void UnlockItem5Days(ItemLock itemLock, Client.GameClient client)
        {
            ConquerItem item = null;
            if (client.Inventory.TryGetItem(itemLock.UID, out item))
            {
                if (item.Lock == 1)
                {
                    item.Lock = 2;
                    item.UnlockEnd = DateTime.Now.AddDays(5);
                    item.Mode = Game.Enums.ItemMode.Update;
                    item.Send(client);
                    Database.ConquerItemTable.UpdateLock(item);
                }
                else
                    client.Send(new Message("Can't unlock an item that is in progress of unlocking.", System.Drawing.Color.FloralWhite, Message.TopLeft));
            }
        }

        static void SocketTalismanWithItem(ItemUsage itemUsage, Client.GameClient client)
        {
            ConquerItem talisman = client.Equipment.TryGetItem(itemUsage.UID);
            ConquerItem item = null;
            if (client.Inventory.TryGetItem(itemUsage.dwParam, out item))
            {
                if (talisman == null)
                    return;
                if (item.ID / 1000 == talisman.ID / 1000)
                    return;
                if (item.Bound == true)
                    return;
                if (talisman.SocketTwo != Conquer_Online_Server.Game.Enums.Gem.NoSocket)
                    return;

                ushort Points = 0;
                switch (item.ID % 10)
                {
                    case 6: Points += 5; break;
                    case 7: Points += 10; break;
                    case 8: Points += 40; break;
                    case 9: Points += 1000; break;
                }
                Points += Database.DataHolder.TalismanPlusPoints(item.Plus);

                int position = ItemPosition(item.ID);
                switch (position)
                {
                    case 0: return;
                    case 4:
                    case 5:
                        if (item.ID % 10 >= 8)
                        {
                            if (item.SocketOne != Conquer_Online_Server.Game.Enums.Gem.NoSocket)
                                Points += 160;
                            if (item.SocketTwo != Conquer_Online_Server.Game.Enums.Gem.NoSocket)
                                Points += 800;
                        }
                        break;
                    default:
                        if (item.ID % 10 >= 8)
                        {
                            if (item.SocketOne != Conquer_Online_Server.Game.Enums.Gem.NoSocket)
                                Points += 2000;
                            if (item.SocketTwo != Conquer_Online_Server.Game.Enums.Gem.NoSocket)
                                Points += 6000;
                        }
                        break;
                }
                talisman.SocketProgress += Points;
                if (talisman.SocketOne == Conquer_Online_Server.Game.Enums.Gem.NoSocket)
                {
                    if (talisman.SocketProgress >= 8000)
                    {
                        talisman.SocketProgress -= 8000;
                        talisman.SocketOne = Conquer_Online_Server.Game.Enums.Gem.EmptySocket;

                        talisman.Mode = Conquer_Online_Server.Game.Enums.ItemMode.Update;
                        talisman.Send(client);
                    }
                }
                if (talisman.SocketOne != Conquer_Online_Server.Game.Enums.Gem.NoSocket)
                {
                    if (talisman.SocketProgress >= 20000)
                    {
                        talisman.SocketProgress = 0;
                        talisman.SocketTwo = Conquer_Online_Server.Game.Enums.Gem.EmptySocket;
                    }
                }
                Database.ConquerItemTable.UpdateSocketProgress(talisman);
                Database.ConquerItemTable.UpdateSockets(talisman);
                talisman.Mode = Conquer_Online_Server.Game.Enums.ItemMode.Update;
                talisman.Send(client);
                client.Inventory.Remove(item, Conquer_Online_Server.Game.Enums.ItemUse.Remove);
            }
        }
        static void SocketTalismanWithCPs(ItemUsage itemUsage, Client.GameClient client)
        {
            ConquerItem talisman = client.Equipment.TryGetItem(itemUsage.UID);

            if (talisman == null)
                return;

            ushort pos = ItemPosition(talisman.ID);
            if (pos != ConquerItem.Fan && pos != ConquerItem.Tower)
                return;

            uint price = 0;
            if (talisman.SocketOne == Conquer_Online_Server.Game.Enums.Gem.NoSocket)
            {
                double procent = 100 - (talisman.SocketProgress * 25600 / 2048000);
                if (100 - procent < 25)
                    return;
                price = (uint)(procent * 55);
            }
            else if (talisman.SocketTwo == Conquer_Online_Server.Game.Enums.Gem.NoSocket)
            {
                double procent = 100 - (talisman.SocketProgress * 25600 / 5120000);
                if (100 - procent < 25)
                    return;
                price = (uint)(procent * 110);
            }
            else
                return;
            if (client.Entity.ConquerPoints >= price)
            {
                client.Entity.ConquerPoints -= price;
                if (talisman.SocketOne == Conquer_Online_Server.Game.Enums.Gem.NoSocket)
                    talisman.SocketOne = Conquer_Online_Server.Game.Enums.Gem.EmptySocket;
                else if (talisman.SocketTwo == Conquer_Online_Server.Game.Enums.Gem.NoSocket)
                    talisman.SocketTwo = Conquer_Online_Server.Game.Enums.Gem.EmptySocket;
                talisman.SocketProgress = 0;
                Database.ConquerItemTable.UpdateSockets(talisman);
                talisman.Mode = Conquer_Online_Server.Game.Enums.ItemMode.Update;
                talisman.Send(client);
            }
        }

        static void EnchantItem(ItemUsage itemUsage, Client.GameClient client)
        {
            ConquerItem Item = null, EnchantGem = null;
            if (client.Inventory.TryGetItem(itemUsage.UID, out Item) && client.Inventory.TryGetItem(itemUsage.dwParam, out EnchantGem))
            {
                ushort pos = ItemPosition(Item.ID);
                if (pos == ConquerItem.Bottle || pos == ConquerItem.Fan || pos == ConquerItem.Garment || pos == ConquerItem.LeftWeaponAccessory || pos == ConquerItem.RightWeaponAccessory || pos == ConquerItem.Steed || pos == ConquerItem.SteedArmor || pos == ConquerItem.SteedCrop || pos == ConquerItem.Tower)
                    return;
                byte gemBase = (byte)(EnchantGem.ID % 1000);
                if (Enum.IsDefined(typeof(Game.Enums.Gem), gemBase))
                {
                    byte Enchant = 0;
                    switch (EnchantGem.ID % 10)
                    {
                        case 1:
                            {
                                Enchant = (byte)Kernel.Random.Next(1, 59);
                                break;
                            }
                        case 2:
                            {
                                if (EnchantGem.ID == 700012)
                                    Enchant = (byte)Kernel.Random.Next(100, 159);
                                else if (EnchantGem.ID == 700002 || EnchantGem.ID == 700052 || EnchantGem.ID == 700062)
                                    Enchant = (byte)Kernel.Random.Next(60, 109);
                                else if (EnchantGem.ID == 700032)
                                    Enchant = (byte)Kernel.Random.Next(80, 129);
                                else
                                    Enchant = (byte)Kernel.Random.Next(40, 89);
                                break;
                            }
                        default:
                            {
                                if (EnchantGem.ID == 700013)
                                    Enchant = (byte)Kernel.Random.Next(200, 255);
                                else if (EnchantGem.ID == 700003 || EnchantGem.ID == 700073 || EnchantGem.ID == 700033)
                                    Enchant = (byte)Kernel.Random.Next(170, 229);
                                else if (EnchantGem.ID == 700063 || EnchantGem.ID == 700053)
                                    Enchant = (byte)Kernel.Random.Next(140, 199);
                                else if (EnchantGem.ID == 700023)
                                    Enchant = (byte)Kernel.Random.Next(90, 149);
                                else
                                    Enchant = (byte)Kernel.Random.Next(70, 119);
                                break;
                            }
                    }
                    client.Send(Constants.Enchant(Item.Enchant, Enchant));
                    if (Enchant > Item.Enchant)
                    {
                        Item.Enchant = Enchant;
                        Item.Mode = Conquer_Online_Server.Game.Enums.ItemMode.Update;
                        Item.Send(client);
                        Database.ConquerItemTable.UpdateEnchant(Item);
                        client.Inventory.Remove(EnchantGem, Conquer_Online_Server.Game.Enums.ItemUse.Remove);
                    }
                    else
                    {
                        client.Inventory.Remove(EnchantGem, Conquer_Online_Server.Game.Enums.ItemUse.Remove);
                    }
                }
            }
        }

        static void UseItem(ConquerItem item, Client.GameClient client)
        {
            Database.ConquerItemInformation infos = new Database.ConquerItemInformation(item.ID, 0);
            if (client.Booth != null)
                return;
            client.Entity.UseItem = true;
            client.SpiltStack = true;

            switch (item.ID)
            {
                #region TeamXor We Bas Btlo N2l Ya Wlaad El Teet :P
                case 3002178:
                    {
                        Npcs dialog = new Npcs(client);
                        dialog.Text("Hello. You can chose a X'mas.");
                        dialog.Option("LordX'mas 1", 1);
                        dialog.Option("LordX'mas 2", 2);
                        dialog.Option("LordX'mas 3", 3);
                        dialog.Option("LordX'mas 4", 4);
                        dialog.Option("LordX'mas 5", 5);
                        dialog.Send();
                        client.ActiveNpc = item.ID;
                        break;
                    }
                #endregion
                #region Elite PK Prizez
                #region Lvl 130+
                case 720729: //champion lvl 130+
                    {
                        if (client.Inventory.Count > 40 - 23)
                        {
                            client.Send("You need atleast 23 open spots!");
                            break;
                        }
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.Inventory.Add(720049, 0, 1);
                        client.Inventory.Add(720730, 0, 3, true);
                        client.Inventory.Add(720731, 0, 5);
                        client.Inventory.Add(729626, 0, 5);
                        client.Inventory.Add(1088000, 0, 3);
                        client.Inventory.Add(720598, 0, 3);
                        client.Inventory.Add(723342, 0, 3);
                        break;
                    }
                case 720728: //#2 lvl 130+
                    {
                        if (client.Inventory.Count > 40 - 23)
                        {
                            client.Send("You need atleast 23 open spots!");
                            break;
                        }
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.Inventory.Add(720730, 0, 1, true);
                        client.Inventory.Add(720731, 0, 3);
                        client.Inventory.Add(729626, 0, 3);
                        client.Inventory.Add(1088000, 0, 1);
                        client.Inventory.Add(720598, 0, 2);
                        client.Inventory.Add(723342, 0, 1);
                        break;
                    }
                case 720727: //#3 lvl 130+
                    {
                        if (client.Inventory.Count > 40 - 23)
                        {
                            client.Send("You need atleast 23 open spots!");
                            break;
                        }
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.Inventory.Add(723700, 0, 5, true);
                        client.Inventory.Add(720731, 0, 2);
                        client.Inventory.Add(729626, 0, 2);
                        client.Inventory.Add(720598, 0, 1);
                        client.Inventory.Add(723342, 0, 1);
                        break;
                    }
                case 720726: //#4-8 lvl 130+
                    {
                        if (client.Inventory.Count > 40 - 23)
                        {
                            client.Send("You need atleast 23 open spots!");
                            break;
                        }
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.Inventory.Add(723700, 0, 3, true);
                        client.Inventory.Add(720731, 0, 1);
                        client.Inventory.Add(729626, 0, 1);
                        client.Inventory.Add(720598, 0, 1);
                        client.Inventory.Add(723341, 0, 1);
                        break;
                    }
                #endregion
                #region Lvl 120+
                case 720725: //champion lvl 120+
                    {
                        if (client.Inventory.Count > 40 - 23)
                        {
                            client.Send("You need atleast 23 open spots!");
                            break;
                        }
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.IncreaseExperience(Database.DataHolder.LevelExperience(client.Entity.Level), false);
                        client.Inventory.Add(1088000, 0, 1);
                        client.Inventory.Add(723341, 0, 5);
                        client.Inventory.Add(729626, 0, 1);
                        client.Inventory.Add(720731, 0, 3);
                        break;
                    }
                case 720724: //#2 lvl 130+
                    {
                        if (client.Inventory.Count > 40 - 23)
                        {
                            client.Send("You need atleast 23 open spots!");
                            break;
                        }
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.IncreaseExperience(Database.DataHolder.LevelExperience(client.Entity.Level) / 2, false);
                        client.Inventory.Add(723341, 0, 3);
                        client.Inventory.Add(729626, 0, 1);
                        client.Inventory.Add(720731, 0, 2);
                        break;
                    }
                case 720723: //#3 lvl 130+
                    {
                        if (client.Inventory.Count > 40 - 23)
                        {
                            client.Send("You need atleast 23 open spots!");
                            break;
                        }
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.IncreaseExperience(Database.DataHolder.LevelExperience(client.Entity.Level) / 10 * 3, false);
                        client.Inventory.Add(723341, 0, 2);
                        client.Inventory.Add(729626, 0, 1);
                        client.Inventory.Add(720731, 0, 1);
                        break;
                    }
                case 720722: //#4-8 lvl 130+
                    {
                        if (client.Inventory.Count > 40 - 23)
                        {
                            client.Send("You need atleast 23 open spots!");
                            break;
                        }
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.IncreaseExperience(Database.DataHolder.LevelExperience(client.Entity.Level) / 100 * 15, false);
                        client.Inventory.Add(723341, 0, 1);
                        client.Inventory.Add(729626, 0, 1);
                        break;
                    }
                #endregion
                #region Lvl 110+
                case 720721: //champion lvl 120+
                    {
                        if (client.Inventory.Count > 40 - 23)
                        {
                            client.Send("You need atleast 23 open spots!");
                            break;
                        }
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.IncreaseExperience(Database.DataHolder.LevelExperience(client.Entity.Level), false);
                        client.Inventory.Add(1088000, 0, 1);
                        client.Inventory.Add(723341, 0, 5);
                        client.Inventory.Add(729626, 0, 1);
                        client.Inventory.Add(720731, 0, 3);
                        break;
                    }
                case 720720: //#2 lvl 130+
                    {
                        if (client.Inventory.Count > 40 - 23)
                        {
                            client.Send("You need atleast 23 open spots!");
                            break;
                        }
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.IncreaseExperience(Database.DataHolder.LevelExperience(client.Entity.Level) / 2, false);
                        client.Inventory.Add(723341, 0, 3);
                        client.Inventory.Add(729626, 0, 1);
                        client.Inventory.Add(720731, 0, 2);
                        break;
                    }
                case 720719: //#3 lvl 130+
                    {
                        if (client.Inventory.Count > 40 - 23)
                        {
                            client.Send("You need atleast 23 open spots!");
                            break;
                        }
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.IncreaseExperience(Database.DataHolder.LevelExperience(client.Entity.Level) / 10 * 3, false);
                        client.Inventory.Add(723341, 0, 2);
                        client.Inventory.Add(729626, 0, 1);
                        client.Inventory.Add(720731, 0, 1);
                        break;
                    }
                case 720718: //#4-8 lvl 130+
                    {
                        if (client.Inventory.Count > 40 - 23)
                        {
                            client.Send("You need atleast 23 open spots!");
                            break;
                        }
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.IncreaseExperience(Database.DataHolder.LevelExperience(client.Entity.Level) / 100 * 15, false);
                        client.Inventory.Add(723341, 0, 1);
                        client.Inventory.Add(729626, 0, 1);
                        break;
                    }
                #endregion
                #region Lvl 1+
                case 720717: //champion lvl 120+
                    {
                        if (client.Inventory.Count > 40 - 23)
                        {
                            client.Send("You need atleast 23 open spots!");
                            break;
                        }
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.IncreaseExperience(Database.DataHolder.LevelExperience(client.Entity.Level), false);
                        client.Inventory.Add(1088000, 0, 1);
                        client.Inventory.Add(723341, 0, 5);
                        client.Inventory.Add(729626, 0, 1);
                        client.Inventory.Add(720731, 0, 3);
                        break;
                    }
                case 720716: //#2 lvl 130+
                    {
                        if (client.Inventory.Count > 40 - 23)
                        {
                            client.Send("You need atleast 23 open spots!");
                            break;
                        }
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.IncreaseExperience(Database.DataHolder.LevelExperience(client.Entity.Level) / 2, false);
                        client.Inventory.Add(723341, 0, 3);
                        client.Inventory.Add(729626, 0, 1);
                        client.Inventory.Add(720731, 0, 2);
                        break;
                    }
                case 720715: //#3 lvl 130+
                    {
                        if (client.Inventory.Count > 40 - 23)
                        {
                            client.Send("You need atleast 23 open spots!");
                            break;
                        }
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.IncreaseExperience(Database.DataHolder.LevelExperience(client.Entity.Level) / 10 * 3, false);
                        client.Inventory.Add(723341, 0, 2);
                        client.Inventory.Add(729626, 0, 1);
                        client.Inventory.Add(720731, 0, 1);
                        break;
                    }
                case 720714: //#4-8 lvl 130+
                    {
                        if (client.Inventory.Count > 40 - 23)
                        {
                            client.Send("You need atleast 23 open spots!");
                            break;
                        }
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.IncreaseExperience(Database.DataHolder.LevelExperience(client.Entity.Level) / 100 * 15, false);
                        client.Inventory.Add(723341, 0, 1);
                        client.Inventory.Add(729626, 0, 1);
                        break;
                    }
                #endregion
                case 729626:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        var array = Database.ConquerItemInformation.BaseInformations.Values
                            .Where(p => (p.ID >= 724130 && p.ID <= 724499 && p.Name.Contains("Super"))).ToArray();
                        client.Inventory.Add(array[Kernel.Random.Next(array.Length)].ID, 0, 1);
                        // 
                        break;
                    }
                case 720731:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        var array = Database.ConquerItemInformation.BaseInformations.Keys
                            .Where(p => (p >= 350001 && p <= 380030)).ToArray();
                        client.Inventory.Add(array[Kernel.Random.Next(array.Length)], 0, 1);
                        break;
                    }
                case 720049: // random steed pack
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        ConquerItem _item = new ConquerItem(true);
                        _item.ID = 300000;
                        Database.ConquerItemInformation _iteminfos = new Database.ConquerItemInformation(_item.ID, 0);
                        _item.Durability = _item.MaximDurability = _iteminfos.BaseInformation.Durability;
                        _item.Plus = 6;
                        _item.Effect = Game.Enums.ItemEffect.Horse;
                        if (Kernel.Random.Sign() == 1)
                            _item.SocketProgress = 150 << 8 | 255 << 16;
                        else if (Kernel.Random.Sign() == 1)
                            _item.SocketProgress = 150 | 255 << 8;
                        else
                            _item.SocketProgress = 255 | 150 << 16;
                        client.Inventory.Add(_item, Game.Enums.ItemUse.CreateAndAdd);
                        break;
                    }
                #endregion
                #region DemonBoxs

                case 720650:
                    {
                        if (!DemonTime(client)) return;
                        Database.MonsterInformation mob;
                        Database.MonsterInformation.MonsterInformations.TryGetValue(2420, out mob);
                        client.Map.SpawnMonsterNearToHero(mob, client);
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        break;
                    }
                case 720651:
                    {
                        if (!DemonTime(client)) return;
                        Database.MonsterInformation mob;
                        Database.MonsterInformation.MonsterInformations.TryGetValue(2421, out mob);
                        client.Map.SpawnMonsterNearToHero(mob, client);
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        break;
                    }
                case 720652:
                    {
                        if (!DemonTime(client)) return;
                        Database.MonsterInformation mob;
                        Database.MonsterInformation.MonsterInformations.TryGetValue(2422, out mob);
                        client.Map.SpawnMonsterNearToHero(mob, client);
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        break;
                    }
                case 720671:
                    {
                        if (!DemonTime(client)) return;
                        Database.MonsterInformation mob;
                        Database.MonsterInformation.MonsterInformations.TryGetValue(2423, out mob);
                        client.Map.SpawnMonsterNearToHero(mob, client);
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        break;
                    }
                case 720672:
                    {
                        if (!DemonTime(client)) return;
                        Database.MonsterInformation mob;
                        Database.MonsterInformation.MonsterInformations.TryGetValue(2424, out mob);
                        client.Map.SpawnMonsterNearToHero(mob, client);
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        break;
                    }
                case 720673:
                    {
                        if (!DemonTime(client)) return;
                        Database.MonsterInformation mob;
                        Database.MonsterInformation.MonsterInformations.TryGetValue(2425, out mob);
                        client.Map.SpawnMonsterNearToHero(mob, client);
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        break;
                    }
                #endregion
                #region Medicine
                case 1000000:
                case 1000010:
                case 1000020:
                case 1000030:
                case 1002000:
                case 1002010:
                case 1002020:
                case 1002050:
                case 1000040:
                case 725065:
                    {
                        //("ss");
                        if (client.Entity.NoDrugsTime > 0)
                        {
                            if (Time32.Now > client.Entity.NoDrugsStamp.AddSeconds(client.Entity.NoDrugsTime))
                            {
                                client.Entity.NoDrugsTime = 0;
                            }
                            else
                            {
                                return;
                            }
                        }
                        if (client.Entity.Hitpoints == client.Entity.MaxHitpoints)
                        {
                            //("ss2");
                            return;
                        }
                        //("ss3");
                        if (client.Entity.MapID == 1811)
                        {
                            client.Entity.SendSysMesage("You Cant Use Health Here");
                            //Kernel.SendWorldMessage(new Conquer_Online_Server.Network.GamePackets.Message("You Can't Use Health In This Map", System.Drawing.Color.Red , Conquer_Online_Server.Network.GamePackets.Message.Talk), Program.GamePool);
                            return;
                        }
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.Entity.Hitpoints = Math.Min(client.Entity.Hitpoints + infos.BaseInformation.ItemHP, client.Entity.MaxHitpoints);
                        _String str1 = new _String(true);
                        str1.UID = client.Entity.UID;
                        str1.TextsCount = 1;
                        str1.Type = _String.Effect;
                        str1.Texts.Add("celerityliquid");
                        client.Entity.SendScreen(str1);
                        break;
                    }
                case 1001000:
                case 1001010:
                case 1001020:
                case 1001030:
                case 1001040:
                case 1002030:
                case 1002040:
                case 725066:
                    {
                        if (client.Entity.NoDrugsTime > 0)
                        {
                            if (Time32.Now > client.Entity.NoDrugsStamp.AddSeconds(client.Entity.NoDrugsTime))
                            {
                                client.Entity.NoDrugsTime = 0;
                            }
                            else
                            {
                                return;
                            }
                        }
                        if (client.Entity.MapID == 1811)
                        {
                            client.Entity.SendSysMesage("You Cant Use Health Here");
                            //Kernel.SendWorldMessage(new Conquer_Online_Server.Network.GamePackets.Message("You Can't Use Health In This Map", System.Drawing.Color.Red, Conquer_Online_Server.Network.GamePackets.Message.Talk), Program.GamePool);
                            return;
                        }
                        if (client.Entity.Mana == client.Entity.MaxMana)
                            return;
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.Entity.Mana = (ushort)Math.Min(client.Entity.Mana + infos.BaseInformation.ItemMP, client.Entity.MaxMana);
                        _String str1 = new _String(true);
                        str1.UID = client.Entity.UID;
                        str1.TextsCount = 1;
                        str1.Type = _String.Effect;
                        str1.Texts.Add("slowliquid");
                        client.Entity.SendScreen(str1);
                        break;
                    }
                #endregion
                #region Gates
                case 1060020:
                    {
                        if (client.Entity.MapID == 601) return;
                        if (client.Map.BaseID == 6000 || client.Map.BaseID == 6001 || client.Map.BaseID == 1844 || client.Map.BaseID == 1801 || client.Map.BaseID == 8883 || client.Map.BaseID == 1005 && client.Entity.MapID != 1005 || client.Map.BaseID == 700)
                        {
                            client.Send(Constants.JailItemUnusable);
                            return;
                        }
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.Entity.Teleport(1002, 301, 278);
                        break;
                    }
                case 1060021:
                    {
                        if (client.Entity.MapID == 601) return;
                        if (client.Map.BaseID == 6000 || client.Map.BaseID == 6001 || client.Map.BaseID == 1844 || client.Map.BaseID == 1801 || client.Map.BaseID == 8883 || client.Map.BaseID == 1005 && client.Entity.MapID != 1005 || client.Map.BaseID == 700)
                        {
                            client.Send(Constants.JailItemUnusable);
                            return;
                        }
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.Entity.Teleport(1000, 500, 650);
                        break;
                    }
                case 1060022:
                    {
                        if (client.Entity.MapID == 601) return;
                        if (client.Map.BaseID == 6000 || client.Map.BaseID == 6001 || client.Map.BaseID == 1844 || client.Map.BaseID == 1801 || client.Map.BaseID == 8883 || client.Map.BaseID == 1005 && client.Entity.MapID != 1005 || client.Map.BaseID == 700)
                        {
                            client.Send(Constants.JailItemUnusable);
                            return;
                        }
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.Entity.Teleport(1020, 565, 562);
                        break;
                    }
                case 1060023:
                    {
                        if (client.Entity.MapID == 601) return;
                        if (client.Map.BaseID == 6000 || client.Map.BaseID == 6001 || client.Map.BaseID == 1844 || client.Map.BaseID == 1801 || client.Map.BaseID == 8883 || client.Map.BaseID == 1005 && client.Entity.MapID != 1005 || client.Map.BaseID == 700)
                        {
                            client.Send(Constants.JailItemUnusable);
                            return;
                        }
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.Entity.Teleport(1011, 188, 264);
                        break;
                    }
                case 1060024:
                    {
                        if (client.Entity.MapID == 601) return;
                        if (client.Map.BaseID == 6000 || client.Map.BaseID == 6001 || client.Map.BaseID == 1844 || client.Map.BaseID == 1801 || client.Map.BaseID == 8883 || client.Map.BaseID == 1005 && client.Entity.MapID != 1005 || client.Map.BaseID == 700)
                        {
                            client.Send(Constants.JailItemUnusable);
                            return;
                        }
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.Entity.Teleport(1015, 717, 571);
                        break;
                    }
                case 1060039:
                    {
                        if (client.Entity.MapID == 601) return;
                        if (client.Map.BaseID == 6000 || client.Map.BaseID == 6001 || client.Map.BaseID == 1844 || client.Map.BaseID == 1801 || client.Map.BaseID == 8883 || client.Map.BaseID == 1005 && client.Entity.MapID != 1005 || client.Map.BaseID == 700)
                        {
                            client.Send(Constants.JailItemUnusable);
                            return;
                        }
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.Entity.Teleport(1217, 535, 558);
                        break;
                    }
                #endregion
                #region Dyes
                case 723584:
                    {
                        if (client.Equipment.TryGetItem(3) == null)
                            return;
                        if (client.Equipment.TryGetItem(3).ID == 0)
                            return;
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.Equipment.TryGetItem(3).Color = Game.Enums.Color.Black;
                        Conquer_Online_Server.Database.ConquerItemTable.UpdateColor(client.Equipment.TryGetItem(3));
                        client.Equipment.TryGetItem(3).Mode = Conquer_Online_Server.Game.Enums.ItemMode.Update;
                        client.Equipment.TryGetItem(3).Send(client);
                        client.Equipment.UpdateEntityPacket();
                        break;
                    }
                case 1060030:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.Entity.HairColor = 3;
                        break;
                    }
                case 1060040:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.Entity.HairColor = 9;
                        break;
                    }
                case 1060050:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.Entity.HairColor = 8;
                        break;
                    }
                case 1060060:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.Entity.HairColor = 7;
                        break;
                    }
                case 1060070:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.Entity.HairColor = 6;
                        break;
                    }
                case 1060080:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.Entity.HairColor = 5;
                        break;
                    }
                case 1060090:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.Entity.HairColor = 4;
                        break;
                    }
                #endregion
                #region Misc
                #region Way2Heroes

                case 3005117: //Class1FortunePack 
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.Entity.ConquerPoints += 100000;
                        client.Send(new Message("Congratulations you got 100k Cps keep going", System.Drawing.Color.Red, Message.TopLeft));
                        break;
                    }


                case 3005118: //Class2FortunePack 
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.Entity.ConquerPoints += 200000;
                        client.Send(new Message("Congratulations you got 200k Cps keep going", System.Drawing.Color.Red, Message.TopLeft));
                        break;
                    }


                case 3005119: //Class3FortunePack 
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.Entity.ConquerPoints += 300000;
                        client.Send(new Message("Congratulations you got 300k Cps keep going", System.Drawing.Color.Red, Message.TopLeft));
                        break;
                    }

                case 3005120: //Class4FortunePack 
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.Entity.ConquerPoints += 400000;
                        client.Send(new Message("Congratulations you got 400k Cps keep going", System.Drawing.Color.Red, Message.TopLeft));
                        break;
                    }

                case 3005121: //Class5FortunePack 
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.Entity.ConquerPoints += 500000;
                        client.Send(new Message("Congratulations you got 500k Cps keep going", System.Drawing.Color.Red, Message.TopLeft));
                        break;
                    }

                case 3005122: //Class6FortunePack 
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.Entity.ConquerPoints += 600000;
                        client.Entity.SubClasses.StudyPoints += 400;
                        client.Send(new Message("Congratulations you got 600k Cps And 400 study Points keep going", System.Drawing.Color.Red, Message.TopLeft));
                        break;
                    }

                case 3005126: //NormalChiPack 
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.ChiPoints += 500;
                        client.Send(new Message("Congratultions you have got 500 Chi points.", System.Drawing.Color.Red, Message.TopLeft));
                        break;
                    }


                case 3005127: //MediumChiPack 
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.ChiPoints += 1000;
                        client.Send(new Message("Congratultions you have got 1000 Chi points.", System.Drawing.Color.Red, Message.TopLeft));
                        break;
                    }


                case 3005128: //SeniorChiPack 
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.ChiPoints += 2000;
                        client.Send(new Message("Congratultions you have got 2000 Chi points.", System.Drawing.Color.Red, Message.TopLeft));
                        break;
                    }

                case 3005129: // ExtremeChiPack 
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.ChiPoints += 3000;
                        client.Send(new Message("Congratultions you have got 3000 Chi points.", System.Drawing.Color.Red, Message.TopLeft));
                        break;
                    }


                case 3005130: //RefinedhGem(B)Pack 
                    {
                        if (client.Inventory.Count <= 38)
                        {
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                            Random R = new Random();
                            int Nr = R.Next(1, 10);
                            if (Nr == 1) client.Inventory.Add(700002, 0, 1);
                            if (Nr == 2) client.Inventory.Add(700013, 0, 1);
                            if (Nr == 3) client.Inventory.Add(700022, 0, 1);
                            if (Nr == 4) client.Inventory.Add(700032, 0, 1);
                            if (Nr == 5) client.Inventory.Add(700042, 0, 1);
                            if (Nr == 6) client.Inventory.Add(700052, 0, 1);
                            if (Nr == 7) client.Inventory.Add(700062, 0, 1);
                            if (Nr == 8) client.Inventory.Add(700072, 0, 1);
                            if (Nr == 9) client.Inventory.Add(700102, 0, 1);
                            if (Nr == 10) client.Inventory.Add(700122, 0, 1);
                        }
                        client.Send(new Message("Congratultions you have got RefinedGeM.", System.Drawing.Color.Red, Message.TopLeft));
                        break;
                    }

                case 3005132: //SuperGem(B)Pack 
                    {
                        if (client.Inventory.Count <= 38)
                        {
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                            Random R = new Random();
                            int Nr = R.Next(1, 10);
                            if (Nr == 1) client.Inventory.Add(700003, 0, 1);
                            if (Nr == 2) client.Inventory.Add(700014, 0, 1);
                            if (Nr == 3) client.Inventory.Add(700023, 0, 1);
                            if (Nr == 4) client.Inventory.Add(700033, 0, 1);
                            if (Nr == 5) client.Inventory.Add(700043, 0, 1);
                            if (Nr == 6) client.Inventory.Add(700053, 0, 1);
                            if (Nr == 7) client.Inventory.Add(700063, 0, 1);
                            if (Nr == 8) client.Inventory.Add(700073, 0, 1);
                            if (Nr == 9) client.Inventory.Add(700103, 0, 1);
                            if (Nr == 10) client.Inventory.Add(700123, 0, 1);
                        }
                        client.Send(new Message("Congratultions you have got SuperGem.", System.Drawing.Color.Red, Message.TopLeft));
                        break;
                    }


                case 3005133: //P4DragonSoulBag 
                    {
                        if (client.Inventory.Count <= 38)
                        {
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                            Random R = new Random();
                            int Nr = R.Next(1, 10);
                            if (Nr == 1) client.Inventory.Add(800803, 0, 1);
                            if (Nr == 2) client.Inventory.Add(800808, 0, 1);
                            if (Nr == 3) client.Inventory.Add(823052, 0, 1);
                            if (Nr == 4) client.Inventory.Add(823053, 0, 1);
                            if (Nr == 5) client.Inventory.Add(823054, 0, 1);
                            if (Nr == 6) client.Inventory.Add(800720, 0, 1);
                            if (Nr == 7) client.Inventory.Add(800253, 0, 1);

                        }
                        client.Send(new Message("Congratultions you have got P4DragonSoul.", System.Drawing.Color.Red, Message.TopLeft));
                        break;
                    }
                case 3005300: //TurkeyRunPack 
                    {
                        if (client.Inventory.Count <= 38)
                        {
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                            client.Inventory.Add(200490, 0, 1);

                        }
                        else
                            client.Send(Constants.FullInventory);
                        break;
                    }
                case 3005301:   //FancyAlpacaPack 
                    {
                        if (client.Inventory.Count <= 38)
                        {
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                            client.Inventory.Add(200499, 0, 1);

                        }
                        else
                            client.Send(Constants.FullInventory);
                        break;
                    }
                case 3005134: //SweetLovePack 
                    {
                        if (client.Inventory.Count <= 38)
                        {
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                            client.Inventory.Add(422020, 0, 1);
                            client.Inventory.Add(755099, 0, 1);
                        }
                        else
                            client.Send(Constants.FullInventory);
                        break;
                    }
                case 3005309: // 100PointsChiPack 
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.ChiPoints += 100;
                        client.Send(new Message("Congratultions you have got 100 Chi points.", System.Drawing.Color.Red, Message.TopLeft));
                        break;
                    }


                case 3005310: //120PointsChiPack 
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.ChiPoints += 120;
                        client.Send(new Message("Congratultions you have got 120 Chi points.", System.Drawing.Color.Red, Message.TopLeft));
                        break;
                    }


                case 3005311: //160PointsChiPack 
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.ChiPoints += 160;
                        client.Send(new Message("Congratultions you have got 160 Chi points.", System.Drawing.Color.Red, Message.TopLeft));
                        break;
                    }


                case 3005312: //300PointsChiPack 
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.ChiPoints += 300;
                        client.Send(new Message("Congratultions you have got 300 Chi points.", System.Drawing.Color.Red, Message.TopLeft));
                        break;
                    }

                case 3005313: //800PointsChiPack 
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.ChiPoints += 800;
                        client.Send(new Message("Congratultions you have got 800 Chi points.", System.Drawing.Color.Red, Message.TopLeft));
                        break;
                    }
                case 3005314: //1000PointsChiPack 
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.ChiPoints += 1000;
                        client.Send(new Message("Congratultions you have got 1000 Chi points.", System.Drawing.Color.Red, Message.TopLeft));
                        break;
                    }
                case 3005331: //P7WeaponSoulPack 
                    {
                        if (client.Inventory.Count <= 38)
                        {
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                            Random R = new Random();
                            int Nr = R.Next(1, 10);
                            if (Nr == 1) client.Inventory.Add(800111, 0, 1);
                            if (Nr == 2) client.Inventory.Add(800142, 0, 1);
                            if (Nr == 3) client.Inventory.Add(800522, 0, 1);
                            if (Nr == 4) client.Inventory.Add(800618, 0, 1);
                            if (Nr == 5) client.Inventory.Add(800422, 0, 1);
                            if (Nr == 6) client.Inventory.Add(800725, 0, 1);
                            if (Nr == 7) client.Inventory.Add(800810, 0, 1);
                            if (Nr == 8) client.Inventory.Add(800811, 0, 1);
                            //   if (Nr == 9) client.Inventory.Add(800811, 0, 1); 
                            // if (Nr == 10) client.Inventory.Add(700123, 0, 1); 
                        }
                        client.Send(new Message("Congratultions you have got P7WeaponSoul.", System.Drawing.Color.Red, Message.TopLeft));
                        break;
                    }
                case 3005135: //P6DragonSoulBag 
                    {
                        if (client.Inventory.Count <= 38)
                        {
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                            Random R = new Random();
                            int Nr = R.Next(1, 10);
                            if (Nr == 1) client.Inventory.Add(800000, 0, 1);
                            if (Nr == 2) client.Inventory.Add(800017, 0, 1);
                            if (Nr == 3) client.Inventory.Add(801003, 0, 1);
                            if (Nr == 4) client.Inventory.Add(800809, 0, 1);
                            if (Nr == 5) client.Inventory.Add(800722, 0, 1);
                            if (Nr == 6) client.Inventory.Add(821032, 0, 1);
                            if (Nr == 7) client.Inventory.Add(821031, 0, 1);
                            //     if (Nr == 8) client.Inventory.Add(800838, 0, 1); 
                            //   if (Nr == 9) client.Inventory.Add(700103, 0, 1); 
                            // if (Nr == 10) client.Inventory.Add(700123, 0, 1); 
                        }
                        client.Send(new Message("Congratultions you have got P6DragonSoul.", System.Drawing.Color.Red, Message.TopLeft));
                        break;
                    }
                #endregion Way2Heroes
                #region NemesisTyrant
                case 59566912:
                    {
                        Database.MonsterInformation monster = new Conquer_Online_Server.Database.MonsterInformation();
                        monster.Boss = true;
                        monster.Hitpoints = 90000000;
                        monster.Level = 140;
                        monster.Mesh = 984;
                        monster.Name = "NemesisTyrant";
                        monster.MaxAttack = 10500;
                        monster.AttackRange = 14;
                        monster.AttackType = 1;
                        monster.AttackSpeed = 1000;
                        monster.ViewRange = 15;
                        monster.MoveSpeed = 500;
                        monster.RunSpeed = 500;
                        monster.MinAttack = 59000;
                        Game.Entity entity = new Game.Entity(Game.EntityFlag.Monster, false);
                        entity.MapObjType = Game.MapObjectType.Monster;
                        entity.MonsterInfo = monster;
                        entity.MonsterInfo.Owner = entity;
                        entity.Name = "NemesisTyrant";
                        entity.MinAttack = monster.MinAttack;
                        entity.MaxAttack = entity.MagicAttack = monster.MaxAttack;
                        entity.Hitpoints = entity.MaxHitpoints = monster.Hitpoints;
                        entity.Body = monster.Mesh;
                        entity.Level = monster.Level;
                        entity.Defence = 5000;
                        entity.X = client.Entity.X;
                        entity.Y = client.Entity.Y;
                        entity.UID = 417111;
                        entity.MapID = client.Entity.MapID;
                        entity.SendUpdates = true;
                        client.Map.RemoveEntity(entity);
                        client.Map.AddEntity(entity);
                        break;
                    }
                #endregion  
                #region Surprise-Box
                case 722178:
                    {
                        if (client.Inventory.Count <= 38)
                        {
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                            //client.Inventory.Add(722057, 0, 1);//PowerEXPBall
                            client.Entity.ConquerPoints += 2000;
                        }
                        else
                        {
                            client.Send(new Message("You Must have 1 space in you Inventory To Open You Box", Color.White, 255));
                        }
                        break;
                    }
                #endregion
                #region SteedPacks
                case 728525:
                case 728526:
                case 728527:
                    {
                        Npcs dialog = new Npcs(client);
                        dialog.Text("Hello. You can chose a horse: black, brown or white.");
                        dialog.Option("Black horse", 1);
                        dialog.Option("Brown horse", 2);
                        dialog.Option("White horse", 3);
                        dialog.Option("Nevermind.", 255);
                        dialog.Send();
                        client.ActiveNpc = item.ID;
                        break;
                    }
                case 723855:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        ConquerItem _item = new ConquerItem(true);
                        _item.ID = 300000;
                        Database.ConquerItemInformation _iteminfos = new Database.ConquerItemInformation(_item.ID, 0);
                        _item.Durability = _item.MaximDurability = _iteminfos.BaseInformation.Durability;
                        _item.Plus = 1;
                        _item.Effect = Game.Enums.ItemEffect.Horse;
                        _item.SocketProgress = 150 << 8 | 255 << 16;
                        client.Inventory.Add(_item, Game.Enums.ItemUse.CreateAndAdd);
                        break;
                    }
                case 723856:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        ConquerItem _item = new ConquerItem(true);
                        _item.ID = 300000;
                        Database.ConquerItemInformation _iteminfos = new Database.ConquerItemInformation(_item.ID, 0);
                        _item.Durability = _item.MaximDurability = _iteminfos.BaseInformation.Durability;
                        _item.Plus = 1;
                        _item.Effect = Game.Enums.ItemEffect.Horse;
                        _item.SocketProgress = 150 | 255 << 8;
                        client.Inventory.Add(_item, Game.Enums.ItemUse.CreateAndAdd);
                        break;
                    }
                case 723859:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        ConquerItem _item = new ConquerItem(true);
                        _item.ID = 300000;
                        Database.ConquerItemInformation _iteminfos = new Database.ConquerItemInformation(_item.ID, 0);
                        _item.Durability = _item.MaximDurability = _iteminfos.BaseInformation.Durability;
                        _item.Plus = 1;
                        _item.Effect = Game.Enums.ItemEffect.Horse;
                        _item.SocketProgress = 255 | 150 << 16;
                        client.Inventory.Add(_item, Game.Enums.ItemUse.CreateAndAdd);
                        break;
                    }
                case 723860:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        ConquerItem _item = new ConquerItem(true);
                        _item.ID = 300000;
                        Database.ConquerItemInformation _iteminfos = new Database.ConquerItemInformation(_item.ID, 0);
                        _item.Durability = _item.MaximDurability = _iteminfos.BaseInformation.Durability;
                        _item.Plus = 3;
                        _item.Effect = Game.Enums.ItemEffect.Horse;
                        _item.SocketProgress = 150 << 8 | 255 << 16;
                        client.Inventory.Add(_item, Game.Enums.ItemUse.CreateAndAdd);
                        break;
                    }
                case 723861:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        ConquerItem _item = new ConquerItem(true);
                        _item.ID = 300000;
                        Database.ConquerItemInformation _iteminfos = new Database.ConquerItemInformation(_item.ID, 0);
                        _item.Durability = _item.MaximDurability = _iteminfos.BaseInformation.Durability;
                        _item.Plus = 3;
                        _item.Effect = Game.Enums.ItemEffect.Horse;
                        _item.SocketProgress = 150 | 255 << 8;
                        client.Inventory.Add(_item, Game.Enums.ItemUse.CreateAndAdd);
                        break;
                    }
                case 723862:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        ConquerItem _item = new ConquerItem(true);
                        _item.ID = 300000;
                        Database.ConquerItemInformation _iteminfos = new Database.ConquerItemInformation(_item.ID, 0);
                        _item.Durability = _item.MaximDurability = _iteminfos.BaseInformation.Durability;
                        _item.Plus = 3;
                        _item.Effect = Game.Enums.ItemEffect.Horse;
                        _item.SocketProgress = 255 | 150 << 16;
                        client.Inventory.Add(_item, Game.Enums.ItemUse.CreateAndAdd);
                        break;
                    }
                case 723863:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        ConquerItem _item = new ConquerItem(true);
                        _item.ID = 300000;
                        Database.ConquerItemInformation _iteminfos = new Database.ConquerItemInformation(_item.ID, 0);
                        _item.Durability = _item.MaximDurability = _iteminfos.BaseInformation.Durability;
                        _item.Plus = 6;
                        _item.Effect = Game.Enums.ItemEffect.Horse;
                        _item.SocketProgress = 150 << 8 | 255 << 16;
                        client.Inventory.Add(_item, Game.Enums.ItemUse.CreateAndAdd);
                        break;
                    }
                case 723864:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        ConquerItem _item = new ConquerItem(true);
                        _item.ID = 300000;
                        Database.ConquerItemInformation _iteminfos = new Database.ConquerItemInformation(_item.ID, 0);
                        _item.Durability = _item.MaximDurability = _iteminfos.BaseInformation.Durability;
                        _item.Plus = 6;
                        _item.Effect = Game.Enums.ItemEffect.Horse;
                        _item.SocketProgress = 150 | 255 << 8;
                        client.Inventory.Add(_item, Game.Enums.ItemUse.CreateAndAdd);
                        break;
                    }
                case 723865:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        ConquerItem _item = new ConquerItem(true);
                        _item.ID = 300000;
                        Database.ConquerItemInformation _iteminfos = new Database.ConquerItemInformation(_item.ID, 0);
                        _item.Durability = _item.MaximDurability = _iteminfos.BaseInformation.Durability;
                        _item.Plus = 6;
                        _item.Effect = Game.Enums.ItemEffect.Horse;
                        _item.SocketProgress = 255 | 150 << 16;
                        client.Inventory.Add(_item, Game.Enums.ItemUse.CreateAndAdd);
                        break;
                    }
                case 723900:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        ConquerItem _item = new ConquerItem(true);
                        _item.ID = 300000;
                        Database.ConquerItemInformation _iteminfos = new Database.ConquerItemInformation(_item.ID, 0);
                        _item.Durability = _item.MaximDurability = _iteminfos.BaseInformation.Durability;
                        _item.Plus = 0;
                        _item.Effect = Game.Enums.ItemEffect.Horse;
                        _item.SocketProgress = 150 << 8 | 255 << 16;
                        client.Inventory.Add(_item, Game.Enums.ItemUse.CreateAndAdd);
                        break;
                    }
                case 723901:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        ConquerItem _item = new ConquerItem(true);
                        _item.ID = 300000;
                        Database.ConquerItemInformation _iteminfos = new Database.ConquerItemInformation(_item.ID, 0);
                        _item.Durability = _item.MaximDurability = _iteminfos.BaseInformation.Durability;
                        _item.Plus = 0;
                        _item.Effect = Game.Enums.ItemEffect.Horse;
                        _item.SocketProgress = 150 | 255 << 8;
                        client.Inventory.Add(_item, Game.Enums.ItemUse.CreateAndAdd);
                        break;
                    }
                case 723902:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        ConquerItem _item = new ConquerItem(true);
                        _item.ID = 300000;
                        Database.ConquerItemInformation _iteminfos = new Database.ConquerItemInformation(_item.ID, 0);
                        _item.Durability = _item.MaximDurability = _iteminfos.BaseInformation.Durability;
                        _item.Plus = 0;
                        _item.Effect = Game.Enums.ItemEffect.Horse;
                        _item.SocketProgress = 255 | 150 << 16;
                        client.Inventory.Add(_item, Game.Enums.ItemUse.CreateAndAdd);
                        break;
                    }
                #endregion
                #region items VIP
                #region Vip Level 0-6
                case 725576:
                    {
                        if (client.Entity.VIPLevel == 0 && client.Entity.VIPLevel < 6)
                        {
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Delete);
                            client.Entity.VIPLevel = 6;
                        }
                        else
                            client.Send(new Conquer_Online_Server.Network.GamePackets.Message("Congratulations you got VIP Level:6 keep going By MrCapo", System.Drawing.Color.Red, 0x7dc));
                        break;
                    }
                #endregion
                #region Vip Level 1
                case 725568:
                    {
                        if (client.Entity.VIPLevel == 0 && client.Entity.VIPLevel < 1)
                        {
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Delete);
                            client.Entity.VIPLevel = 1;//By Mr.Monk 
                        }
                        else
                            client.Send(new Conquer_Online_Server.Network.GamePackets.Message("Congratulations you got VIP Level:1 keep going By MrCapo", System.Drawing.Color.Red, 0x7dc));
                        break;
                    }
                #endregion
                #region Vip Level 2
                case 725069:
                    {
                        if (client.Entity.VIPLevel == 1 && client.Entity.VIPLevel < 2)
                        {
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Delete);
                            client.Entity.VIPLevel = 2;//By Mr.Monk 
                        }
                        else
                            client.Send(new Conquer_Online_Server.Network.GamePackets.Message("Congratulations you got VIP Level:2 keep going By MrCapo", System.Drawing.Color.Red, 0x7dc));
                        break;
                    }
                #endregion
                #region Vip Level 3
                case 725070:
                    {
                        if (client.Entity.VIPLevel == 2 && client.Entity.VIPLevel < 3)
                        {
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Delete);
                            client.Entity.VIPLevel = 3;//By Mr.Monk 
                        }
                        else
                            client.Send(new Conquer_Online_Server.Network.GamePackets.Message("Congratulations you got VIP Level:3 keep going By MrCapo", System.Drawing.Color.Red, 0x7dc));
                        break;
                    }
                #endregion
                #region Vip Level 4
                case 725071:
                    {
                        if (client.Entity.VIPLevel == 3 && client.Entity.VIPLevel < 4)
                        {
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Delete);
                            client.Entity.VIPLevel = 4;//By Mr.Monk 
                        }
                        else
                            client.Send(new Conquer_Online_Server.Network.GamePackets.Message("Congratulations you got VIP Level:4 keep going By MrCapo", System.Drawing.Color.Red, 0x7dc));
                        break;
                    }
                #endregion
                #region Vip Level 5
                case 725072:
                    {
                        if (client.Entity.VIPLevel == 4 && client.Entity.VIPLevel < 5)
                        {
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Delete);
                            client.Entity.VIPLevel = 5;
                        }
                        else
                            client.Send(new Conquer_Online_Server.Network.GamePackets.Message("Congratulations you got VIP Level:5 keep going By MrCapo", System.Drawing.Color.Red, 0x7dc));
                        break;
                    }
                #endregion
                #region Vip Level 6
                case 725073:
                    {
                        if (client.Entity.VIPLevel == 5 && client.Entity.VIPLevel < 6)
                        {
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Delete);
                            client.Entity.VIPLevel = 6;//By Mr.Monk 
                        }
                        else
                            client.Send(new Conquer_Online_Server.Network.GamePackets.Message("Congratulations you got VIP Level:6 keep going By MrCapo", System.Drawing.Color.Red, 0x7dc));
                        break;
                    }
                #endregion
                #region P6SoulPack
                case 729994:
                    {
                        if (client.Entity.Level >= 10)
                        {
                            if (client.Inventory.Count < 31)
                            {
                                client.Inventory.Add(821031, 0, 1);//+8
                                client.Inventory.Add(820072, 0, 1); //+6
                                client.Inventory.Add(823055, 0, 1); //+6
                                client.Inventory.Add(822053, 0, 1); //+6
                                client.Inventory.Add(824017, 0, 1); //+6
                                client.Inventory.Add(820071, 0, 1); //+6
                                client.Inventory.Add(822055, 0, 1); //+6
                                client.Inventory.Add(722057, 0, 1); //+6

                                client.Inventory.Remove(item, Conquer_Online_Server.Game.Enums.ItemUse.Remove);
                                client.Entity.Update(_String.Effect, "newmonbro", true);
                            }
                            else
                                client.Send(new Message("You need to make atleast 9 free spots in your inventory.", System.Drawing.Color.Red, Message.TopLeft));
                        }
                        else
                            client.Send(new Message("You must be atleast level 10 to open the Pack", System.Drawing.Color.Red, Message.TopLeft));


                        break;
                    }
                #endregion


                #region Ghosts of Sparta
                #region Ghosts of Sparta
                case 5130513:
                    {

                        // Dialogs dialogs = new Dialogs
                        {
                            // Client = client,
                            //   Replies = new List<NpcReply>()
                        };
                        Npcs dialog = new Npcs(client);
                        dialog.Text("Do You Have The Brave To Summon The Ghosts Of Sparta .There are 5 Bosses, When You Kill One Of Them You Will Receive A Item To Summon The Other Boss .If You Finshed All Of The You Will Be Award?ed(The Ghosts Treasure)");
                        dialog.Option("Yes, I Will Kill These Ghosts", 255);
                        dialog.Send();
                        client.Inventory.Remove(item, Enums.ItemUse.Remove);
                        client.Inventory.Add(5130518, 0, 1);
                        client.Entity.Update(_String.Effect, "gamebegin", true);
                        break;
                    }
                #endregion
                #region KingOfDevils
                case 5130514:
                    {
                        if (client.Entity.MapID == 1002 || client.Map.BaseID == 1020 || client.Entity.MapID == 1000 || client.Entity.MapID == 1011 || client.Entity.MapID == 1015 || client.Entity.MapID == 1762 || client.Entity.MapID == 2056)
                        {
                            client.Entity.Update(_String.Effect, "fathitgtsyd", true);

                            Database.MonsterInformation monster = new Conquer_Online_Server.Database.MonsterInformation();
                            // monster.Boss = true;
                            monster.Hitpoints = 7500000;
                            monster.Level = 200;
                            monster.Mesh = 208;
                            monster.Name = "KingOfDevils";
                            monster.MaxAttack = 150000;
                            monster.AttackRange = 10;
                            monster.AttackType = 2;
                            monster.SpellID = 10304;
                            monster.AttackSpeed = 1500;
                            monster.ViewRange = 10;
                            monster.MoveSpeed = 500;
                            monster.RunSpeed = 500;
                            monster.MinAttack = 100000;

                            Game.Entity entity = new Game.Entity(Game.EntityFlag.Monster, false);
                            entity.MapObjType = Game.MapObjectType.Monster;
                            entity.MonsterInfo = monster;
                            entity.MonsterInfo.Owner = entity;
                            entity.Name = "KingOfDevils";
                            entity.MinAttack = monster.MinAttack;
                            entity.MaxAttack = entity.MagicAttack = monster.MaxAttack;
                            entity.Hitpoints = entity.MaxHitpoints = monster.Hitpoints;
                            entity.Body = monster.Mesh;
                            entity.Level = monster.Level;
                            entity.Defence = 20000;
                            entity.X = (ushort)(client.Entity.X - 2);
                            entity.Y = (ushort)(client.Entity.Y - 2);
                            entity.EntityFlag = Conquer_Online_Server.Game.EntityFlag.Monster;
                            entity.UID = (uint)ServerBase.Kernel.Random.Next(500060, 500110);
                            entity.MapID = client.Entity.MapID;
                            entity.SendUpdates = true;
                            client.Map.RemoveEntity(entity);
                            Network.GamePackets._String stringPacket = new Conquer_Online_Server.Network.GamePackets._String(true);
                            stringPacket.UID = monster.ID;
                            stringPacket.Type = Network.GamePackets._String.Effect;
                            stringPacket.Texts.Add("MBStandard");
                            client.Map.AddEntity(entity);

                            client.Inventory.Remove(item, Enums.ItemUse.Remove);
                            break;
                        }
                        else
                        {
                            client.Send(new Conquer_Online_Server.Network.GamePackets.Message("You Can't KingOfDevils Here", System.Drawing.Color.Red, 0x7dc));
                            return;
                        }
                    }
                #endregion
                #region Zeus
                case 5130515:
                    {
                        if (client.Entity.MapID == 1002 || client.Map.BaseID == 1020 || client.Entity.MapID == 1000 || client.Entity.MapID == 1011 || client.Entity.MapID == 1015 || client.Entity.MapID == 1762 || client.Entity.MapID == 2056)
                        {
                            client.Entity.Update(_String.Effect, "fam_gain_special", true);
                            Database.MonsterInformation monster = new Conquer_Online_Server.Database.MonsterInformation();
                            // monster.Boss = true;
                            monster.Hitpoints = 6000000;
                            monster.Level = 200;
                            monster.Mesh = 385;
                            monster.Name = "Zeus";
                            monster.MaxAttack = 85000;
                            monster.AttackRange = 10;
                            monster.AttackType = 2;
                            monster.SpellID = 10304;
                            monster.AttackSpeed = 1000;
                            monster.ViewRange = 5;
                            monster.MoveSpeed = 500;
                            monster.RunSpeed = 500;
                            monster.MinAttack = 80000;
                            Game.Entity entity = new Game.Entity(Game.EntityFlag.Monster, false);
                            entity.MapObjType = Game.MapObjectType.Monster;
                            entity.MonsterInfo = monster;
                            entity.MonsterInfo.Owner = entity;
                            entity.Name = "Zeus";
                            entity.MinAttack = monster.MinAttack;
                            entity.MaxAttack = entity.MagicAttack = monster.MaxAttack;
                            entity.Hitpoints = entity.MaxHitpoints = monster.Hitpoints;
                            entity.Body = monster.Mesh;
                            entity.Level = monster.Level;
                            entity.Defence = 20000;
                            entity.X = client.Entity.X;
                            entity.Y = client.Entity.Y;
                            entity.EntityFlag = Conquer_Online_Server.Game.EntityFlag.Monster;
                            entity.UID = (uint)ServerBase.Kernel.Random.Next(500060, 500110);
                            entity.MapID = client.Entity.MapID;
                            entity.SendUpdates = true;
                            client.Map.RemoveEntity(entity);
                            Network.GamePackets._String stringPacket = new Conquer_Online_Server.Network.GamePackets._String(true);
                            stringPacket.UID = monster.ID;
                            stringPacket.Type = Network.GamePackets._String.Effect;
                            stringPacket.Texts.Add("MBStandard");
                            client.Map.AddEntity(entity);

                            client.Inventory.Remove(item, Enums.ItemUse.Remove);
                            break;
                        }
                        else
                        {
                            client.Send(new Conquer_Online_Server.Network.GamePackets.Message("You Can't Summon Zeus Here", System.Drawing.Color.Red, 0x7dc));
                            return;
                        }
                    }
                #endregion
                #region Cyclops
                case 5130516:
                    {
                        if (client.Entity.MapID == 1002 || client.Map.BaseID == 1020 || client.Entity.MapID == 1000 || client.Entity.MapID == 1011 || client.Entity.MapID == 1015 || client.Entity.MapID == 1762 || client.Entity.MapID == 2056)
                        {
                            client.Entity.Update(_String.Effect, "fam_exp_special", true);
                            Database.MonsterInformation monster = new Conquer_Online_Server.Database.MonsterInformation();
                            // monster.Boss = true;
                            monster.Hitpoints = 3500000;
                            monster.Level = 200;
                            monster.Mesh = 524;
                            monster.Name = "Cyclops";
                            monster.MaxAttack = 70000;
                            monster.AttackRange = 10;
                            monster.AttackType = 2;
                            monster.SpellID = 10304;
                            monster.AttackSpeed = 1000;
                            monster.ViewRange = 5;
                            monster.MoveSpeed = 500;
                            monster.RunSpeed = 500;
                            monster.MinAttack = 60000;

                            Game.Entity entity = new Game.Entity(Game.EntityFlag.Monster, false);
                            entity.MapObjType = Game.MapObjectType.Monster;
                            entity.MonsterInfo = monster;
                            entity.MonsterInfo.Owner = entity;
                            entity.Name = "Cyclops";
                            entity.MinAttack = monster.MinAttack;
                            entity.MaxAttack = entity.MagicAttack = monster.MaxAttack;
                            entity.Hitpoints = entity.MaxHitpoints = monster.Hitpoints;
                            entity.Body = monster.Mesh;
                            entity.Level = monster.Level;
                            entity.Defence = 20000;
                            entity.X = (ushort)(client.Entity.X - 2);
                            entity.Y = (ushort)(client.Entity.Y - 2);
                            entity.EntityFlag = Conquer_Online_Server.Game.EntityFlag.Monster;
                            entity.UID = (uint)ServerBase.Kernel.Random.Next(500060, 500110);
                            entity.MapID = client.Entity.MapID;
                            entity.SendUpdates = true;
                            client.Map.RemoveEntity(entity);
                            Network.GamePackets._String stringPacket = new Conquer_Online_Server.Network.GamePackets._String(true);
                            stringPacket.UID = monster.ID;
                            stringPacket.Type = Network.GamePackets._String.Effect;
                            stringPacket.Texts.Add("MBStandard");
                            client.Map.AddEntity(entity);


                            client.Inventory.Remove(item, Enums.ItemUse.Remove);
                            break;
                        }
                        else
                        {
                            client.Send(new Conquer_Online_Server.Network.GamePackets.Message("You Can't Summon Cyclops Here", System.Drawing.Color.Red, 0x7dc));
                            return;
                        }
                    }
                #endregion
                #region Hades
                case 5130517:
                    {
                        if (client.Entity.MapID == 1002 || client.Map.BaseID == 1020 || client.Entity.MapID == 1000 || client.Entity.MapID == 1011 || client.Entity.MapID == 1015 || client.Entity.MapID == 1762 || client.Entity.MapID == 2056)
                        {
                            client.Entity.Update(_String.Effect, "fam_gain", true);
                            Database.MonsterInformation monster = new Conquer_Online_Server.Database.MonsterInformation();
                            // monster.Boss = true;
                            monster.Hitpoints = 2500000;
                            monster.Level = 200;
                            monster.Mesh = 519;
                            monster.Name = "Hades";
                            monster.MaxAttack = 60000;
                            monster.AttackRange = 10;
                            monster.AttackType = 2;
                            monster.SpellID = 10304;
                            monster.AttackSpeed = 1000;
                            monster.ViewRange = 5;
                            monster.MoveSpeed = 500;
                            monster.RunSpeed = 500;
                            monster.MinAttack = 55000;
                            Game.Entity entity = new Game.Entity(Game.EntityFlag.Monster, false);
                            entity.MapObjType = Game.MapObjectType.Monster;
                            entity.MonsterInfo = monster;
                            entity.MonsterInfo.Owner = entity;
                            entity.Name = "Hades";
                            entity.MinAttack = monster.MinAttack;
                            entity.MaxAttack = entity.MagicAttack = monster.MaxAttack;
                            entity.Hitpoints = entity.MaxHitpoints = monster.Hitpoints;
                            entity.Body = monster.Mesh;
                            entity.Level = monster.Level;
                            entity.Defence = 20000;
                            entity.X = (ushort)(client.Entity.X - 2);
                            entity.Y = (ushort)(client.Entity.Y - 2);
                            entity.EntityFlag = Conquer_Online_Server.Game.EntityFlag.Monster;
                            entity.UID = (uint)ServerBase.Kernel.Random.Next(500060, 500110);
                            entity.MapID = client.Entity.MapID;
                            entity.SendUpdates = true;
                            client.Map.RemoveEntity(entity);
                            Network.GamePackets._String stringPacket = new Conquer_Online_Server.Network.GamePackets._String(true);
                            stringPacket.UID = monster.ID;
                            stringPacket.Type = Network.GamePackets._String.Effect;
                            stringPacket.Texts.Add("MBStandard");
                            client.Map.AddEntity(entity);


                            client.Inventory.Remove(item, Enums.ItemUse.Remove);
                            break;
                        }
                        else
                        {
                            client.Send(new Conquer_Online_Server.Network.GamePackets.Message("You Can't Summon Hades Here", System.Drawing.Color.Red, 0x7dc));
                            return;
                        }
                    }
                #endregion
                #region Centar
                case 5130518:// Sumon BosEvent speed
                    {
                        if (client.Entity.MapID == 1002 || client.Map.BaseID == 1020 || client.Entity.MapID == 1000 || client.Entity.MapID == 1011 || client.Entity.MapID == 1015 || client.Entity.MapID == 1762 || client.Entity.MapID == 2056)
                        {
                            client.Entity.Update(_String.Effect, "fam_exp", true);
                            Database.MonsterInformation monster = new Conquer_Online_Server.Database.MonsterInformation();
                            // monster.Boss = true;
                            monster.Hitpoints = 1500000;
                            monster.Level = 200;
                            monster.Mesh = 179;
                            monster.Name = "Centar";
                            monster.MaxAttack = 40000;
                            monster.AttackRange = 10;
                            monster.AttackType = 2;
                            monster.SpellID = 10304;
                            monster.AttackSpeed = 1000;
                            monster.ViewRange = 5;
                            monster.MoveSpeed = 500;
                            monster.RunSpeed = 500;
                            monster.MinAttack = 35000;
                            Game.Entity entity = new Game.Entity(Game.EntityFlag.Monster, false);
                            entity.MapObjType = Game.MapObjectType.Monster;
                            entity.MonsterInfo = monster;
                            entity.MonsterInfo.Owner = entity;
                            entity.Name = "Centar";
                            entity.MinAttack = monster.MinAttack;
                            entity.MaxAttack = entity.MagicAttack = monster.MaxAttack;
                            entity.Hitpoints = entity.MaxHitpoints = monster.Hitpoints;
                            entity.Body = monster.Mesh;
                            entity.Level = monster.Level;
                            entity.Defence = 20000;
                            entity.X = client.Entity.X;
                            entity.Y = client.Entity.Y;
                            entity.EntityFlag = Conquer_Online_Server.Game.EntityFlag.Monster;
                            entity.UID = (uint)ServerBase.Kernel.Random.Next(500060, 500110);
                            entity.MapID = client.Entity.MapID;
                            entity.SendUpdates = true;
                            client.Map.RemoveEntity(entity);
                            Network.GamePackets._String stringPacket = new Conquer_Online_Server.Network.GamePackets._String(true);
                            stringPacket.UID = monster.ID;
                            stringPacket.Type = Network.GamePackets._String.Effect;
                            stringPacket.Texts.Add("MBStandard");
                            client.Map.AddEntity(entity);

                            client.Inventory.Remove(item, Enums.ItemUse.Remove);
                            break;
                        }
                        else
                        {
                            client.Send(new Conquer_Online_Server.Network.GamePackets.Message("You Can't Summon Centar Here", System.Drawing.Color.Red, 0x7dc));
                            return;
                        }
                    }
                #endregion
                #endregion
                #region Box Satan life
                #region Box Satan life
                case 720675:
                    {
                        if (client.Entity.MapID == 1002 || client.Map.BaseID == 1020 || client.Entity.MapID == 1000 || client.Entity.MapID == 1011 || client.Entity.MapID == 1015 || client.Entity.MapID == 1762 || client.Entity.MapID == 2056)
                        {
                            client.Entity.Update(_String.Effect, "fathitgtsyd", true);

                            Database.MonsterInformation monster = new Conquer_Online_Server.Database.MonsterInformation();

                            monster.Hitpoints = 7500000;
                            monster.Level = 200;
                            monster.Mesh = 208;
                            monster.Name = "Satan";
                            monster.MaxAttack = 1500000;
                            monster.AttackRange = 10;
                            monster.AttackType = 2;
                            monster.SpellID = 10304;
                            monster.AttackSpeed = 1500;
                            monster.ViewRange = 10;
                            monster.MoveSpeed = 500;
                            monster.RunSpeed = 500;
                            monster.MinAttack = 100000;

                            Game.Entity entity = new Game.Entity(Game.EntityFlag.Monster, false);
                            entity.MapObjType = Game.MapObjectType.Monster;
                            entity.MonsterInfo = monster;
                            entity.MonsterInfo.Owner = entity;
                            entity.Name = "Satan";
                            entity.MinAttack = monster.MinAttack;
                            entity.MaxAttack = entity.MagicAttack = monster.MaxAttack;
                            entity.Hitpoints = entity.MaxHitpoints = monster.Hitpoints;
                            entity.Body = monster.Mesh;
                            entity.Level = monster.Level;
                            entity.Defence = 20000;
                            entity.X = (ushort)(client.Entity.X - 2);
                            entity.Y = (ushort)(client.Entity.Y - 2);
                            entity.EntityFlag = Conquer_Online_Server.Game.EntityFlag.Monster;
                            entity.UID = (uint)ServerBase.Kernel.Random.Next(500060, 500110);
                            entity.MapID = client.Entity.MapID;
                            entity.SendUpdates = true;
                            client.Map.RemoveEntity(entity);
                            Network.GamePackets._String stringPacket = new Conquer_Online_Server.Network.GamePackets._String(true);
                            stringPacket.UID = monster.ID;
                            stringPacket.Type = Network.GamePackets._String.Effect;
                            stringPacket.Texts.Add("MBStandard");
                            client.Map.AddEntity(entity);

                            client.Inventory.Remove(item, Enums.ItemUse.Remove);
                            break;
                        }
                        else
                        {
                            client.Send(new Conquer_Online_Server.Network.GamePackets.Message("You Can't kill the satan Here", System.Drawing.Color.Red, 0x7dc));
                            return;
                        }
                    }
                #endregion Box Satan life
                #endregion Box Satan life
                #region Startower&heavenfan&RidingCrop
                case 729993:
                    {
                        uint
                        itemid = 201009; //HeavenFan
                        itemid = 202009; //StarTower
                        itemid = 203009;//RidingCrop
                        if (client.Entity.Level >= 10)
                        {
                            if (client.Inventory.Count < 32)
                            {

                                ConquerItem items = new ConquerItem(true);
                                items.ID = 203009;//RidingCrop
                                items.Color = Conquer_Online_Server.Game.Enums.Color.White;
                                items.Plus = 12;
                                items.Bless = 1;
                                items.Durability = items.MaximDurability = Conquer_Online_Server.Database.ConquerItemInformation.BaseInformations[itemid].Durability = 20000; ;
                                client.Inventory.Add(items, Conquer_Online_Server.Game.Enums.ItemUse.CreateAndAdd);
                                client.Inventory.Remove(item, Conquer_Online_Server.Game.Enums.ItemUse.Remove);
                            }
                            if (client.Entity.Level >= 10)
                            {
                                if (client.Inventory.Count < 32)
                                {

                                    ConquerItem items = new ConquerItem(true);
                                    items.ID = 201009;//HeavenFan
                                    items.Color = Conquer_Online_Server.Game.Enums.Color.White;
                                    items.Plus = 12;
                                    items.Bless = 1;
                                    items.SocketOne = Conquer_Online_Server.Game.Enums.Gem.SuperThunderGem;
                                    items.SocketTwo = Conquer_Online_Server.Game.Enums.Gem.SuperThunderGem;
                                    items.Durability = items.MaximDurability = Conquer_Online_Server.Database.ConquerItemInformation.BaseInformations[itemid].Durability = 20000; ;
                                    client.Inventory.Add(items, Conquer_Online_Server.Game.Enums.ItemUse.CreateAndAdd);
                                    client.Inventory.Remove(item, Conquer_Online_Server.Game.Enums.ItemUse.Remove);
                                }
                                if (client.Entity.Level >= 10)
                                {
                                    if (client.Inventory.Count < 32)
                                    {

                                        ConquerItem items = new ConquerItem(true);
                                        items.ID = 202009;//StarTower
                                        items.Color = Conquer_Online_Server.Game.Enums.Color.White;
                                        items.Plus = 12;
                                        items.Bless = 1;
                                        items.SocketOne = Conquer_Online_Server.Game.Enums.Gem.SuperGloryGem;
                                        items.SocketTwo = Conquer_Online_Server.Game.Enums.Gem.SuperGloryGem;
                                        items.Durability = items.MaximDurability = Conquer_Online_Server.Database.ConquerItemInformation.BaseInformations[itemid].Durability = 20000; ;
                                        client.Inventory.Add(items, Conquer_Online_Server.Game.Enums.ItemUse.CreateAndAdd);
                                        client.Inventory.Remove(item, Conquer_Online_Server.Game.Enums.ItemUse.Remove);
                                    }
                                }
                            }
                        }
                    }
                    break;
                #endregion Startower&heavenfan
                #region StuffTrojan+12Pack
                case 8765433:
                    {
                        uint itemid = 201009;
                        itemid = 480439; //NirvanaClub
                        itemid = 410439;//SkyBlade
                        itemid = 420439;//SquallSword
                        itemid = 130309;//ObsidianArmor
                        itemid = 118309;//PeerlessCoronet
                        itemid = 120269;//FloridNecklace
                        itemid = 160249;//Blizzard
                        itemid = 150269;//CrimsonRing
                        itemid = 117309;//DreamEarrings
                        itemid = 201009; //HeavenFan
                        itemid = 202009; //StarTower
                        itemid = 203009;//RidingCrop
                        itemid = 300000;//Steed
                        if (client.Entity.Level >= 10)
                        {
                            if (client.Inventory.Count < 32)
                            {
                                client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                                ConquerItem _item = new ConquerItem(true);
                                _item.ID = 300000;
                                Database.ConquerItemInformation _iteminfos = new Database.ConquerItemInformation(_item.ID, 0);
                                _item.Durability = _item.MaximDurability = _iteminfos.BaseInformation.Durability;
                                _item.Plus = 12;
                                _item.Effect = Game.Enums.ItemEffect.Horse;
                                _item.SocketProgress = 255 | 150 << 16;
                                client.Inventory.Add(_item, Game.Enums.ItemUse.CreateAndAdd);
                            }

                            if (client.Entity.Level >= 10)
                            {
                                if (client.Inventory.Count < 32)
                                {

                                    ConquerItem items = new ConquerItem(true);
                                    items.ID = 201009;//HeavenFan
                                    items.Color = Conquer_Online_Server.Game.Enums.Color.White;
                                    items.Plus = 12;
                                    items.Bless = 1;
                                    items.SocketOne = Conquer_Online_Server.Game.Enums.Gem.SuperThunderGem;
                                    items.SocketTwo = Conquer_Online_Server.Game.Enums.Gem.SuperThunderGem;
                                    items.Durability = items.MaximDurability = Conquer_Online_Server.Database.ConquerItemInformation.BaseInformations[itemid].Durability = 20000; ;
                                    client.Inventory.Add(items, Conquer_Online_Server.Game.Enums.ItemUse.CreateAndAdd);
                                    client.Inventory.Remove(item, Conquer_Online_Server.Game.Enums.ItemUse.Remove);
                                }
                                if (client.Entity.Level >= 10)
                                {
                                    if (client.Inventory.Count < 32)
                                    {

                                        ConquerItem items = new ConquerItem(true);
                                        items.ID = 202009;//StarTower
                                        items.Color = Conquer_Online_Server.Game.Enums.Color.White;
                                        items.Plus = 12;
                                        items.Bless = 1;
                                        items.SocketOne = Conquer_Online_Server.Game.Enums.Gem.SuperThunderGem;
                                        items.SocketTwo = Conquer_Online_Server.Game.Enums.Gem.SuperThunderGem;
                                        items.Durability = items.MaximDurability = Conquer_Online_Server.Database.ConquerItemInformation.BaseInformations[itemid].Durability = 20000; ;
                                        client.Inventory.Add(items, Conquer_Online_Server.Game.Enums.ItemUse.CreateAndAdd);
                                        client.Inventory.Remove(item, Conquer_Online_Server.Game.Enums.ItemUse.Remove);
                                    }
                                    if (client.Entity.Level >= 10)
                                    {
                                        if (client.Inventory.Count < 32)
                                        {

                                            ConquerItem items = new ConquerItem(true);
                                            items.ID = 410439;//SkyBlade
                                            items.Color = Conquer_Online_Server.Game.Enums.Color.White;
                                            items.Plus = 12;
                                            items.Bless = 7;
                                            items.Enchant = 245;
                                            items.SocketOne = Conquer_Online_Server.Game.Enums.Gem.SuperDragonGem;
                                            items.SocketTwo = Conquer_Online_Server.Game.Enums.Gem.SuperDragonGem;
                                            items.Durability = items.MaximDurability = Conquer_Online_Server.Database.ConquerItemInformation.BaseInformations[itemid].Durability = 20000; ;
                                            client.Inventory.Add(items, Conquer_Online_Server.Game.Enums.ItemUse.CreateAndAdd);
                                            client.Inventory.Remove(item, Conquer_Online_Server.Game.Enums.ItemUse.Remove);
                                        }
                                        if (client.Entity.Level >= 10)
                                        {
                                            if (client.Inventory.Count < 32)
                                            {

                                                ConquerItem items = new ConquerItem(true);
                                                items.ID = 118309;//PeerlessCoronet
                                                items.Color = Conquer_Online_Server.Game.Enums.Color.White;
                                                items.Plus = 12;
                                                items.Bless = 7;
                                                items.Enchant = 245;
                                                items.SocketOne = Conquer_Online_Server.Game.Enums.Gem.SuperDragonGem;
                                                items.SocketTwo = Conquer_Online_Server.Game.Enums.Gem.SuperDragonGem;
                                                items.Durability = items.MaximDurability = Conquer_Online_Server.Database.ConquerItemInformation.BaseInformations[itemid].Durability = 20000; ;
                                                client.Inventory.Add(items, Conquer_Online_Server.Game.Enums.ItemUse.CreateAndAdd);
                                                client.Inventory.Remove(item, Conquer_Online_Server.Game.Enums.ItemUse.Remove);
                                            }
                                            if (client.Entity.Level >= 10)
                                            {
                                                if (client.Inventory.Count < 32)
                                                {

                                                    ConquerItem items = new ConquerItem(true);
                                                    items.ID = 420439;//SquallSword
                                                    items.Color = Conquer_Online_Server.Game.Enums.Color.White;
                                                    items.Plus = 12;
                                                    items.Bless = 7;
                                                    items.Enchant = 245;
                                                    items.SocketOne = Conquer_Online_Server.Game.Enums.Gem.SuperDragonGem;
                                                    items.SocketTwo = Conquer_Online_Server.Game.Enums.Gem.SuperDragonGem;
                                                    items.Durability = items.MaximDurability = Conquer_Online_Server.Database.ConquerItemInformation.BaseInformations[itemid].Durability = 20000; ;
                                                    client.Inventory.Add(items, Conquer_Online_Server.Game.Enums.ItemUse.CreateAndAdd);
                                                    client.Inventory.Remove(item, Conquer_Online_Server.Game.Enums.ItemUse.Remove);
                                                }
                                                if (client.Entity.Level >= 10)
                                                {
                                                    if (client.Inventory.Count < 32)
                                                    {

                                                        ConquerItem items = new ConquerItem(true);
                                                        items.ID = 130309;//ObsidianArmor
                                                        items.Color = Conquer_Online_Server.Game.Enums.Color.White;
                                                        items.Plus = 12;
                                                        items.Bless = 7;
                                                        items.Enchant = 245;
                                                        items.SocketOne = Conquer_Online_Server.Game.Enums.Gem.SuperDragonGem;
                                                        items.SocketTwo = Conquer_Online_Server.Game.Enums.Gem.SuperDragonGem;
                                                        items.Durability = items.MaximDurability = Conquer_Online_Server.Database.ConquerItemInformation.BaseInformations[itemid].Durability = 20000; ;
                                                        client.Inventory.Add(items, Conquer_Online_Server.Game.Enums.ItemUse.CreateAndAdd);
                                                        client.Inventory.Remove(item, Conquer_Online_Server.Game.Enums.ItemUse.Remove);
                                                    }

                                                    if (client.Entity.Level >= 10)
                                                    {
                                                        if (client.Inventory.Count < 32)
                                                        {

                                                            ConquerItem items = new ConquerItem(true);
                                                            items.ID = 120269;//FloridNecklace
                                                            items.Color = Conquer_Online_Server.Game.Enums.Color.White;
                                                            items.Plus = 12;
                                                            items.Bless = 7;
                                                            items.Enchant = 245;
                                                            items.SocketOne = Conquer_Online_Server.Game.Enums.Gem.SuperDragonGem;
                                                            items.SocketTwo = Conquer_Online_Server.Game.Enums.Gem.SuperDragonGem;
                                                            items.Durability = items.MaximDurability = Conquer_Online_Server.Database.ConquerItemInformation.BaseInformations[itemid].Durability = 20000; ;
                                                            client.Inventory.Add(items, Conquer_Online_Server.Game.Enums.ItemUse.CreateAndAdd);
                                                            client.Inventory.Remove(item, Conquer_Online_Server.Game.Enums.ItemUse.Remove);
                                                        }
                                                        if (client.Entity.Level >= 10)
                                                        {
                                                            if (client.Inventory.Count < 32)
                                                            {

                                                                ConquerItem items = new ConquerItem(true);
                                                                items.ID = 160249;//Blizzard
                                                                items.Color = Conquer_Online_Server.Game.Enums.Color.White;
                                                                items.Plus = 12;
                                                                items.Bless = 7;
                                                                items.Enchant = 245;
                                                                items.SocketOne = Conquer_Online_Server.Game.Enums.Gem.SuperDragonGem;
                                                                items.SocketTwo = Conquer_Online_Server.Game.Enums.Gem.SuperDragonGem;
                                                                items.Durability = items.MaximDurability = Conquer_Online_Server.Database.ConquerItemInformation.BaseInformations[itemid].Durability = 20000; ;
                                                                client.Inventory.Add(items, Conquer_Online_Server.Game.Enums.ItemUse.CreateAndAdd);
                                                                client.Inventory.Remove(item, Conquer_Online_Server.Game.Enums.ItemUse.Remove);
                                                            }
                                                            if (client.Entity.Level >= 10)
                                                            {
                                                                if (client.Inventory.Count < 32)
                                                                {

                                                                    ConquerItem items = new ConquerItem(true);
                                                                    items.ID = 150269;//CrimsonRing
                                                                    items.Color = Conquer_Online_Server.Game.Enums.Color.White;
                                                                    items.Plus = 12;
                                                                    items.Bless = 7;
                                                                    items.Enchant = 245;
                                                                    items.SocketOne = Conquer_Online_Server.Game.Enums.Gem.SuperDragonGem;
                                                                    items.SocketTwo = Conquer_Online_Server.Game.Enums.Gem.SuperDragonGem;
                                                                    items.Durability = items.MaximDurability = Conquer_Online_Server.Database.ConquerItemInformation.BaseInformations[itemid].Durability = 20000; ;
                                                                    client.Inventory.Add(items, Conquer_Online_Server.Game.Enums.ItemUse.CreateAndAdd);
                                                                    client.Inventory.Remove(item, Conquer_Online_Server.Game.Enums.ItemUse.Remove);
                                                                }
                                                                if (client.Entity.Level >= 10)
                                                                {
                                                                    if (client.Inventory.Count < 32)
                                                                    {

                                                                        ConquerItem items = new ConquerItem(true);
                                                                        items.ID = 117309;//DreamEarrings
                                                                        items.Color = Conquer_Online_Server.Game.Enums.Color.White;
                                                                        items.Plus = 12;
                                                                        items.Bless = 7;
                                                                        items.Enchant = 245;
                                                                        items.SocketOne = Conquer_Online_Server.Game.Enums.Gem.SuperDragonGem;
                                                                        items.SocketTwo = Conquer_Online_Server.Game.Enums.Gem.SuperDragonGem;
                                                                        items.Durability = items.MaximDurability = Conquer_Online_Server.Database.ConquerItemInformation.BaseInformations[itemid].Durability = 20000; ;
                                                                        client.Inventory.Add(items, Conquer_Online_Server.Game.Enums.ItemUse.CreateAndAdd);
                                                                        client.Inventory.Remove(item, Conquer_Online_Server.Game.Enums.ItemUse.Remove);
                                                                    }
                                                                    if (client.Entity.Level >= 10)
                                                                    {
                                                                        if (client.Inventory.Count < 32)
                                                                        {

                                                                            ConquerItem items = new ConquerItem(true);
                                                                            items.ID = 203009;//RidingCrop
                                                                            items.Color = Conquer_Online_Server.Game.Enums.Color.White;
                                                                            items.Plus = 12;
                                                                            items.Durability = items.MaximDurability = Conquer_Online_Server.Database.ConquerItemInformation.BaseInformations[itemid].Durability = 20000; ;
                                                                            client.Inventory.Add(items, Conquer_Online_Server.Game.Enums.ItemUse.CreateAndAdd);
                                                                            client.Inventory.Remove(item, Conquer_Online_Server.Game.Enums.ItemUse.Remove);
                                                                        }
                                                                        if (client.Entity.Level >= 10)
                                                                        {
                                                                            if (client.Inventory.Count < 32)
                                                                            {

                                                                                ConquerItem items = new ConquerItem(true);
                                                                                items.ID = 480439; //NirvanaClub
                                                                                items.Color = Conquer_Online_Server.Game.Enums.Color.White;
                                                                                items.Plus = 12;
                                                                                items.Bless = 7;
                                                                                items.Enchant = 245;
                                                                                items.SocketOne = Conquer_Online_Server.Game.Enums.Gem.SuperDragonGem;
                                                                                items.SocketTwo = Conquer_Online_Server.Game.Enums.Gem.SuperDragonGem;
                                                                                items.Durability = items.MaximDurability = Conquer_Online_Server.Database.ConquerItemInformation.BaseInformations[itemid].Durability = 20000; ;
                                                                                client.Inventory.Add(items, Conquer_Online_Server.Game.Enums.ItemUse.CreateAndAdd);
                                                                                client.Inventory.Remove(item, Conquer_Online_Server.Game.Enums.ItemUse.Remove);
                                                                            }

                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }

                        }

                    }
                    break;
                #endregion
                #region StuffArcher+12Pack
                case 8765434:
                    {
                        uint itemid = 201009;
                        itemid = 613429; //FantasyKnife
                        itemid = 500429; //HeavenlyBow
                        itemid = 133309;//WelkinCoat
                        itemid = 113309;//WhiteTigerHat
                        itemid = 142309;//HeavenPlume
                        itemid = 120269;//FloridNecklace
                        itemid = 160249;//Blizzard
                        itemid = 150269;//CrimsonRing
                        itemid = 117309;//DreamEarrings
                        itemid = 201009; //HeavenFan
                        itemid = 202009; //StarTower
                        itemid = 203009;//RidingCrop
                        itemid = 300000;//Steed


                        if (client.Entity.Level >= 10)
                        {
                            if (client.Inventory.Count < 32)
                            {
                                client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                                ConquerItem _item = new ConquerItem(true);
                                _item.ID = 300000;
                                Database.ConquerItemInformation _iteminfos = new Database.ConquerItemInformation(_item.ID, 0);
                                _item.Durability = _item.MaximDurability = _iteminfos.BaseInformation.Durability;
                                _item.Plus = 12;
                                _item.Effect = Game.Enums.ItemEffect.Horse;
                                _item.SocketProgress = 255 | 150 << 16;
                                client.Inventory.Add(_item, Game.Enums.ItemUse.CreateAndAdd);
                            }

                            if (client.Entity.Level >= 10)
                            {
                                if (client.Inventory.Count < 32)
                                {

                                    ConquerItem items = new ConquerItem(true);
                                    items.ID = 201009;//HeavenFan
                                    items.Color = Conquer_Online_Server.Game.Enums.Color.White;
                                    items.Plus = 12;
                                    items.SocketOne = Conquer_Online_Server.Game.Enums.Gem.SuperThunderGem;
                                    items.SocketTwo = Conquer_Online_Server.Game.Enums.Gem.SuperThunderGem;
                                    items.MaximDurability = 200;
                                    items.Durability = items.MaximDurability = Conquer_Online_Server.Database.ConquerItemInformation.BaseInformations[itemid].Durability = 20000; ;
                                    client.Inventory.Add(items, Conquer_Online_Server.Game.Enums.ItemUse.CreateAndAdd);
                                    client.Inventory.Remove(item, Conquer_Online_Server.Game.Enums.ItemUse.Remove);
                                }
                                if (client.Entity.Level >= 10)
                                {
                                    if (client.Inventory.Count < 32)
                                    {

                                        ConquerItem items = new ConquerItem(true);
                                        items.ID = 202009;//StarTower
                                        items.Color = Conquer_Online_Server.Game.Enums.Color.White;
                                        items.Plus = 12;
                                        items.SocketOne = Conquer_Online_Server.Game.Enums.Gem.SuperThunderGem;
                                        items.SocketTwo = Conquer_Online_Server.Game.Enums.Gem.SuperThunderGem;
                                        items.Durability = items.MaximDurability = Conquer_Online_Server.Database.ConquerItemInformation.BaseInformations[itemid].Durability = 20000; ;
                                        client.Inventory.Add(items, Conquer_Online_Server.Game.Enums.ItemUse.CreateAndAdd);
                                        client.Inventory.Remove(item, Conquer_Online_Server.Game.Enums.ItemUse.Remove);
                                    }
                                    if (client.Entity.Level >= 10)
                                    {
                                        if (client.Inventory.Count < 32)
                                        {

                                            ConquerItem items = new ConquerItem(true);
                                            items.ID = 500429; //HeavenlyBow
                                            items.Color = Conquer_Online_Server.Game.Enums.Color.White;
                                            items.Plus = 12;
                                            items.Bless = 7;
                                            items.Enchant = 245;
                                            items.SocketOne = Conquer_Online_Server.Game.Enums.Gem.SuperDragonGem;
                                            items.SocketTwo = Conquer_Online_Server.Game.Enums.Gem.SuperDragonGem;
                                            items.Durability = items.MaximDurability = Conquer_Online_Server.Database.ConquerItemInformation.BaseInformations[itemid].Durability = 20000; ;
                                            client.Inventory.Add(items, Conquer_Online_Server.Game.Enums.ItemUse.CreateAndAdd);
                                            client.Inventory.Remove(item, Conquer_Online_Server.Game.Enums.ItemUse.Remove);
                                        }
                                        if (client.Entity.Level >= 10)
                                        {
                                            if (client.Inventory.Count < 32)
                                            {

                                                ConquerItem items = new ConquerItem(true);
                                                items.ID = 613429; //FantasyKnife
                                                items.Color = Conquer_Online_Server.Game.Enums.Color.White;
                                                items.Plus = 12;
                                                items.Bless = 7;
                                                items.Enchant = 245;
                                                items.SocketOne = Conquer_Online_Server.Game.Enums.Gem.SuperDragonGem;
                                                items.SocketTwo = Conquer_Online_Server.Game.Enums.Gem.SuperDragonGem;
                                                items.Durability = items.MaximDurability = Conquer_Online_Server.Database.ConquerItemInformation.BaseInformations[itemid].Durability = 20000; ;
                                                client.Inventory.Add(items, Conquer_Online_Server.Game.Enums.ItemUse.CreateAndAdd);
                                                client.Inventory.Remove(item, Conquer_Online_Server.Game.Enums.ItemUse.Remove);
                                            }
                                            if (client.Entity.Level >= 10)
                                            {
                                                if (client.Inventory.Count < 32)
                                                {

                                                    ConquerItem items = new ConquerItem(true);
                                                    items.ID = 613429; //FantasyKnife
                                                    items.Color = Conquer_Online_Server.Game.Enums.Color.White;
                                                    items.Plus = 12;
                                                    items.Bless = 7;
                                                    items.Enchant = 245;
                                                    items.SocketOne = Conquer_Online_Server.Game.Enums.Gem.SuperDragonGem;
                                                    items.SocketTwo = Conquer_Online_Server.Game.Enums.Gem.SuperDragonGem;
                                                    items.Durability = items.MaximDurability = Conquer_Online_Server.Database.ConquerItemInformation.BaseInformations[itemid].Durability = 20000; ;
                                                    client.Inventory.Add(items, Conquer_Online_Server.Game.Enums.ItemUse.CreateAndAdd);
                                                    client.Inventory.Remove(item, Conquer_Online_Server.Game.Enums.ItemUse.Remove);
                                                }
                                                if (client.Entity.Level >= 10)
                                                {
                                                    if (client.Inventory.Count < 32)
                                                    {

                                                        ConquerItem items = new ConquerItem(true);
                                                        items.ID = 133309;//WelkinCoat
                                                        items.Color = Conquer_Online_Server.Game.Enums.Color.White;
                                                        items.Plus = 12;
                                                        items.Bless = 7;
                                                        items.Enchant = 245;
                                                        items.SocketOne = Conquer_Online_Server.Game.Enums.Gem.SuperDragonGem;
                                                        items.SocketTwo = Conquer_Online_Server.Game.Enums.Gem.SuperDragonGem;
                                                        items.Durability = items.MaximDurability = Conquer_Online_Server.Database.ConquerItemInformation.BaseInformations[itemid].Durability = 20000; ;
                                                        client.Inventory.Add(items, Conquer_Online_Server.Game.Enums.ItemUse.CreateAndAdd);
                                                        client.Inventory.Remove(item, Conquer_Online_Server.Game.Enums.ItemUse.Remove);
                                                    }
                                                    if (client.Entity.Level >= 10)
                                                    {
                                                        if (client.Inventory.Count < 32)
                                                        {

                                                            ConquerItem items = new ConquerItem(true);
                                                            items.ID = 113309;//WhiteTigerHat
                                                            items.Color = Conquer_Online_Server.Game.Enums.Color.White;
                                                            items.Plus = 12;
                                                            items.Bless = 7;
                                                            items.Enchant = 245;
                                                            items.SocketOne = Conquer_Online_Server.Game.Enums.Gem.SuperDragonGem;
                                                            items.SocketTwo = Conquer_Online_Server.Game.Enums.Gem.SuperDragonGem;
                                                            items.Durability = items.MaximDurability = Conquer_Online_Server.Database.ConquerItemInformation.BaseInformations[itemid].Durability = 20000; ;
                                                            client.Inventory.Add(items, Conquer_Online_Server.Game.Enums.ItemUse.CreateAndAdd);
                                                            client.Inventory.Remove(item, Conquer_Online_Server.Game.Enums.ItemUse.Remove);
                                                        }
                                                        if (client.Entity.Level >= 10)
                                                        {
                                                            if (client.Inventory.Count < 32)
                                                            {

                                                                ConquerItem items = new ConquerItem(true);
                                                                items.ID = 142309;//HeavenPlume
                                                                items.Color = Conquer_Online_Server.Game.Enums.Color.White;
                                                                items.Plus = 12;
                                                                items.Bless = 7;
                                                                items.Enchant = 245;
                                                                items.SocketOne = Conquer_Online_Server.Game.Enums.Gem.SuperDragonGem;
                                                                items.SocketTwo = Conquer_Online_Server.Game.Enums.Gem.SuperDragonGem;
                                                                items.Durability = items.MaximDurability = Conquer_Online_Server.Database.ConquerItemInformation.BaseInformations[itemid].Durability = 20000; ;
                                                                client.Inventory.Add(items, Conquer_Online_Server.Game.Enums.ItemUse.CreateAndAdd);
                                                                client.Inventory.Remove(item, Conquer_Online_Server.Game.Enums.ItemUse.Remove);
                                                            }
                                                            if (client.Entity.Level >= 10)
                                                            {
                                                                if (client.Inventory.Count < 32)
                                                                {

                                                                    ConquerItem items = new ConquerItem(true);
                                                                    items.ID = 120269;//FloridNecklace
                                                                    items.Color = Conquer_Online_Server.Game.Enums.Color.White;
                                                                    items.Plus = 12;
                                                                    items.Bless = 7;
                                                                    items.Enchant = 245;
                                                                    items.SocketOne = Conquer_Online_Server.Game.Enums.Gem.SuperDragonGem;
                                                                    items.SocketTwo = Conquer_Online_Server.Game.Enums.Gem.SuperDragonGem;
                                                                    items.Durability = items.MaximDurability = Conquer_Online_Server.Database.ConquerItemInformation.BaseInformations[itemid].Durability = 20000; ;
                                                                    client.Inventory.Add(items, Conquer_Online_Server.Game.Enums.ItemUse.CreateAndAdd);
                                                                    client.Inventory.Remove(item, Conquer_Online_Server.Game.Enums.ItemUse.Remove);
                                                                }
                                                                if (client.Entity.Level >= 10)
                                                                {
                                                                    if (client.Inventory.Count < 32)
                                                                    {

                                                                        ConquerItem items = new ConquerItem(true);
                                                                        items.ID = 160249;//Blizzard
                                                                        items.Color = Conquer_Online_Server.Game.Enums.Color.White;
                                                                        items.Plus = 12;
                                                                        items.Bless = 7;
                                                                        items.Enchant = 245;
                                                                        items.SocketOne = Conquer_Online_Server.Game.Enums.Gem.SuperDragonGem;
                                                                        items.SocketTwo = Conquer_Online_Server.Game.Enums.Gem.SuperDragonGem;
                                                                        items.Durability = items.MaximDurability = Conquer_Online_Server.Database.ConquerItemInformation.BaseInformations[itemid].Durability = 20000; ;
                                                                        client.Inventory.Add(items, Conquer_Online_Server.Game.Enums.ItemUse.CreateAndAdd);
                                                                        client.Inventory.Remove(item, Conquer_Online_Server.Game.Enums.ItemUse.Remove);
                                                                    }
                                                                    if (client.Entity.Level >= 10)
                                                                    {
                                                                        if (client.Inventory.Count < 32)
                                                                        {

                                                                            ConquerItem items = new ConquerItem(true);
                                                                            items.ID = 150269;//CrimsonRing
                                                                            items.Color = Conquer_Online_Server.Game.Enums.Color.White;
                                                                            items.Plus = 12;
                                                                            items.Bless = 7;
                                                                            items.Enchant = 245;
                                                                            items.SocketOne = Conquer_Online_Server.Game.Enums.Gem.SuperDragonGem;
                                                                            items.SocketTwo = Conquer_Online_Server.Game.Enums.Gem.SuperDragonGem;
                                                                            items.Durability = items.MaximDurability = Conquer_Online_Server.Database.ConquerItemInformation.BaseInformations[itemid].Durability = 20000; ;
                                                                            client.Inventory.Add(items, Conquer_Online_Server.Game.Enums.ItemUse.CreateAndAdd);
                                                                            client.Inventory.Remove(item, Conquer_Online_Server.Game.Enums.ItemUse.Remove);
                                                                        }
                                                                        if (client.Entity.Level >= 10)
                                                                        {
                                                                            if (client.Inventory.Count < 32)
                                                                            {

                                                                                ConquerItem items = new ConquerItem(true);
                                                                                items.ID = 117309;//DreamEarrings
                                                                                items.Color = Conquer_Online_Server.Game.Enums.Color.White;
                                                                                items.Plus = 12;
                                                                                items.Bless = 7;
                                                                                items.Enchant = 245;
                                                                                items.SocketOne = Conquer_Online_Server.Game.Enums.Gem.SuperDragonGem;
                                                                                items.SocketTwo = Conquer_Online_Server.Game.Enums.Gem.SuperDragonGem;
                                                                                items.Durability = items.MaximDurability = Conquer_Online_Server.Database.ConquerItemInformation.BaseInformations[itemid].Durability = 20000; ;
                                                                                client.Inventory.Add(items, Conquer_Online_Server.Game.Enums.ItemUse.CreateAndAdd);
                                                                                client.Inventory.Remove(item, Conquer_Online_Server.Game.Enums.ItemUse.Remove);
                                                                            }
                                                                            if (client.Entity.Level >= 10)
                                                                            {
                                                                                if (client.Inventory.Count < 32)
                                                                                {

                                                                                    ConquerItem items = new ConquerItem(true);
                                                                                    items.ID = 203009;//RidingCrop
                                                                                    items.Color = Conquer_Online_Server.Game.Enums.Color.White;
                                                                                    items.Plus = 12;
                                                                                    items.Durability = items.MaximDurability = Conquer_Online_Server.Database.ConquerItemInformation.BaseInformations[itemid].Durability = 20000; ;
                                                                                    client.Inventory.Add(items, Conquer_Online_Server.Game.Enums.ItemUse.CreateAndAdd);
                                                                                    client.Inventory.Remove(item, Conquer_Online_Server.Game.Enums.ItemUse.Remove);
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }

                        }

                    }
                    break;
                #endregion
                #region StuffNinja+12Pack
                case 8765435:
                    {
                        uint itemid = 201009;
                        itemid = 601439; //HanzoKatana
                        itemid = 135309;//NightmareVest
                        itemid = 112309;//RambleVeil
                        itemid = 123309;//NightmareHood
                        //itemid = 118309;//////?????
                        itemid = 120269;//FloridNecklace
                        itemid = 160249;//Blizzard
                        itemid = 150269;//CrimsonRing
                        itemid = 117309;//DreamEarrings
                        itemid = 201009; //HeavenFan
                        itemid = 202009; //StarTower
                        itemid = 203009;//RidingCrop
                        itemid = 300000;//Steed


                        if (client.Entity.Level >= 10)
                        {
                            if (client.Inventory.Count < 32)
                            {
                                client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                                ConquerItem _item = new ConquerItem(true);
                                _item.ID = 300000;
                                Database.ConquerItemInformation _iteminfos = new Database.ConquerItemInformation(_item.ID, 0);
                                _item.Durability = _item.MaximDurability = _iteminfos.BaseInformation.Durability;
                                _item.Plus = 12;
                                _item.Effect = Game.Enums.ItemEffect.Horse;
                                _item.SocketProgress = 255 | 150 << 16;
                                client.Inventory.Add(_item, Game.Enums.ItemUse.CreateAndAdd);
                            }


                            if (client.Entity.Level >= 10)
                            {
                                if (client.Inventory.Count < 32)
                                {

                                    ConquerItem items = new ConquerItem(true);
                                    items.ID = 201009;//HeavenFan
                                    items.Color = Conquer_Online_Server.Game.Enums.Color.White;
                                    items.Plus = 12;
                                    items.SocketOne = Conquer_Online_Server.Game.Enums.Gem.SuperThunderGem;
                                    items.SocketTwo = Conquer_Online_Server.Game.Enums.Gem.SuperThunderGem;


                                    items.Durability = items.MaximDurability = Conquer_Online_Server.Database.ConquerItemInformation.BaseInformations[itemid].Durability = 20000; ;
                                    client.Inventory.Add(items, Conquer_Online_Server.Game.Enums.ItemUse.CreateAndAdd);
                                    client.Inventory.Remove(item, Conquer_Online_Server.Game.Enums.ItemUse.Remove);
                                }
                                if (client.Entity.Level >= 10)
                                {
                                    if (client.Inventory.Count < 32)
                                    {

                                        ConquerItem items = new ConquerItem(true);
                                        items.ID = 202009;//StarTower
                                        items.Color = Conquer_Online_Server.Game.Enums.Color.White;
                                        items.Plus = 12;
                                        items.SocketOne = Conquer_Online_Server.Game.Enums.Gem.SuperThunderGem;
                                        items.SocketTwo = Conquer_Online_Server.Game.Enums.Gem.SuperThunderGem;
                                        items.Durability = items.MaximDurability = Conquer_Online_Server.Database.ConquerItemInformation.BaseInformations[itemid].Durability = 20000; ;
                                        client.Inventory.Add(items, Conquer_Online_Server.Game.Enums.ItemUse.CreateAndAdd);
                                        client.Inventory.Remove(item, Conquer_Online_Server.Game.Enums.ItemUse.Remove);
                                    }
                                    if (client.Entity.Level >= 10)
                                    {
                                        if (client.Inventory.Count < 32)
                                        {

                                            ConquerItem items = new ConquerItem(true);
                                            items.ID = 601439; //HanzoKatana
                                            items.Color = Conquer_Online_Server.Game.Enums.Color.White;
                                            items.Plus = 12;
                                            items.Bless = 7;
                                            items.Enchant = 245;
                                            items.SocketOne = Conquer_Online_Server.Game.Enums.Gem.SuperDragonGem;
                                            items.SocketTwo = Conquer_Online_Server.Game.Enums.Gem.SuperDragonGem;
                                            items.Durability = items.MaximDurability = Conquer_Online_Server.Database.ConquerItemInformation.BaseInformations[itemid].Durability = 20000; ;
                                            client.Inventory.Add(items, Conquer_Online_Server.Game.Enums.ItemUse.CreateAndAdd);
                                            client.Inventory.Remove(item, Conquer_Online_Server.Game.Enums.ItemUse.Remove);
                                        }
                                        if (client.Entity.Level >= 10)
                                        {
                                            if (client.Inventory.Count < 32)
                                            {

                                                ConquerItem items = new ConquerItem(true);
                                                items.ID = 601439; //HanzoKatana
                                                items.Color = Conquer_Online_Server.Game.Enums.Color.White;
                                                items.Plus = 12;
                                                items.Bless = 7;
                                                items.Enchant = 245;
                                                items.SocketOne = Conquer_Online_Server.Game.Enums.Gem.SuperDragonGem;
                                                items.SocketTwo = Conquer_Online_Server.Game.Enums.Gem.SuperDragonGem;
                                                items.Durability = items.MaximDurability = Conquer_Online_Server.Database.ConquerItemInformation.BaseInformations[itemid].Durability = 20000; ;
                                                client.Inventory.Add(items, Conquer_Online_Server.Game.Enums.ItemUse.CreateAndAdd);
                                                client.Inventory.Remove(item, Conquer_Online_Server.Game.Enums.ItemUse.Remove);
                                            }
                                            if (client.Entity.Level >= 10)
                                            {
                                                if (client.Inventory.Count < 32)
                                                {

                                                    ConquerItem items = new ConquerItem(true);
                                                    items.ID = 135309;//NightmareVest
                                                    items.Color = Conquer_Online_Server.Game.Enums.Color.White;
                                                    items.Plus = 12;
                                                    items.Bless = 7;
                                                    items.Enchant = 245;
                                                    items.SocketOne = Conquer_Online_Server.Game.Enums.Gem.SuperDragonGem;
                                                    items.SocketTwo = Conquer_Online_Server.Game.Enums.Gem.SuperDragonGem;
                                                    items.Durability = items.MaximDurability = Conquer_Online_Server.Database.ConquerItemInformation.BaseInformations[itemid].Durability = 20000; ;
                                                    client.Inventory.Add(items, Conquer_Online_Server.Game.Enums.ItemUse.CreateAndAdd);
                                                    client.Inventory.Remove(item, Conquer_Online_Server.Game.Enums.ItemUse.Remove);
                                                }
                                                if (client.Entity.Level >= 10)
                                                {
                                                    if (client.Inventory.Count < 32)
                                                    {

                                                        ConquerItem items = new ConquerItem(true);
                                                        items.ID = 112309;//RambleVeil
                                                        items.Color = Conquer_Online_Server.Game.Enums.Color.White;
                                                        items.Plus = 12;
                                                        items.Bless = 7;
                                                        items.Enchant = 245;
                                                        items.SocketOne = Conquer_Online_Server.Game.Enums.Gem.SuperDragonGem;
                                                        items.SocketTwo = Conquer_Online_Server.Game.Enums.Gem.SuperDragonGem;
                                                        items.Durability = items.MaximDurability = Conquer_Online_Server.Database.ConquerItemInformation.BaseInformations[itemid].Durability = 20000; ;
                                                        client.Inventory.Add(items, Conquer_Online_Server.Game.Enums.ItemUse.CreateAndAdd);
                                                        client.Inventory.Remove(item, Conquer_Online_Server.Game.Enums.ItemUse.Remove);
                                                    }
                                                    if (client.Entity.Level >= 10)
                                                    {
                                                        if (client.Inventory.Count < 32)
                                                        {

                                                            ConquerItem items = new ConquerItem(true);
                                                            items.ID = 118309;//??????
                                                            items.Color = Conquer_Online_Server.Game.Enums.Color.White;
                                                            items.Plus = 12;
                                                            items.Bless = 7;
                                                            items.Enchant = 245;
                                                            items.SocketOne = Conquer_Online_Server.Game.Enums.Gem.SuperDragonGem;
                                                            items.SocketTwo = Conquer_Online_Server.Game.Enums.Gem.SuperDragonGem;
                                                            items.Durability = items.MaximDurability = Conquer_Online_Server.Database.ConquerItemInformation.BaseInformations[itemid].Durability = 20000; ;
                                                            client.Inventory.Add(items, Conquer_Online_Server.Game.Enums.ItemUse.CreateAndAdd);
                                                            client.Inventory.Remove(item, Conquer_Online_Server.Game.Enums.ItemUse.Remove);
                                                        }
                                                        if (client.Entity.Level >= 10)
                                                        {
                                                            if (client.Inventory.Count < 32)
                                                            {

                                                                ConquerItem items = new ConquerItem(true);
                                                                items.ID = 120269;//FloridNecklace
                                                                items.Color = Conquer_Online_Server.Game.Enums.Color.White;
                                                                items.Plus = 12;
                                                                items.Bless = 7;
                                                                items.Enchant = 245;
                                                                items.SocketOne = Conquer_Online_Server.Game.Enums.Gem.SuperDragonGem;
                                                                items.SocketTwo = Conquer_Online_Server.Game.Enums.Gem.SuperDragonGem;
                                                                items.Durability = items.MaximDurability = Conquer_Online_Server.Database.ConquerItemInformation.BaseInformations[itemid].Durability = 20000; ;
                                                                client.Inventory.Add(items, Conquer_Online_Server.Game.Enums.ItemUse.CreateAndAdd);
                                                                client.Inventory.Remove(item, Conquer_Online_Server.Game.Enums.ItemUse.Remove);
                                                            }
                                                            if (client.Entity.Level >= 10)
                                                            {
                                                                if (client.Inventory.Count < 32)
                                                                {

                                                                    ConquerItem items = new ConquerItem(true);
                                                                    items.ID = 160249;//Blizzard
                                                                    items.Color = Conquer_Online_Server.Game.Enums.Color.White;
                                                                    items.Plus = 12;
                                                                    items.Bless = 7;
                                                                    items.Enchant = 245;
                                                                    items.SocketOne = Conquer_Online_Server.Game.Enums.Gem.SuperDragonGem;
                                                                    items.SocketTwo = Conquer_Online_Server.Game.Enums.Gem.SuperDragonGem;
                                                                    items.Durability = items.MaximDurability = Conquer_Online_Server.Database.ConquerItemInformation.BaseInformations[itemid].Durability = 20000; ;
                                                                    client.Inventory.Add(items, Conquer_Online_Server.Game.Enums.ItemUse.CreateAndAdd);
                                                                    client.Inventory.Remove(item, Conquer_Online_Server.Game.Enums.ItemUse.Remove);
                                                                }
                                                                if (client.Entity.Level >= 10)
                                                                {
                                                                    if (client.Inventory.Count < 32)
                                                                    {

                                                                        ConquerItem items = new ConquerItem(true);
                                                                        items.ID = 150269;//CrimsonRing
                                                                        items.Color = Conquer_Online_Server.Game.Enums.Color.White;
                                                                        items.Plus = 12;
                                                                        items.Bless = 7;
                                                                        items.Enchant = 245;
                                                                        items.SocketOne = Conquer_Online_Server.Game.Enums.Gem.SuperDragonGem;
                                                                        items.SocketTwo = Conquer_Online_Server.Game.Enums.Gem.SuperDragonGem;
                                                                        items.Durability = items.MaximDurability = Conquer_Online_Server.Database.ConquerItemInformation.BaseInformations[itemid].Durability = 20000; ;
                                                                        client.Inventory.Add(items, Conquer_Online_Server.Game.Enums.ItemUse.CreateAndAdd);
                                                                        client.Inventory.Remove(item, Conquer_Online_Server.Game.Enums.ItemUse.Remove);
                                                                    }
                                                                    if (client.Entity.Level >= 10)
                                                                    {
                                                                        if (client.Inventory.Count < 32)
                                                                        {

                                                                            ConquerItem items = new ConquerItem(true);
                                                                            items.ID = 117309;//DreamEarrings
                                                                            items.Color = Conquer_Online_Server.Game.Enums.Color.White;
                                                                            items.Plus = 12;
                                                                            items.Bless = 7;
                                                                            items.Enchant = 245;
                                                                            items.SocketOne = Conquer_Online_Server.Game.Enums.Gem.SuperDragonGem;
                                                                            items.SocketTwo = Conquer_Online_Server.Game.Enums.Gem.SuperDragonGem;
                                                                            items.Durability = items.MaximDurability = Conquer_Online_Server.Database.ConquerItemInformation.BaseInformations[itemid].Durability = 20000; ;
                                                                            client.Inventory.Add(items, Conquer_Online_Server.Game.Enums.ItemUse.CreateAndAdd);
                                                                            client.Inventory.Remove(item, Conquer_Online_Server.Game.Enums.ItemUse.Remove);
                                                                        }
                                                                        if (client.Entity.Level >= 10)
                                                                        {
                                                                            if (client.Inventory.Count < 32)
                                                                            {

                                                                                ConquerItem items = new ConquerItem(true);
                                                                                items.ID = 203009;//RidingCrop
                                                                                items.Color = Conquer_Online_Server.Game.Enums.Color.White;
                                                                                items.Plus = 12;
                                                                                items.Durability = items.MaximDurability = Conquer_Online_Server.Database.ConquerItemInformation.BaseInformations[itemid].Durability = 20000; ;
                                                                                client.Inventory.Add(items, Conquer_Online_Server.Game.Enums.ItemUse.CreateAndAdd);
                                                                                client.Inventory.Remove(item, Conquer_Online_Server.Game.Enums.ItemUse.Remove);
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }

                        }

                    }
                    break;
                #endregion
                #region StuffMonk+12Pack
                case 8765436:
                    {
                        uint itemid = 201009;//HeavenFan
                        itemid = 610439; //LazuritePrayerBeads
                        itemid = 136309;//WhiteLotusFrock
                        itemid = 143309;//XumiCap
                        //itemid = 123309;//NightmareHood
                        itemid = 120269;//FloridNecklace
                        itemid = 160249;//Blizzard
                        itemid = 150269;//CrimsonRing
                        itemid = 117309;//DreamEarrings
                        itemid = 202009; //StarTower
                        itemid = 203009;//RidingCrop
                        itemid = 300000;//Steed


                        if (client.Entity.Level >= 10)
                        {
                            if (client.Inventory.Count < 32)
                            {
                                client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                                ConquerItem _item = new ConquerItem(true);
                                _item.ID = 300000;
                                Database.ConquerItemInformation _iteminfos = new Database.ConquerItemInformation(_item.ID, 0);
                                _item.Durability = _item.MaximDurability = _iteminfos.BaseInformation.Durability;
                                _item.Plus = 12;
                                _item.Effect = Game.Enums.ItemEffect.Horse;
                                _item.SocketProgress = 255 | 150 << 16;
                                client.Inventory.Add(_item, Game.Enums.ItemUse.CreateAndAdd);
                            }


                            if (client.Entity.Level >= 10)
                            {
                                if (client.Inventory.Count < 32)
                                {

                                    ConquerItem items = new ConquerItem(true);
                                    items.ID = 201009;//HeavenFan
                                    items.Color = Conquer_Online_Server.Game.Enums.Color.White;
                                    items.Plus = 12;
                                    items.SocketOne = Conquer_Online_Server.Game.Enums.Gem.SuperThunderGem;
                                    items.SocketTwo = Conquer_Online_Server.Game.Enums.Gem.SuperThunderGem;


                                    items.Durability = items.MaximDurability = Conquer_Online_Server.Database.ConquerItemInformation.BaseInformations[itemid].Durability = 20000; ;
                                    client.Inventory.Add(items, Conquer_Online_Server.Game.Enums.ItemUse.CreateAndAdd);
                                    client.Inventory.Remove(item, Conquer_Online_Server.Game.Enums.ItemUse.Remove);
                                }
                                if (client.Entity.Level >= 10)
                                {
                                    if (client.Inventory.Count < 32)
                                    {

                                        ConquerItem items = new ConquerItem(true);
                                        items.ID = 202009;//StarTower
                                        items.Color = Conquer_Online_Server.Game.Enums.Color.White;
                                        items.Plus = 12;
                                        items.SocketOne = Conquer_Online_Server.Game.Enums.Gem.SuperThunderGem;
                                        items.SocketTwo = Conquer_Online_Server.Game.Enums.Gem.SuperThunderGem;
                                        items.Durability = items.MaximDurability = Conquer_Online_Server.Database.ConquerItemInformation.BaseInformations[itemid].Durability = 20000; ;
                                        client.Inventory.Add(items, Conquer_Online_Server.Game.Enums.ItemUse.CreateAndAdd);
                                        client.Inventory.Remove(item, Conquer_Online_Server.Game.Enums.ItemUse.Remove);
                                    }
                                    if (client.Entity.Level >= 10)
                                    {
                                        if (client.Inventory.Count < 32)
                                        {

                                            ConquerItem items = new ConquerItem(true);
                                            items.ID = 610439; //LazuritePrayerBeads
                                            items.Color = Conquer_Online_Server.Game.Enums.Color.White;
                                            items.Plus = 12;
                                            items.Bless = 7;
                                            items.Enchant = 245;
                                            items.SocketOne = Conquer_Online_Server.Game.Enums.Gem.SuperDragonGem;
                                            items.SocketTwo = Conquer_Online_Server.Game.Enums.Gem.SuperDragonGem;
                                            items.Durability = items.MaximDurability = Conquer_Online_Server.Database.ConquerItemInformation.BaseInformations[itemid].Durability = 20000; ;
                                            client.Inventory.Add(items, Conquer_Online_Server.Game.Enums.ItemUse.CreateAndAdd);
                                            client.Inventory.Remove(item, Conquer_Online_Server.Game.Enums.ItemUse.Remove);
                                        } if (client.Entity.Level >= 10)
                                        {
                                            if (client.Inventory.Count < 32)
                                            {

                                                ConquerItem items = new ConquerItem(true);
                                                items.ID = 610439; //LazuritePrayerBeads
                                                items.Color = Conquer_Online_Server.Game.Enums.Color.White;
                                                items.Plus = 12;
                                                items.Bless = 7;
                                                items.Enchant = 245;
                                                items.SocketOne = Conquer_Online_Server.Game.Enums.Gem.SuperDragonGem;
                                                items.SocketTwo = Conquer_Online_Server.Game.Enums.Gem.SuperDragonGem;
                                                items.Durability = items.MaximDurability = Conquer_Online_Server.Database.ConquerItemInformation.BaseInformations[itemid].Durability = 20000; ;
                                                client.Inventory.Add(items, Conquer_Online_Server.Game.Enums.ItemUse.CreateAndAdd);
                                                client.Inventory.Remove(item, Conquer_Online_Server.Game.Enums.ItemUse.Remove);
                                            }
                                            if (client.Entity.Level >= 10)
                                            {
                                                if (client.Inventory.Count < 32)
                                                {

                                                    ConquerItem items = new ConquerItem(true);
                                                    items.ID = 136309;//WhiteLotusFrock
                                                    items.Color = Conquer_Online_Server.Game.Enums.Color.White;
                                                    items.Plus = 12;
                                                    items.Bless = 7;
                                                    items.Enchant = 245;
                                                    items.SocketOne = Conquer_Online_Server.Game.Enums.Gem.SuperDragonGem;
                                                    items.SocketTwo = Conquer_Online_Server.Game.Enums.Gem.SuperDragonGem;
                                                    items.Durability = items.MaximDurability = Conquer_Online_Server.Database.ConquerItemInformation.BaseInformations[itemid].Durability = 20000; ;
                                                    client.Inventory.Add(items, Conquer_Online_Server.Game.Enums.ItemUse.CreateAndAdd);
                                                    client.Inventory.Remove(item, Conquer_Online_Server.Game.Enums.ItemUse.Remove);
                                                }
                                                if (client.Entity.Level >= 10)
                                                {
                                                    if (client.Inventory.Count < 32)
                                                    {

                                                        ConquerItem items = new ConquerItem(true);
                                                        items.ID = 143309;//XumiCap
                                                        items.Color = Conquer_Online_Server.Game.Enums.Color.White;
                                                        items.Plus = 12;
                                                        items.Bless = 7;
                                                        items.Enchant = 245;
                                                        items.SocketOne = Conquer_Online_Server.Game.Enums.Gem.SuperDragonGem;
                                                        items.SocketTwo = Conquer_Online_Server.Game.Enums.Gem.SuperDragonGem;
                                                        items.Durability = items.MaximDurability = Conquer_Online_Server.Database.ConquerItemInformation.BaseInformations[itemid].Durability = 20000; ;
                                                        client.Inventory.Add(items, Conquer_Online_Server.Game.Enums.ItemUse.CreateAndAdd);
                                                        client.Inventory.Remove(item, Conquer_Online_Server.Game.Enums.ItemUse.Remove);
                                                    }

                                                    if (client.Entity.Level >= 10)
                                                    {
                                                        if (client.Inventory.Count < 32)
                                                        {

                                                            ConquerItem items = new ConquerItem(true);
                                                            items.ID = 120269;//FloridNecklace
                                                            items.Color = Conquer_Online_Server.Game.Enums.Color.White;
                                                            items.Plus = 12;
                                                            items.Bless = 7;
                                                            items.Enchant = 245;
                                                            items.SocketOne = Conquer_Online_Server.Game.Enums.Gem.SuperDragonGem;
                                                            items.SocketTwo = Conquer_Online_Server.Game.Enums.Gem.SuperDragonGem;
                                                            items.Durability = items.MaximDurability = Conquer_Online_Server.Database.ConquerItemInformation.BaseInformations[itemid].Durability = 20000; ;
                                                            client.Inventory.Add(items, Conquer_Online_Server.Game.Enums.ItemUse.CreateAndAdd);
                                                            client.Inventory.Remove(item, Conquer_Online_Server.Game.Enums.ItemUse.Remove);
                                                        }
                                                        if (client.Entity.Level >= 10)
                                                        {
                                                            if (client.Inventory.Count < 32)
                                                            {

                                                                ConquerItem items = new ConquerItem(true);
                                                                items.ID = 160249;//Blizzard
                                                                items.Color = Conquer_Online_Server.Game.Enums.Color.White;
                                                                items.Plus = 12;
                                                                items.Bless = 7;
                                                                items.Enchant = 245;
                                                                items.SocketOne = Conquer_Online_Server.Game.Enums.Gem.SuperDragonGem;
                                                                items.SocketTwo = Conquer_Online_Server.Game.Enums.Gem.SuperDragonGem;
                                                                items.Durability = items.MaximDurability = Conquer_Online_Server.Database.ConquerItemInformation.BaseInformations[itemid].Durability = 20000; ;
                                                                client.Inventory.Add(items, Conquer_Online_Server.Game.Enums.ItemUse.CreateAndAdd);
                                                                client.Inventory.Remove(item, Conquer_Online_Server.Game.Enums.ItemUse.Remove);
                                                            }
                                                            if (client.Entity.Level >= 10)
                                                            {
                                                                if (client.Inventory.Count < 32)
                                                                {

                                                                    ConquerItem items = new ConquerItem(true);
                                                                    items.ID = 150269;//CrimsonRing
                                                                    items.Color = Conquer_Online_Server.Game.Enums.Color.White;
                                                                    items.Plus = 12;
                                                                    items.Bless = 7;
                                                                    items.Enchant = 245;
                                                                    items.SocketOne = Conquer_Online_Server.Game.Enums.Gem.SuperDragonGem;
                                                                    items.SocketTwo = Conquer_Online_Server.Game.Enums.Gem.SuperDragonGem;
                                                                    items.Durability = items.MaximDurability = Conquer_Online_Server.Database.ConquerItemInformation.BaseInformations[itemid].Durability = 20000; ;
                                                                    client.Inventory.Add(items, Conquer_Online_Server.Game.Enums.ItemUse.CreateAndAdd);
                                                                    client.Inventory.Remove(item, Conquer_Online_Server.Game.Enums.ItemUse.Remove);
                                                                }
                                                                if (client.Entity.Level >= 10)
                                                                {
                                                                    if (client.Inventory.Count < 32)
                                                                    {

                                                                        ConquerItem items = new ConquerItem(true);
                                                                        items.ID = 117309;//DreamEarrings
                                                                        items.Color = Conquer_Online_Server.Game.Enums.Color.White;
                                                                        items.Plus = 12;
                                                                        items.Bless = 7;
                                                                        items.Enchant = 245;
                                                                        items.SocketOne = Conquer_Online_Server.Game.Enums.Gem.SuperDragonGem;
                                                                        items.SocketTwo = Conquer_Online_Server.Game.Enums.Gem.SuperDragonGem;
                                                                        items.Durability = items.MaximDurability = Conquer_Online_Server.Database.ConquerItemInformation.BaseInformations[itemid].Durability = 20000; ;
                                                                        client.Inventory.Add(items, Conquer_Online_Server.Game.Enums.ItemUse.CreateAndAdd);
                                                                        client.Inventory.Remove(item, Conquer_Online_Server.Game.Enums.ItemUse.Remove);
                                                                    }
                                                                    if (client.Entity.Level >= 10)
                                                                    {
                                                                        if (client.Inventory.Count < 32)
                                                                        {

                                                                            ConquerItem items = new ConquerItem(true);
                                                                            items.ID = 203009;//RidingCrop
                                                                            items.Color = Conquer_Online_Server.Game.Enums.Color.White;
                                                                            items.Plus = 12;
                                                                            items.Durability = items.MaximDurability = Conquer_Online_Server.Database.ConquerItemInformation.BaseInformations[itemid].Durability = 20000; ;
                                                                            client.Inventory.Add(items, Conquer_Online_Server.Game.Enums.ItemUse.CreateAndAdd);
                                                                            client.Inventory.Remove(item, Conquer_Online_Server.Game.Enums.ItemUse.Remove);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }

                        }

                    }
                    break;
                #endregion
                #region StuffWarrior+12Pack
                case 8765437:
                    {
                        uint itemid = 201009;
                        itemid = 560439; //SpearOfWrath
                        itemid = 561439;//OccultWand
                        itemid = 510439;//VigorGlaive
                        itemid = 530439;//HawkPoleaxe
                        itemid = 580439; //FlameHalbert
                        itemid = 131309;//ImperiousArmor
                        itemid = 900309;//CelestialShield
                        itemid = 141309;//DragonHeadband
                        //itemid = 118309;//////?????
                        itemid = 120269;//FloridNecklace
                        itemid = 160249;//Blizzard
                        itemid = 150269;//CrimsonRing
                        itemid = 117309;//DreamEarrings
                        itemid = 201009; //HeavenFan
                        itemid = 202009; //StarTower
                        itemid = 203009;//RidingCrop
                        itemid = 300000;//Steed


                        if (client.Entity.Level >= 10)
                        {
                            if (client.Inventory.Count < 32)
                            {
                                client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                                ConquerItem _item = new ConquerItem(true);
                                _item.ID = 300000;
                                Database.ConquerItemInformation _iteminfos = new Database.ConquerItemInformation(_item.ID, 0);
                                _item.Durability = _item.MaximDurability = _iteminfos.BaseInformation.Durability;
                                _item.Plus = 12;
                                _item.Effect = Game.Enums.ItemEffect.Horse;
                                _item.SocketProgress = 255 | 150 << 16;
                                client.Inventory.Add(_item, Game.Enums.ItemUse.CreateAndAdd);
                            }


                            if (client.Entity.Level >= 10)
                            {
                                if (client.Inventory.Count < 32)
                                {

                                    ConquerItem items = new ConquerItem(true);
                                    items.ID = 201009;//HeavenFan
                                    items.Color = Conquer_Online_Server.Game.Enums.Color.White;
                                    items.Plus = 12;
                                    items.SocketOne = Conquer_Online_Server.Game.Enums.Gem.SuperThunderGem;
                                    items.SocketTwo = Conquer_Online_Server.Game.Enums.Gem.SuperThunderGem;


                                    items.Durability = items.MaximDurability = Conquer_Online_Server.Database.ConquerItemInformation.BaseInformations[itemid].Durability = 20000; ;
                                    client.Inventory.Add(items, Conquer_Online_Server.Game.Enums.ItemUse.CreateAndAdd);
                                    client.Inventory.Remove(item, Conquer_Online_Server.Game.Enums.ItemUse.Remove);
                                }
                                if (client.Entity.Level >= 10)
                                {
                                    if (client.Inventory.Count < 32)
                                    {

                                        ConquerItem items = new ConquerItem(true);
                                        items.ID = 202009;//StarTower
                                        items.Color = Conquer_Online_Server.Game.Enums.Color.White;
                                        items.Plus = 12;
                                        items.SocketOne = Conquer_Online_Server.Game.Enums.Gem.SuperThunderGem;
                                        items.SocketTwo = Conquer_Online_Server.Game.Enums.Gem.SuperThunderGem;
                                        items.Durability = items.MaximDurability = Conquer_Online_Server.Database.ConquerItemInformation.BaseInformations[itemid].Durability = 20000; ;
                                        client.Inventory.Add(items, Conquer_Online_Server.Game.Enums.ItemUse.CreateAndAdd);
                                        client.Inventory.Remove(item, Conquer_Online_Server.Game.Enums.ItemUse.Remove);
                                    }
                                    if (client.Entity.Level >= 10)
                                    {
                                        if (client.Inventory.Count < 32)
                                        {

                                            ConquerItem items = new ConquerItem(true);
                                            items.ID = 560439; //SpearOfWrath
                                            items.Color = Conquer_Online_Server.Game.Enums.Color.White;
                                            items.Plus = 12;
                                            items.Bless = 7;
                                            items.Enchant = 245;
                                            items.SocketOne = Conquer_Online_Server.Game.Enums.Gem.SuperDragonGem;
                                            items.SocketTwo = Conquer_Online_Server.Game.Enums.Gem.SuperDragonGem;
                                            items.Durability = items.MaximDurability = Conquer_Online_Server.Database.ConquerItemInformation.BaseInformations[itemid].Durability = 20000; ;
                                            client.Inventory.Add(items, Conquer_Online_Server.Game.Enums.ItemUse.CreateAndAdd);
                                            client.Inventory.Remove(item, Conquer_Online_Server.Game.Enums.ItemUse.Remove);
                                        }
                                        if (client.Entity.Level >= 10)
                                        {
                                            if (client.Inventory.Count < 32)
                                            {

                                                ConquerItem items = new ConquerItem(true);
                                                items.ID = 561439;//OccultWand
                                                items.Color = Conquer_Online_Server.Game.Enums.Color.White;
                                                items.Plus = 12;
                                                items.Bless = 7;
                                                items.Enchant = 245;
                                                items.SocketOne = Conquer_Online_Server.Game.Enums.Gem.SuperDragonGem;
                                                items.SocketTwo = Conquer_Online_Server.Game.Enums.Gem.SuperDragonGem;
                                                items.Durability = items.MaximDurability = Conquer_Online_Server.Database.ConquerItemInformation.BaseInformations[itemid].Durability = 20000; ;
                                                client.Inventory.Add(items, Conquer_Online_Server.Game.Enums.ItemUse.CreateAndAdd);
                                                client.Inventory.Remove(item, Conquer_Online_Server.Game.Enums.ItemUse.Remove);
                                            }
                                            if (client.Entity.Level >= 10)
                                            {
                                                if (client.Inventory.Count < 32)
                                                {

                                                    ConquerItem items = new ConquerItem(true);
                                                    items.ID = 510439;//VigorGlaive
                                                    items.Color = Conquer_Online_Server.Game.Enums.Color.White;
                                                    items.Plus = 12;
                                                    items.Bless = 7;
                                                    items.Enchant = 245;
                                                    items.SocketOne = Conquer_Online_Server.Game.Enums.Gem.SuperDragonGem;
                                                    items.SocketTwo = Conquer_Online_Server.Game.Enums.Gem.SuperDragonGem;
                                                    items.Durability = items.MaximDurability = Conquer_Online_Server.Database.ConquerItemInformation.BaseInformations[itemid].Durability = 20000; ;
                                                    client.Inventory.Add(items, Conquer_Online_Server.Game.Enums.ItemUse.CreateAndAdd);
                                                    client.Inventory.Remove(item, Conquer_Online_Server.Game.Enums.ItemUse.Remove);
                                                }
                                                if (client.Entity.Level >= 10)
                                                {
                                                    if (client.Inventory.Count < 32)
                                                    {

                                                        ConquerItem items = new ConquerItem(true);
                                                        items.ID = 530439;//HawkPoleaxe
                                                        items.Color = Conquer_Online_Server.Game.Enums.Color.White;
                                                        items.Plus = 12;
                                                        items.Bless = 7;
                                                        items.Enchant = 245;
                                                        items.SocketOne = Conquer_Online_Server.Game.Enums.Gem.SuperDragonGem;
                                                        items.SocketTwo = Conquer_Online_Server.Game.Enums.Gem.SuperDragonGem;
                                                        items.Durability = items.MaximDurability = Conquer_Online_Server.Database.ConquerItemInformation.BaseInformations[itemid].Durability = 20000; ;
                                                        client.Inventory.Add(items, Conquer_Online_Server.Game.Enums.ItemUse.CreateAndAdd);
                                                        client.Inventory.Remove(item, Conquer_Online_Server.Game.Enums.ItemUse.Remove);
                                                    }
                                                    if (client.Entity.Level >= 10)
                                                    {
                                                        if (client.Inventory.Count < 32)
                                                        {

                                                            ConquerItem items = new ConquerItem(true);
                                                            items.ID = 900309;//CelestialShield
                                                            items.Color = Conquer_Online_Server.Game.Enums.Color.White;
                                                            items.Plus = 12;
                                                            items.Bless = 7;
                                                            items.Enchant = 245;
                                                            items.SocketOne = Conquer_Online_Server.Game.Enums.Gem.SuperDragonGem;
                                                            items.SocketTwo = Conquer_Online_Server.Game.Enums.Gem.SuperDragonGem;
                                                            items.Durability = items.MaximDurability = Conquer_Online_Server.Database.ConquerItemInformation.BaseInformations[itemid].Durability = 20000; ;
                                                            client.Inventory.Add(items, Conquer_Online_Server.Game.Enums.ItemUse.CreateAndAdd);
                                                            client.Inventory.Remove(item, Conquer_Online_Server.Game.Enums.ItemUse.Remove);
                                                        }
                                                        if (client.Entity.Level >= 10)
                                                        {
                                                            if (client.Inventory.Count < 32)
                                                            {

                                                                ConquerItem items = new ConquerItem(true);
                                                                items.ID = 580439; //FlameHalbert
                                                                items.Color = Conquer_Online_Server.Game.Enums.Color.White;
                                                                items.Plus = 12;
                                                                items.Bless = 7;
                                                                items.Enchant = 245;
                                                                items.SocketOne = Conquer_Online_Server.Game.Enums.Gem.SuperDragonGem;
                                                                items.SocketTwo = Conquer_Online_Server.Game.Enums.Gem.SuperDragonGem;
                                                                items.Durability = items.MaximDurability = Conquer_Online_Server.Database.ConquerItemInformation.BaseInformations[itemid].Durability = 20000; ;
                                                                client.Inventory.Add(items, Conquer_Online_Server.Game.Enums.ItemUse.CreateAndAdd);
                                                                client.Inventory.Remove(item, Conquer_Online_Server.Game.Enums.ItemUse.Remove);
                                                            }
                                                            if (client.Entity.Level >= 10)
                                                            {
                                                                if (client.Inventory.Count < 32)
                                                                {

                                                                    ConquerItem items = new ConquerItem(true);
                                                                    items.ID = 131309;//ImperiousArmor
                                                                    items.Color = Conquer_Online_Server.Game.Enums.Color.White;
                                                                    items.Plus = 12;
                                                                    items.Bless = 7;
                                                                    items.Enchant = 245;
                                                                    items.SocketOne = Conquer_Online_Server.Game.Enums.Gem.SuperDragonGem;
                                                                    items.SocketTwo = Conquer_Online_Server.Game.Enums.Gem.SuperDragonGem;
                                                                    items.Durability = items.MaximDurability = Conquer_Online_Server.Database.ConquerItemInformation.BaseInformations[itemid].Durability = 20000; ;
                                                                    client.Inventory.Add(items, Conquer_Online_Server.Game.Enums.ItemUse.CreateAndAdd);
                                                                    client.Inventory.Remove(item, Conquer_Online_Server.Game.Enums.ItemUse.Remove);
                                                                }
                                                                if (client.Entity.Level >= 10)
                                                                {
                                                                    if (client.Inventory.Count < 32)
                                                                    {

                                                                        ConquerItem items = new ConquerItem(true);
                                                                        items.ID = 120269;//FloridNecklace
                                                                        items.Color = Conquer_Online_Server.Game.Enums.Color.White;
                                                                        items.Plus = 12;
                                                                        items.Bless = 7;
                                                                        items.Enchant = 245;
                                                                        items.SocketOne = Conquer_Online_Server.Game.Enums.Gem.SuperDragonGem;
                                                                        items.SocketTwo = Conquer_Online_Server.Game.Enums.Gem.SuperDragonGem;
                                                                        items.Durability = items.MaximDurability = Conquer_Online_Server.Database.ConquerItemInformation.BaseInformations[itemid].Durability = 20000; ;
                                                                        client.Inventory.Add(items, Conquer_Online_Server.Game.Enums.ItemUse.CreateAndAdd);
                                                                        client.Inventory.Remove(item, Conquer_Online_Server.Game.Enums.ItemUse.Remove);
                                                                    }
                                                                    if (client.Entity.Level >= 10)
                                                                    {
                                                                        if (client.Inventory.Count < 32)
                                                                        {

                                                                            ConquerItem items = new ConquerItem(true);
                                                                            items.ID = 141309;//DragonHeadband
                                                                            items.Color = Conquer_Online_Server.Game.Enums.Color.White;
                                                                            items.Plus = 12;
                                                                            items.Bless = 7;
                                                                            items.Enchant = 245;
                                                                            items.SocketOne = Conquer_Online_Server.Game.Enums.Gem.SuperDragonGem;
                                                                            items.SocketTwo = Conquer_Online_Server.Game.Enums.Gem.SuperDragonGem;
                                                                            items.Durability = items.MaximDurability = Conquer_Online_Server.Database.ConquerItemInformation.BaseInformations[itemid].Durability = 20000; ;
                                                                            client.Inventory.Add(items, Conquer_Online_Server.Game.Enums.ItemUse.CreateAndAdd);
                                                                            client.Inventory.Remove(item, Conquer_Online_Server.Game.Enums.ItemUse.Remove);
                                                                        }
                                                                        if (client.Entity.Level >= 10)
                                                                        {
                                                                            if (client.Inventory.Count < 32)
                                                                            {

                                                                                ConquerItem items = new ConquerItem(true);
                                                                                items.ID = 160249;//Blizzard
                                                                                items.Color = Conquer_Online_Server.Game.Enums.Color.White;
                                                                                items.Plus = 12;
                                                                                items.Bless = 7;
                                                                                items.Enchant = 245;
                                                                                items.SocketOne = Conquer_Online_Server.Game.Enums.Gem.SuperDragonGem;
                                                                                items.SocketTwo = Conquer_Online_Server.Game.Enums.Gem.SuperDragonGem;
                                                                                items.Durability = items.MaximDurability = Conquer_Online_Server.Database.ConquerItemInformation.BaseInformations[itemid].Durability = 20000; ;
                                                                                client.Inventory.Add(items, Conquer_Online_Server.Game.Enums.ItemUse.CreateAndAdd);
                                                                                client.Inventory.Remove(item, Conquer_Online_Server.Game.Enums.ItemUse.Remove);
                                                                            }
                                                                            if (client.Entity.Level >= 10)
                                                                            {
                                                                                if (client.Inventory.Count < 32)
                                                                                {

                                                                                    ConquerItem items = new ConquerItem(true);
                                                                                    items.ID = 150269;//CrimsonRing
                                                                                    items.Color = Conquer_Online_Server.Game.Enums.Color.White;
                                                                                    items.Plus = 12;
                                                                                    items.Bless = 7;
                                                                                    items.Enchant = 245;
                                                                                    items.SocketOne = Conquer_Online_Server.Game.Enums.Gem.SuperDragonGem;
                                                                                    items.SocketTwo = Conquer_Online_Server.Game.Enums.Gem.SuperDragonGem;
                                                                                    items.Durability = items.MaximDurability = Conquer_Online_Server.Database.ConquerItemInformation.BaseInformations[itemid].Durability = 20000; ;
                                                                                    client.Inventory.Add(items, Conquer_Online_Server.Game.Enums.ItemUse.CreateAndAdd);
                                                                                    client.Inventory.Remove(item, Conquer_Online_Server.Game.Enums.ItemUse.Remove);
                                                                                }
                                                                                if (client.Entity.Level >= 10)
                                                                                {
                                                                                    if (client.Inventory.Count < 32)
                                                                                    {

                                                                                        ConquerItem items = new ConquerItem(true);
                                                                                        items.ID = 117309;//DreamEarrings
                                                                                        items.Color = Conquer_Online_Server.Game.Enums.Color.White;
                                                                                        items.Plus = 12;
                                                                                        items.Bless = 7;
                                                                                        items.Enchant = 245;
                                                                                        items.SocketOne = Conquer_Online_Server.Game.Enums.Gem.SuperDragonGem;
                                                                                        items.SocketTwo = Conquer_Online_Server.Game.Enums.Gem.SuperDragonGem;
                                                                                        items.Durability = items.MaximDurability = Conquer_Online_Server.Database.ConquerItemInformation.BaseInformations[itemid].Durability = 20000; ;
                                                                                        client.Inventory.Add(items, Conquer_Online_Server.Game.Enums.ItemUse.CreateAndAdd);
                                                                                        client.Inventory.Remove(item, Conquer_Online_Server.Game.Enums.ItemUse.Remove);
                                                                                    }
                                                                                    if (client.Entity.Level >= 10)
                                                                                    {
                                                                                        if (client.Inventory.Count < 32)
                                                                                        {

                                                                                            ConquerItem items = new ConquerItem(true);
                                                                                            items.ID = 203009;//RidingCrop
                                                                                            items.Color = Conquer_Online_Server.Game.Enums.Color.White;
                                                                                            items.Plus = 12;
                                                                                            items.Durability = items.MaximDurability = Conquer_Online_Server.Database.ConquerItemInformation.BaseInformations[itemid].Durability = 20000; ;
                                                                                            client.Inventory.Add(items, Conquer_Online_Server.Game.Enums.ItemUse.CreateAndAdd);
                                                                                            client.Inventory.Remove(item, Conquer_Online_Server.Game.Enums.ItemUse.Remove);
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }

                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }

                        }

                    }
                    break;
                #endregion
                #region StuffTaoist+12Pack
                case 8765438:
                    {
                        uint itemid = 201009;
                        itemid = 421439; //SupremeSword
                        itemid = 134309;//EternalRobe
                        itemid = 114309;//DistinctCap
                        itemid = 152279;//WyvernBracelet
                        itemid = 121269;//NiftyBag
                        itemid = 120269;//FloridNecklace
                        itemid = 160249;//Blizzard
                        itemid = 150269;//CrimsonRing
                        itemid = 117309;//DreamEarrings
                        itemid = 201009; //HeavenFan
                        itemid = 202009; //StarTower
                        itemid = 203009;//RidingCrop
                        itemid = 300000;//Steed


                        if (client.Entity.Level >= 10)
                        {
                            if (client.Inventory.Count < 32)
                            {
                                client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                                ConquerItem _item = new ConquerItem(true);
                                _item.ID = 300000;
                                Database.ConquerItemInformation _iteminfos = new Database.ConquerItemInformation(_item.ID, 0);
                                _item.Durability = _item.MaximDurability = _iteminfos.BaseInformation.Durability;
                                _item.Plus = 12;
                                _item.Effect = Game.Enums.ItemEffect.Horse;
                                _item.SocketProgress = 255 | 150 << 16;
                                client.Inventory.Add(_item, Game.Enums.ItemUse.CreateAndAdd);
                            }


                            if (client.Entity.Level >= 10)
                            {
                                if (client.Inventory.Count < 32)
                                {

                                    ConquerItem items = new ConquerItem(true);
                                    items.ID = 201009;//HeavenFan
                                    items.Color = Conquer_Online_Server.Game.Enums.Color.White;
                                    items.Plus = 12;
                                    items.SocketOne = Conquer_Online_Server.Game.Enums.Gem.SuperThunderGem;
                                    items.SocketTwo = Conquer_Online_Server.Game.Enums.Gem.SuperThunderGem;


                                    items.Durability = items.MaximDurability = Conquer_Online_Server.Database.ConquerItemInformation.BaseInformations[itemid].Durability = 20000; ;
                                    client.Inventory.Add(items, Conquer_Online_Server.Game.Enums.ItemUse.CreateAndAdd);
                                    client.Inventory.Remove(item, Conquer_Online_Server.Game.Enums.ItemUse.Remove);
                                }
                                if (client.Entity.Level >= 10)
                                {
                                    if (client.Inventory.Count < 32)
                                    {

                                        ConquerItem items = new ConquerItem(true);
                                        items.ID = 202009;//StarTower
                                        items.Color = Conquer_Online_Server.Game.Enums.Color.White;
                                        items.Plus = 12;
                                        items.SocketOne = Conquer_Online_Server.Game.Enums.Gem.SuperThunderGem;
                                        items.SocketTwo = Conquer_Online_Server.Game.Enums.Gem.SuperThunderGem;
                                        items.Durability = items.MaximDurability = Conquer_Online_Server.Database.ConquerItemInformation.BaseInformations[itemid].Durability = 20000; ;
                                        client.Inventory.Add(items, Conquer_Online_Server.Game.Enums.ItemUse.CreateAndAdd);
                                        client.Inventory.Remove(item, Conquer_Online_Server.Game.Enums.ItemUse.Remove);
                                    }
                                    if (client.Entity.Level >= 10)
                                    {
                                        if (client.Inventory.Count < 32)
                                        {

                                            ConquerItem items = new ConquerItem(true);
                                            items.ID = 421439; //SupremeSword
                                            items.Color = Conquer_Online_Server.Game.Enums.Color.White;
                                            items.Plus = 12;
                                            items.Bless = 7;
                                            items.Enchant = 245;
                                            items.SocketOne = Conquer_Online_Server.Game.Enums.Gem.SuperDragonGem;
                                            items.SocketTwo = Conquer_Online_Server.Game.Enums.Gem.SuperDragonGem;
                                            items.Durability = items.MaximDurability = Conquer_Online_Server.Database.ConquerItemInformation.BaseInformations[itemid].Durability = 20000; ;
                                            client.Inventory.Add(items, Conquer_Online_Server.Game.Enums.ItemUse.CreateAndAdd);
                                            client.Inventory.Remove(item, Conquer_Online_Server.Game.Enums.ItemUse.Remove);
                                        }
                                        if (client.Entity.Level >= 10)
                                        {
                                            if (client.Inventory.Count < 32)
                                            {

                                                ConquerItem items = new ConquerItem(true);
                                                items.ID = 134309;//EternalRobe
                                                items.Color = Conquer_Online_Server.Game.Enums.Color.White;
                                                items.Plus = 12;
                                                items.Bless = 7;
                                                items.Enchant = 245;
                                                items.SocketOne = Conquer_Online_Server.Game.Enums.Gem.SuperDragonGem;
                                                items.SocketTwo = Conquer_Online_Server.Game.Enums.Gem.SuperDragonGem;
                                                items.Durability = items.MaximDurability = Conquer_Online_Server.Database.ConquerItemInformation.BaseInformations[itemid].Durability = 20000; ;
                                                client.Inventory.Add(items, Conquer_Online_Server.Game.Enums.ItemUse.CreateAndAdd);
                                                client.Inventory.Remove(item, Conquer_Online_Server.Game.Enums.ItemUse.Remove);
                                            }
                                            if (client.Entity.Level >= 10)
                                            {
                                                if (client.Inventory.Count < 32)
                                                {

                                                    ConquerItem items = new ConquerItem(true);
                                                    items.ID = 114309;//DistinctCap
                                                    items.Color = Conquer_Online_Server.Game.Enums.Color.White;
                                                    items.Plus = 12;
                                                    items.Bless = 7;
                                                    items.Enchant = 245;
                                                    items.SocketOne = Conquer_Online_Server.Game.Enums.Gem.SuperDragonGem;
                                                    items.SocketTwo = Conquer_Online_Server.Game.Enums.Gem.SuperDragonGem;
                                                    items.Durability = items.MaximDurability = Conquer_Online_Server.Database.ConquerItemInformation.BaseInformations[itemid].Durability = 20000; ;
                                                    client.Inventory.Add(items, Conquer_Online_Server.Game.Enums.ItemUse.CreateAndAdd);
                                                    client.Inventory.Remove(item, Conquer_Online_Server.Game.Enums.ItemUse.Remove);
                                                }
                                                if (client.Entity.Level >= 10)
                                                {
                                                    if (client.Inventory.Count < 32)
                                                    {

                                                        ConquerItem items = new ConquerItem(true);
                                                        items.ID = 152279;//WyvernBracelet
                                                        items.Color = Conquer_Online_Server.Game.Enums.Color.White;
                                                        items.Plus = 12;
                                                        items.Bless = 7;
                                                        items.Enchant = 245;
                                                        items.SocketOne = Conquer_Online_Server.Game.Enums.Gem.SuperDragonGem;
                                                        items.SocketTwo = Conquer_Online_Server.Game.Enums.Gem.SuperDragonGem;
                                                        items.Durability = items.MaximDurability = Conquer_Online_Server.Database.ConquerItemInformation.BaseInformations[itemid].Durability = 20000; ;
                                                        client.Inventory.Add(items, Conquer_Online_Server.Game.Enums.ItemUse.CreateAndAdd);
                                                        client.Inventory.Remove(item, Conquer_Online_Server.Game.Enums.ItemUse.Remove);
                                                    }
                                                    if (client.Entity.Level >= 10)
                                                    {
                                                        if (client.Inventory.Count < 32)
                                                        {

                                                            ConquerItem items = new ConquerItem(true);
                                                            items.ID = 120269;//FloridNecklace
                                                            items.Color = Conquer_Online_Server.Game.Enums.Color.White;
                                                            items.Plus = 12;
                                                            items.Bless = 7;
                                                            items.Enchant = 245;
                                                            items.SocketOne = Conquer_Online_Server.Game.Enums.Gem.SuperDragonGem;
                                                            items.SocketTwo = Conquer_Online_Server.Game.Enums.Gem.SuperDragonGem;
                                                            items.Durability = items.MaximDurability = Conquer_Online_Server.Database.ConquerItemInformation.BaseInformations[itemid].Durability = 20000; ;
                                                            client.Inventory.Add(items, Conquer_Online_Server.Game.Enums.ItemUse.CreateAndAdd);
                                                            client.Inventory.Remove(item, Conquer_Online_Server.Game.Enums.ItemUse.Remove);
                                                        }
                                                        if (client.Entity.Level >= 10)
                                                        {
                                                            if (client.Inventory.Count < 32)
                                                            {

                                                                ConquerItem items = new ConquerItem(true);
                                                                items.ID = 160249;//Blizzard
                                                                items.Color = Conquer_Online_Server.Game.Enums.Color.White;
                                                                items.Plus = 12;
                                                                items.Bless = 7;
                                                                items.Enchant = 245;
                                                                items.SocketOne = Conquer_Online_Server.Game.Enums.Gem.SuperDragonGem;
                                                                items.SocketTwo = Conquer_Online_Server.Game.Enums.Gem.SuperDragonGem;
                                                                items.Durability = items.MaximDurability = Conquer_Online_Server.Database.ConquerItemInformation.BaseInformations[itemid].Durability = 20000; ;
                                                                client.Inventory.Add(items, Conquer_Online_Server.Game.Enums.ItemUse.CreateAndAdd);
                                                                client.Inventory.Remove(item, Conquer_Online_Server.Game.Enums.ItemUse.Remove);
                                                            }
                                                            if (client.Entity.Level >= 10)
                                                            {
                                                                if (client.Inventory.Count < 32)
                                                                {

                                                                    ConquerItem items = new ConquerItem(true);
                                                                    items.ID = 150269;//CrimsonRing
                                                                    items.Color = Conquer_Online_Server.Game.Enums.Color.White;
                                                                    items.Plus = 12;
                                                                    items.Bless = 7;
                                                                    items.Enchant = 245;
                                                                    items.SocketOne = Conquer_Online_Server.Game.Enums.Gem.SuperDragonGem;
                                                                    items.SocketTwo = Conquer_Online_Server.Game.Enums.Gem.SuperDragonGem;
                                                                    items.Durability = items.MaximDurability = Conquer_Online_Server.Database.ConquerItemInformation.BaseInformations[itemid].Durability = 20000; ;
                                                                    client.Inventory.Add(items, Conquer_Online_Server.Game.Enums.ItemUse.CreateAndAdd);
                                                                    client.Inventory.Remove(item, Conquer_Online_Server.Game.Enums.ItemUse.Remove);
                                                                }
                                                                if (client.Entity.Level >= 10)
                                                                {
                                                                    if (client.Inventory.Count < 32)
                                                                    {

                                                                        ConquerItem items = new ConquerItem(true);
                                                                        items.ID = 117309;//DreamEarrings
                                                                        items.Color = Conquer_Online_Server.Game.Enums.Color.White;
                                                                        items.Plus = 12;
                                                                        items.Bless = 7;
                                                                        items.Enchant = 245;
                                                                        items.SocketOne = Conquer_Online_Server.Game.Enums.Gem.SuperDragonGem;
                                                                        items.SocketTwo = Conquer_Online_Server.Game.Enums.Gem.SuperDragonGem;
                                                                        items.Durability = items.MaximDurability = Conquer_Online_Server.Database.ConquerItemInformation.BaseInformations[itemid].Durability = 20000; ;
                                                                        client.Inventory.Add(items, Conquer_Online_Server.Game.Enums.ItemUse.CreateAndAdd);
                                                                        client.Inventory.Remove(item, Conquer_Online_Server.Game.Enums.ItemUse.Remove);
                                                                    }
                                                                    if (client.Entity.Level >= 10)
                                                                    {
                                                                        if (client.Inventory.Count < 32)
                                                                        {

                                                                            ConquerItem items = new ConquerItem(true);
                                                                            items.ID = 203009;//RidingCrop
                                                                            items.Color = Conquer_Online_Server.Game.Enums.Color.White;
                                                                            items.Plus = 12;
                                                                            items.Durability = items.MaximDurability = Conquer_Online_Server.Database.ConquerItemInformation.BaseInformations[itemid].Durability = 20000; ;
                                                                            client.Inventory.Add(items, Conquer_Online_Server.Game.Enums.ItemUse.CreateAndAdd);
                                                                            client.Inventory.Remove(item, Conquer_Online_Server.Game.Enums.ItemUse.Remove);

                                                                        }
                                                                        if (client.Entity.Level >= 10)
                                                                        {
                                                                            if (client.Inventory.Count < 32)
                                                                            {

                                                                                ConquerItem items = new ConquerItem(true);
                                                                                items.ID = 121269;//NiftyBag
                                                                                items.Color = Conquer_Online_Server.Game.Enums.Color.White;
                                                                                items.Plus = 12;
                                                                                items.Bless = 7;
                                                                                items.Enchant = 245;
                                                                                items.SocketOne = Conquer_Online_Server.Game.Enums.Gem.SuperDragonGem;
                                                                                items.SocketTwo = Conquer_Online_Server.Game.Enums.Gem.SuperDragonGem;
                                                                                items.Durability = items.MaximDurability = Conquer_Online_Server.Database.ConquerItemInformation.BaseInformations[itemid].Durability = 20000; ;
                                                                                client.Inventory.Add(items, Conquer_Online_Server.Game.Enums.ItemUse.CreateAndAdd);
                                                                                client.Inventory.Remove(item, Conquer_Online_Server.Game.Enums.ItemUse.Remove);
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }

                        }

                    }
                    break;
                #endregion
                #region StuffPirate+12Pack
                case 8765439:
                    {
                        uint itemid = 201009;
                        itemid = 612439; //LordPistol
                        itemid = 611439;//CaptainRapier
                        itemid = 144309;//DominatorHat
                        itemid = 139309;//DarkDragonCoat
                        itemid = 120269;//FloridNecklace
                        itemid = 160249;//Blizzard
                        itemid = 150269;//CrimsonRing
                        itemid = 117309;//DreamEarrings
                        itemid = 201009; //HeavenFan
                        itemid = 202009; //StarTower
                        itemid = 203009;//RidingCrop
                        itemid = 300000;//Steed


                        if (client.Entity.Level >= 10)
                        {
                            if (client.Inventory.Count < 32)
                            {
                                client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                                ConquerItem _item = new ConquerItem(true);
                                _item.ID = 300000;
                                Database.ConquerItemInformation _iteminfos = new Database.ConquerItemInformation(_item.ID, 0);
                                _item.Durability = _item.MaximDurability = _iteminfos.BaseInformation.Durability;
                                _item.Plus = 12;
                                _item.Effect = Game.Enums.ItemEffect.Horse;
                                _item.SocketProgress = 255 | 150 << 16;
                                client.Inventory.Add(_item, Game.Enums.ItemUse.CreateAndAdd);
                            }
                            if (client.Entity.Level >= 10)
                            {
                                if (client.Inventory.Count < 32)
                                {

                                    ConquerItem items = new ConquerItem(true);
                                    items.ID = 201009;//HeavenFan
                                    items.Color = Conquer_Online_Server.Game.Enums.Color.White;
                                    items.Plus = 12;
                                    items.SocketOne = Conquer_Online_Server.Game.Enums.Gem.SuperThunderGem;
                                    items.SocketTwo = Conquer_Online_Server.Game.Enums.Gem.SuperThunderGem;


                                    items.Durability = items.MaximDurability = Conquer_Online_Server.Database.ConquerItemInformation.BaseInformations[itemid].Durability = 20000; ;
                                    client.Inventory.Add(items, Conquer_Online_Server.Game.Enums.ItemUse.CreateAndAdd);
                                    client.Inventory.Remove(item, Conquer_Online_Server.Game.Enums.ItemUse.Remove);
                                }
                                if (client.Entity.Level >= 10)
                                {
                                    if (client.Inventory.Count < 32)
                                    {

                                        ConquerItem items = new ConquerItem(true);
                                        items.ID = 202009;//StarTower
                                        items.Color = Conquer_Online_Server.Game.Enums.Color.White;
                                        items.Plus = 12;
                                        items.SocketOne = Conquer_Online_Server.Game.Enums.Gem.SuperThunderGem;
                                        items.SocketTwo = Conquer_Online_Server.Game.Enums.Gem.SuperThunderGem;
                                        items.Durability = items.MaximDurability = Conquer_Online_Server.Database.ConquerItemInformation.BaseInformations[itemid].Durability = 20000; ;
                                        client.Inventory.Add(items, Conquer_Online_Server.Game.Enums.ItemUse.CreateAndAdd);
                                        client.Inventory.Remove(item, Conquer_Online_Server.Game.Enums.ItemUse.Remove);
                                    }
                                    if (client.Entity.Level >= 10)
                                    {
                                        if (client.Inventory.Count < 32)
                                        {

                                            ConquerItem items = new ConquerItem(true);
                                            items.ID = 612439; //LordPistol
                                            items.Color = Conquer_Online_Server.Game.Enums.Color.White;
                                            items.Plus = 12;
                                            items.Bless = 7;
                                            items.Enchant = 245;
                                            items.SocketOne = Conquer_Online_Server.Game.Enums.Gem.SuperDragonGem;
                                            items.SocketTwo = Conquer_Online_Server.Game.Enums.Gem.SuperDragonGem;
                                            items.Durability = items.MaximDurability = Conquer_Online_Server.Database.ConquerItemInformation.BaseInformations[itemid].Durability = 20000; ;
                                            client.Inventory.Add(items, Conquer_Online_Server.Game.Enums.ItemUse.CreateAndAdd);
                                            client.Inventory.Remove(item, Conquer_Online_Server.Game.Enums.ItemUse.Remove);
                                        }
                                        if (client.Entity.Level >= 10)
                                        {
                                            if (client.Inventory.Count < 32)
                                            {

                                                ConquerItem items = new ConquerItem(true);
                                                items.ID = 611439;//CaptainRapier
                                                items.Color = Conquer_Online_Server.Game.Enums.Color.White;
                                                items.Plus = 12;
                                                items.Bless = 7;
                                                items.Enchant = 245;
                                                items.SocketOne = Conquer_Online_Server.Game.Enums.Gem.SuperDragonGem;
                                                items.SocketTwo = Conquer_Online_Server.Game.Enums.Gem.SuperDragonGem;
                                                items.Durability = items.MaximDurability = Conquer_Online_Server.Database.ConquerItemInformation.BaseInformations[itemid].Durability = 20000; ;
                                                client.Inventory.Add(items, Conquer_Online_Server.Game.Enums.ItemUse.CreateAndAdd);
                                                client.Inventory.Remove(item, Conquer_Online_Server.Game.Enums.ItemUse.Remove);
                                            }
                                            if (client.Entity.Level >= 10)
                                            {
                                                if (client.Inventory.Count < 32)
                                                {

                                                    ConquerItem items = new ConquerItem(true);
                                                    items.ID = 144309;//DominatorHat
                                                    items.Color = Conquer_Online_Server.Game.Enums.Color.White;
                                                    items.Plus = 12;
                                                    items.Bless = 7;
                                                    items.Enchant = 245;
                                                    items.SocketOne = Conquer_Online_Server.Game.Enums.Gem.SuperDragonGem;
                                                    items.SocketTwo = Conquer_Online_Server.Game.Enums.Gem.SuperDragonGem;
                                                    items.Durability = items.MaximDurability = Conquer_Online_Server.Database.ConquerItemInformation.BaseInformations[itemid].Durability = 20000; ;
                                                    client.Inventory.Add(items, Conquer_Online_Server.Game.Enums.ItemUse.CreateAndAdd);
                                                    client.Inventory.Remove(item, Conquer_Online_Server.Game.Enums.ItemUse.Remove);
                                                }
                                                if (client.Entity.Level >= 10)
                                                {
                                                    if (client.Inventory.Count < 32)
                                                    {

                                                        ConquerItem items = new ConquerItem(true);
                                                        items.ID = 139309;//DarkDragonCoat
                                                        items.Color = Conquer_Online_Server.Game.Enums.Color.White;
                                                        items.Plus = 12;
                                                        items.Bless = 7;
                                                        items.Enchant = 245;
                                                        items.SocketOne = Conquer_Online_Server.Game.Enums.Gem.SuperDragonGem;
                                                        items.SocketTwo = Conquer_Online_Server.Game.Enums.Gem.SuperDragonGem;
                                                        items.Durability = items.MaximDurability = Conquer_Online_Server.Database.ConquerItemInformation.BaseInformations[itemid].Durability = 20000; ;
                                                        client.Inventory.Add(items, Conquer_Online_Server.Game.Enums.ItemUse.CreateAndAdd);
                                                        client.Inventory.Remove(item, Conquer_Online_Server.Game.Enums.ItemUse.Remove);
                                                    }

                                                    if (client.Entity.Level >= 10)
                                                    {
                                                        if (client.Inventory.Count < 32)
                                                        {

                                                            ConquerItem items = new ConquerItem(true);
                                                            items.ID = 120269;//FloridNecklace
                                                            items.Color = Conquer_Online_Server.Game.Enums.Color.White;
                                                            items.Plus = 12;
                                                            items.Bless = 7;
                                                            items.Enchant = 245;
                                                            items.SocketOne = Conquer_Online_Server.Game.Enums.Gem.SuperDragonGem;
                                                            items.SocketTwo = Conquer_Online_Server.Game.Enums.Gem.SuperDragonGem;
                                                            items.Durability = items.MaximDurability = Conquer_Online_Server.Database.ConquerItemInformation.BaseInformations[itemid].Durability = 20000; ;
                                                            client.Inventory.Add(items, Conquer_Online_Server.Game.Enums.ItemUse.CreateAndAdd);
                                                            client.Inventory.Remove(item, Conquer_Online_Server.Game.Enums.ItemUse.Remove);
                                                        }
                                                        if (client.Entity.Level >= 10)
                                                        {
                                                            if (client.Inventory.Count < 32)
                                                            {

                                                                ConquerItem items = new ConquerItem(true);
                                                                items.ID = 160249;//Blizzard
                                                                items.Color = Conquer_Online_Server.Game.Enums.Color.White;
                                                                items.Plus = 12;
                                                                items.Bless = 7;
                                                                items.Enchant = 245;
                                                                items.SocketOne = Conquer_Online_Server.Game.Enums.Gem.SuperDragonGem;
                                                                items.SocketTwo = Conquer_Online_Server.Game.Enums.Gem.SuperDragonGem;
                                                                items.Durability = items.MaximDurability = Conquer_Online_Server.Database.ConquerItemInformation.BaseInformations[itemid].Durability = 20000; ;
                                                                client.Inventory.Add(items, Conquer_Online_Server.Game.Enums.ItemUse.CreateAndAdd);
                                                                client.Inventory.Remove(item, Conquer_Online_Server.Game.Enums.ItemUse.Remove);
                                                            }
                                                            if (client.Entity.Level >= 10)
                                                            {
                                                                if (client.Inventory.Count < 32)
                                                                {

                                                                    ConquerItem items = new ConquerItem(true);
                                                                    items.ID = 150269;//CrimsonRing
                                                                    items.Color = Conquer_Online_Server.Game.Enums.Color.White;
                                                                    items.Plus = 12;
                                                                    items.Bless = 7;
                                                                    items.Enchant = 245;
                                                                    items.SocketOne = Conquer_Online_Server.Game.Enums.Gem.SuperDragonGem;
                                                                    items.SocketTwo = Conquer_Online_Server.Game.Enums.Gem.SuperDragonGem;
                                                                    items.Durability = items.MaximDurability = Conquer_Online_Server.Database.ConquerItemInformation.BaseInformations[itemid].Durability = 20000; ;
                                                                    client.Inventory.Add(items, Conquer_Online_Server.Game.Enums.ItemUse.CreateAndAdd);
                                                                    client.Inventory.Remove(item, Conquer_Online_Server.Game.Enums.ItemUse.Remove);
                                                                }
                                                                if (client.Entity.Level >= 10)
                                                                {
                                                                    if (client.Inventory.Count < 32)
                                                                    {

                                                                        ConquerItem items = new ConquerItem(true);
                                                                        items.ID = 117309;//DreamEarrings
                                                                        items.Color = Conquer_Online_Server.Game.Enums.Color.White;
                                                                        items.Plus = 12;
                                                                        items.Bless = 7;
                                                                        items.Enchant = 245;
                                                                        items.SocketOne = Conquer_Online_Server.Game.Enums.Gem.SuperDragonGem;
                                                                        items.SocketTwo = Conquer_Online_Server.Game.Enums.Gem.SuperDragonGem;
                                                                        items.Durability = items.MaximDurability = Conquer_Online_Server.Database.ConquerItemInformation.BaseInformations[itemid].Durability = 20000; ;
                                                                        client.Inventory.Add(items, Conquer_Online_Server.Game.Enums.ItemUse.CreateAndAdd);
                                                                        client.Inventory.Remove(item, Conquer_Online_Server.Game.Enums.ItemUse.Remove);
                                                                    }
                                                                    if (client.Entity.Level >= 10)
                                                                    {
                                                                        if (client.Inventory.Count < 32)
                                                                        {

                                                                            ConquerItem items = new ConquerItem(true);
                                                                            items.ID = 203009;//RidingCrop
                                                                            items.Color = Conquer_Online_Server.Game.Enums.Color.White;
                                                                            items.Plus = 12;
                                                                            items.Durability = items.MaximDurability = Conquer_Online_Server.Database.ConquerItemInformation.BaseInformations[itemid].Durability = 20000; ;
                                                                            client.Inventory.Add(items, Conquer_Online_Server.Game.Enums.ItemUse.CreateAndAdd);
                                                                            client.Inventory.Remove(item, Conquer_Online_Server.Game.Enums.ItemUse.Remove);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }

                        }

                    }
                    break;
                #endregion
                #region StuffLeeLong+12 Pack-By Bahaa
                case 8765440:
                    {
                        uint itemid = 201009;
                        itemid = 148309; //Head~lee~longa
                        itemid = 617439;//SkyNunchaku
                        itemid = 617439;//SkyNunchaku
                        itemid = 138309;//CombatSuit(Lv.140)
                        itemid = 148140;//LegendHood
                        itemid = 120269;//FloridNecklace
                        itemid = 160249;//Blizzard
                        itemid = 150269;//CrimsonRing
                        itemid = 148309;//Head~lee~longa
                        itemid = 201009; //HeavenFan
                        itemid = 202009; //StarTower
                        itemid = 203009;//RidingCrop
                        itemid = 300000;//Steed


                        if (client.Entity.Level >= 10)
                        {
                            if (client.Inventory.Count < 32)
                            {
                                client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                                ConquerItem _item = new ConquerItem(true);
                                _item.ID = 300000;//Steed
                                Database.ConquerItemInformation _iteminfos = new Database.ConquerItemInformation(_item.ID, 0);
                                _item.Durability = _item.MaximDurability = _iteminfos.BaseInformation.Durability;
                                _item.Plus = 12;
                                _item.Effect = Game.Enums.ItemEffect.Horse;
                                _item.SocketProgress = 255 | 150 << 16;
                                client.Inventory.Add(_item, Game.Enums.ItemUse.CreateAndAdd);
                            }

                            if (client.Entity.Level >= 10)
                            {
                                if (client.Inventory.Count < 32)
                                {

                                    ConquerItem items = new ConquerItem(true);
                                    items.ID = 201009;//HeavenFan
                                    items.Color = Conquer_Online_Server.Game.Enums.Color.White;
                                    items.Plus = 12;
                                    items.SocketOne = Conquer_Online_Server.Game.Enums.Gem.SuperThunderGem;
                                    items.SocketTwo = Conquer_Online_Server.Game.Enums.Gem.SuperThunderGem;
                                    items.MaximDurability = 20000;
                                    items.Durability = 20000;
                                    client.Inventory.Add(items, Conquer_Online_Server.Game.Enums.ItemUse.CreateAndAdd);
                                    client.Inventory.Remove(item, Conquer_Online_Server.Game.Enums.ItemUse.Remove);
                                }
                                if (client.Entity.Level >= 10)
                                {
                                    if (client.Inventory.Count < 32)
                                    {

                                        ConquerItem items = new ConquerItem(true);
                                        items.ID = 202009;//StarTower
                                        items.Color = Conquer_Online_Server.Game.Enums.Color.White;
                                        items.Plus = 12;
                                        items.MaximDurability = 20000;
                                        items.Durability = 20000;
                                        items.SocketOne = Conquer_Online_Server.Game.Enums.Gem.SuperGloryGem;
                                        items.SocketTwo = Conquer_Online_Server.Game.Enums.Gem.SuperGloryGem;
                                        client.Inventory.Add(items, Conquer_Online_Server.Game.Enums.ItemUse.CreateAndAdd);
                                        client.Inventory.Remove(item, Conquer_Online_Server.Game.Enums.ItemUse.Remove);
                                    }
                                    if (client.Entity.Level >= 10)
                                    {
                                        if (client.Inventory.Count < 32)
                                        {

                                            ConquerItem items = new ConquerItem(true);
                                            items.ID = 617439;//SkyNunchaku
                                            items.Color = Conquer_Online_Server.Game.Enums.Color.White;
                                            items.Plus = 12;
                                            items.Bless = 7;
                                            items.Enchant = 255;
                                            items.MaximDurability = 20000;
                                            items.Durability = 20000;
                                            items.SocketOne = Conquer_Online_Server.Game.Enums.Gem.SuperDragonGem;
                                            items.SocketTwo = Conquer_Online_Server.Game.Enums.Gem.SuperDragonGem;
                                            client.Inventory.Add(items, Conquer_Online_Server.Game.Enums.ItemUse.CreateAndAdd);
                                            client.Inventory.Remove(item, Conquer_Online_Server.Game.Enums.ItemUse.Remove);
                                        }
                                        if (client.Entity.Level >= 10)
                                        {
                                            if (client.Inventory.Count < 32)
                                            {

                                                ConquerItem items = new ConquerItem(true);
                                                items.ID = 148140;//LegendHood
                                                items.Color = Conquer_Online_Server.Game.Enums.Color.White;
                                                items.Plus = 12;
                                                items.Bless = 7;
                                                items.Enchant = 255;
                                                items.MaximDurability = 20000;
                                                items.Durability = 20000;
                                                items.SocketOne = Conquer_Online_Server.Game.Enums.Gem.SuperDragonGem;
                                                items.SocketTwo = Conquer_Online_Server.Game.Enums.Gem.SuperDragonGem;
                                                client.Inventory.Add(items, Conquer_Online_Server.Game.Enums.ItemUse.CreateAndAdd);
                                                client.Inventory.Remove(item, Conquer_Online_Server.Game.Enums.ItemUse.Remove);
                                            }
                                            if (client.Entity.Level >= 10)
                                            {
                                                if (client.Inventory.Count < 32)
                                                {

                                                    ConquerItem items = new ConquerItem(true);
                                                    items.ID = 617439;//SkyNunchaku
                                                    items.Color = Conquer_Online_Server.Game.Enums.Color.White;
                                                    items.Plus = 12;
                                                    items.Bless = 7;
                                                    items.MaximDurability = 20000;
                                                    items.Durability = 20000;
                                                    items.Enchant = 255;
                                                    items.SocketOne = Conquer_Online_Server.Game.Enums.Gem.SuperDragonGem;
                                                    items.SocketTwo = Conquer_Online_Server.Game.Enums.Gem.SuperDragonGem;
                                                    client.Inventory.Add(items, Conquer_Online_Server.Game.Enums.ItemUse.CreateAndAdd);
                                                    client.Inventory.Remove(item, Conquer_Online_Server.Game.Enums.ItemUse.Remove);
                                                }
                                                if (client.Entity.Level >= 10)
                                                {
                                                    if (client.Inventory.Count < 32)
                                                    {

                                                        ConquerItem items = new ConquerItem(true);
                                                        items.ID = 138309;//CombatSuit(Lv.140)
                                                        items.Color = Conquer_Online_Server.Game.Enums.Color.White;
                                                        items.Plus = 12;
                                                        items.Bless = 7;
                                                        items.MaximDurability = 20000;
                                                        items.Durability = 20000;
                                                        items.Enchant = 255;
                                                        items.SocketOne = Conquer_Online_Server.Game.Enums.Gem.SuperDragonGem;
                                                        items.SocketTwo = Conquer_Online_Server.Game.Enums.Gem.SuperDragonGem;
                                                        client.Inventory.Add(items, Conquer_Online_Server.Game.Enums.ItemUse.CreateAndAdd);
                                                        client.Inventory.Remove(item, Conquer_Online_Server.Game.Enums.ItemUse.Remove);
                                                    }

                                                    if (client.Entity.Level >= 10)
                                                    {
                                                        if (client.Inventory.Count < 32)
                                                        {

                                                            ConquerItem items = new ConquerItem(true);
                                                            items.ID = 120269;//FloridNecklace
                                                            items.Color = Conquer_Online_Server.Game.Enums.Color.White;
                                                            items.Plus = 12;
                                                            items.Bless = 7;
                                                            items.MaximDurability = 20000;
                                                            items.Durability = 20000;
                                                            items.Enchant = 255;
                                                            items.SocketOne = Conquer_Online_Server.Game.Enums.Gem.SuperDragonGem;
                                                            items.SocketTwo = Conquer_Online_Server.Game.Enums.Gem.SuperDragonGem;
                                                            client.Inventory.Add(items, Conquer_Online_Server.Game.Enums.ItemUse.CreateAndAdd);
                                                            client.Inventory.Remove(item, Conquer_Online_Server.Game.Enums.ItemUse.Remove);
                                                        }
                                                        if (client.Entity.Level >= 10)
                                                        {
                                                            if (client.Inventory.Count < 32)
                                                            {

                                                                ConquerItem items = new ConquerItem(true);
                                                                items.ID = 160249;//Blizzard
                                                                items.Color = Conquer_Online_Server.Game.Enums.Color.White;
                                                                items.Plus = 12;
                                                                items.Bless = 7;
                                                                items.MaximDurability = 20000;
                                                                items.Durability = 20000;
                                                                items.Enchant = 255;
                                                                items.SocketOne = Conquer_Online_Server.Game.Enums.Gem.SuperDragonGem;
                                                                items.SocketTwo = Conquer_Online_Server.Game.Enums.Gem.SuperDragonGem;
                                                                client.Inventory.Add(items, Conquer_Online_Server.Game.Enums.ItemUse.CreateAndAdd);
                                                                client.Inventory.Remove(item, Conquer_Online_Server.Game.Enums.ItemUse.Remove);
                                                            }
                                                            if (client.Entity.Level >= 10)
                                                            {
                                                                if (client.Inventory.Count < 32)
                                                                {

                                                                    ConquerItem items = new ConquerItem(true);
                                                                    items.ID = 150269;//CrimsonRing
                                                                    items.Color = Conquer_Online_Server.Game.Enums.Color.White;
                                                                    items.Plus = 12;
                                                                    items.Bless = 7;
                                                                    items.MaximDurability = 20000;
                                                                    items.Durability = 20000;
                                                                    items.Enchant = 255;
                                                                    items.SocketOne = Conquer_Online_Server.Game.Enums.Gem.SuperDragonGem;
                                                                    items.SocketTwo = Conquer_Online_Server.Game.Enums.Gem.SuperDragonGem;
                                                                    client.Inventory.Add(items, Conquer_Online_Server.Game.Enums.ItemUse.CreateAndAdd);
                                                                    client.Inventory.Remove(item, Conquer_Online_Server.Game.Enums.ItemUse.Remove);
                                                                }
                                                                if (client.Entity.Level >= 10)
                                                                {
                                                                    if (client.Inventory.Count < 32)
                                                                    {

                                                                        ConquerItem items = new ConquerItem(true);
                                                                        items.ID = 148140;//Head~lee~longa
                                                                        items.Color = Conquer_Online_Server.Game.Enums.Color.White;
                                                                        items.Plus = 12;
                                                                        items.Bless = 7;
                                                                        items.MaximDurability = 20000;
                                                                        items.Durability = 20000;
                                                                        items.Enchant = 255;
                                                                        items.SocketOne = Conquer_Online_Server.Game.Enums.Gem.SuperDragonGem;
                                                                        items.SocketTwo = Conquer_Online_Server.Game.Enums.Gem.SuperDragonGem;
                                                                        client.Inventory.Add(items, Conquer_Online_Server.Game.Enums.ItemUse.CreateAndAdd);
                                                                        client.Inventory.Remove(item, Conquer_Online_Server.Game.Enums.ItemUse.Remove);
                                                                    }
                                                                    if (client.Entity.Level >= 10)
                                                                    {
                                                                        if (client.Inventory.Count < 32)
                                                                        {

                                                                            ConquerItem items = new ConquerItem(true);
                                                                            items.ID = 203009;//RidingCrop
                                                                            items.Color = Conquer_Online_Server.Game.Enums.Color.White;
                                                                            items.Plus = 12;
                                                                            items.MaximDurability = 20000;
                                                                            items.Durability = 20000;
                                                                            client.Inventory.Add(items, Conquer_Online_Server.Game.Enums.ItemUse.CreateAndAdd);
                                                                            client.Inventory.Remove(item, Conquer_Online_Server.Game.Enums.ItemUse.Remove);
                                                                        }
                                                                        if (client.Entity.Level >= 10)
                                                                        {
                                                                            if (client.Inventory.Count < 32)
                                                                            {

                                                                                ConquerItem items = new ConquerItem(true);
                                                                                items.ID = 148309; //Head~lee~longa
                                                                                items.Color = Conquer_Online_Server.Game.Enums.Color.White;
                                                                                items.Plus = 12;
                                                                                items.Bless = 7;
                                                                                items.MaximDurability = 20000;
                                                                                items.Durability = 20000;
                                                                                items.Enchant = 255;
                                                                                items.SocketOne = Conquer_Online_Server.Game.Enums.Gem.SuperDragonGem;
                                                                                items.SocketTwo = Conquer_Online_Server.Game.Enums.Gem.SuperDragonGem;
                                                                                client.Inventory.Add(items, Conquer_Online_Server.Game.Enums.ItemUse.CreateAndAdd);
                                                                                client.Inventory.Remove(item, Conquer_Online_Server.Game.Enums.ItemUse.Remove);
                                                                            }

                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }

                        }

                    }
                    break;
                #endregion

                #endregion
                #region Arena Pack
                case 723912:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.Entity.ConquerPoints += 50000;
                        client.Entity.Update(_String.Effect, "breal_start", true);
                        client.Send(new Conquer_Online_Server.Network.GamePackets.Message("Congratulations You Got 50 CPS For Using ArenaPack", System.Drawing.Color.Red, 0x7dc));
                        break;
                    }
                #endregion
                #region LifeFruitBasket
                case 723725:
                    {
                        if (client.Inventory.Count <= 31)
                        {
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                            client.Inventory.Add(723726, 0, 20);
                        }
                        else
                            client.Send(Constants.FullInventory);
                        break;
                    }
                #endregion
                #region 7StarPouch
                case 725067:
                    {
                        if (client.Inventory.Count <= 35)
                        {
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                            client.Inventory.Add(725065, 0, 5);
                        }
                        else
                            client.Send(Constants.FullInventory);
                        break;
                    }
                #endregion
                #region SerenityPouch
                case 725068:
                    {
                        if (client.Inventory.Count <= 35)
                        {
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                            client.Inventory.Add(725066, 0, 5);
                        }
                        else
                            client.Send(Constants.FullInventory);
                        break;
                    }
                #endregion
                #region SpeedArrowPack
                case 727000:
                    {
                        if (client.Inventory.Count <= 35)
                        {
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                            client.Inventory.Add(1050002, 0, 1);
                        }
                        else
                            client.Send(Constants.FullInventory);
                        break;
                    }
                #endregion
                #region LifeFruit
                case 723726:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.Entity.Hitpoints = client.Entity.MaxHitpoints;
                        client.Entity.Mana = client.Entity.MaxMana;
                        break;
                    }
                #endregion
                #region Amrita Box
                case 720010:
                    {
                        if (client.Inventory.Count <= 38)
                        {
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                            client.Inventory.Add(1000030, 0, 3);
                        }
                        else
                            client.Send(Constants.FullInventory);
                        break;
                    }
                #endregion
                #region Panacea Box
                case 720011:
                    {
                        if (client.Inventory.Count <= 38)
                        {
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                            client.Inventory.Add(1002000, 0, 3);
                        }
                        else
                            client.Send(Constants.FullInventory);
                        break;
                    }
                #endregion
                #region Ginseng Box
                case 720012:
                    {
                        if (client.Inventory.Count <= 38)
                        {
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                            client.Inventory.Add(1002010, 0, 3);
                        }
                        else
                            client.Send(Constants.FullInventory);
                        break;
                    }
                #endregion
                #region Vanilla Box
                case 720013:
                    {
                        if (client.Inventory.Count <= 38)
                        {
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                            client.Inventory.Add(1002020, 0, 3);
                        }
                        else
                            client.Send(Constants.FullInventory);
                        break;
                    }
                #endregion
                #region RecoveryPill Box
                case 720014:
                    {
                        if (client.Inventory.Count <= 38)
                        {
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                            client.Inventory.Add(1001030, 0, 3);
                        }
                        else
                            client.Send(Constants.FullInventory);
                        break;
                    }
                #endregion RecoveryPill
                #region SoulPill Box
                case 720015:
                    {
                        if (client.Inventory.Count <= 38)
                        {
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                            client.Inventory.Add(1001040, 0, 3);
                        }
                        else
                            client.Send(Constants.FullInventory);
                        break;
                    }
                #endregion
                #region RefreshingPill Box
                case 720016:
                    {
                        if (client.Inventory.Count <= 38)
                        {
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                            client.Inventory.Add(1002030, 0, 3);
                        }
                        else
                            client.Send(Constants.FullInventory);
                        break;
                    }
                #endregion
                #region ChantPill Box
                case 720017:
                    {
                        if (client.Inventory.Count <= 38)
                        {
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                            client.Inventory.Add(1002040, 0, 3);
                        }
                        else
                            client.Send(Constants.FullInventory);
                        break;
                    }
                #endregion
                #region Mil.Ginseng Box
                case 721330:
                    {
                        if (client.Inventory.Count <= 38)
                        {
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                            client.Inventory.Add(1002050, 0, 3);
                        }
                        else
                            client.Send(Constants.FullInventory);
                        break;
                    }
                #endregion
                #region ExpBall
                case 723700:
                    {
                        if (client.ExpBalls < 10)
                        {
                            if (client.Entity.Level < 137)
                            {
                                client.IncreaseExperience(client.ExpBall, false);
                                client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                                client.ExpBalls++;
                            }
                        }
                        else
                            client.Send(Constants.ExpBallsUsed);
                        break;
                    }
                #endregion
                #region MeteorTearScroll
                case 723711:
                    {
                        if (client.Inventory.Count <= 36)
                        {
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                            client.Inventory.Add(1088002, 0, 5);
                        }
                        else
                            client.Send(Constants.FullInventory);
                        break;
                    }
                #endregion
                #region +1Stone Pack
                case 723712:
                    {
                        if (client.Inventory.Count <= 36)
                        {
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                            client.Inventory.Add(730001, 1, 5);
                        }
                        else
                            client.Send(Constants.FullInventory);
                        break;
                    }
                #endregion
                #region Class1MoneyBag
                case 723713:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.Entity.Money += 300000;
                        break;
                    }
                #endregion
                #region Class2MoneyBag
                case 723714:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.Entity.Money += 800000;
                        break;
                    }
                #endregion
                #region Class3MoneyBag
                case 723715:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.Entity.Money += 1200000;
                        break;
                    }
                #endregion
                #region Class4MoneyBag
                case 723716:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.Entity.Money += 1800000;
                        break;
                    }
                #endregion
                #region Class5MoneyBag
                case 723717:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.Entity.Money += 5000000;
                        break;
                    }
                #endregion
                #region Class6MoneyBag
                case 723718:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.Entity.Money += 20000000;
                        break;
                    }
                #endregion
                #region Class7MoneyBag
                case 723719:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.Entity.Money += 25000000;
                        break;
                    }
                #endregion
                #region Class8MoneyBag
                case 723720:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.Entity.Money += 80000000;
                        break;
                    }
                #endregion
                #region Class9MoneyBag
                case 723721:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.Entity.Money += 100000000;
                        break;
                    }
                #endregion
                #region Class10MoneyBag
                case 723722:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.Entity.Money += 300000000;
                        break;
                    }
                #endregion
                #region BeginnerPackL1
                case 723753:
                    {
                        if (client.Entity.Level >= 1)
                        {
                            if (client.Inventory.Count < 33)
                            {
                                client.Entity.Money += 500;
                                client.Entity.ConquerPoints += 10;
                                client.Inventory.Add(1000000, 0, 3);
                                client.Inventory.Add(1001000, 0, 3);
                                client.Inventory.Add(723755, 0, 1);
                                client.Inventory.Remove(item, Conquer_Online_Server.Game.Enums.ItemUse.Remove);
                            }
                            else
                                client.Send(new Message("You need to make atleast 7 free spots in your inventory.", System.Drawing.Color.Red, Message.TopLeft));
                        }
                        else
                            client.Send(new Message("You must be atleast level 1", System.Drawing.Color.Red, Message.TopLeft));


                        break;
                    }
                #endregion
                #region BeginnerPackL10
                case 723755:
                    {
                        if (client.Entity.Level >= 10)
                        {
                            if (client.Inventory.Count < 26)
                            {
                                client.Inventory.Add(723700, 0, 10);//ExpBall
                                client.Inventory.Add(723017, 0, 3); //ExpPotion
                                client.Inventory.Add(723767, 0, 1);
                                client.Inventory.Remove(item, Conquer_Online_Server.Game.Enums.ItemUse.Remove);
                            }
                            else
                                client.Send(new Message("You need to make atleast 14 free spots in your inventory.", System.Drawing.Color.Red, Message.TopLeft));
                        }
                        else
                            client.Send(new Message("You must be atleast level 10", System.Drawing.Color.Red, Message.TopLeft));


                        break;
                    }
                #endregion
                #region BeginnerPackL70
                case 723767:
                    {
                        if (client.Entity.Level >= 70)
                        {
                            if (client.Inventory.Count < 36)
                            {
                                client.Inventory.Add(723017, 0, 5); //ExpPotion
                                client.Entity.ConquerPoints += 20;
                                client.Inventory.Add(1080001, 0, 1); //Emerald
                                client.Inventory.Add(723772, 0, 1);
                                client.Inventory.Remove(item, Conquer_Online_Server.Game.Enums.ItemUse.Remove);
                            }
                            else
                                client.Send(new Message("You need to make atleast 7 free spots in your inventory.", System.Drawing.Color.Red, Message.TopLeft));
                        }
                        else
                            client.Send(new Message("You must be atleast level 70", System.Drawing.Color.Red, Message.TopLeft));

                        break;
                    }
                #endregion
                #region BeginnerPackL100
                case 723772:
                    {
                        if (client.Entity.Level >= 100)
                        {
                            if (client.Inventory.Count < 28)
                            {
                                client.Inventory.Add(723774, 0, 1);
                                client.Inventory.Add(723017, 0, 10); //ExpPotion
                                if (client.Entity.Class <= 15)
                                    client.Inventory.Add(800010, 0, 1); //Trojan
                                else if (client.Entity.Class <= 25)
                                    client.Inventory.Add(800410, 0, 1); //Warrior
                                else if (client.Entity.Class <= 45)
                                    client.Inventory.Add(800610, 0, 1); //Archer
                                else if (client.Entity.Class <= 55)
                                    client.Inventory.Add(800010, 0, 1); //Ninja
                                else if (client.Entity.Class <= 65)
                                    client.Inventory.Add(800010, 0, 1); //Monk
                                else //Taoist
                                    client.Inventory.Add(800508, 0, 1);

                                client.Inventory.Remove(item, Conquer_Online_Server.Game.Enums.ItemUse.Remove);


                            }
                            else
                                client.Send(new Message("You need to make atleast 12 free spots in your inventory.", System.Drawing.Color.Red, Message.TopLeft));
                        }
                        else
                            client.Send(new Message("You must be atleast level 100", System.Drawing.Color.Red, Message.TopLeft));
                        break;
                    }
                #endregion
                #region BeginnerPackL110
                case 723774:
                    {
                        if (client.Entity.Level >= 110)
                        {
                            if (client.Inventory.Count < 27)
                            {
                                client.Inventory.Add(723776, 0, 1);
                                client.Inventory.Add(721090, 0, 1);//MoonBox
                                client.Inventory.Add(723017, 0, 10); //ExpPotion
                                if (client.Entity.Class <= 15)
                                    CheckCommand("@item MythicBlade Super 0 0 0 13 0", client);
                                else if (client.Entity.Class <= 25)
                                    CheckCommand("@item DragonWand Super 0 0 0 13 0", client);
                                else if (client.Entity.Class <= 45)
                                    CheckCommand("@item AncientBow Super 0 0 0 13 0", client);
                                else if (client.Entity.Class <= 55)
                                    CheckCommand("@item FlameKatana Super 0 0 0 13 0", client);
                                else if (client.Entity.Class <= 65)
                                    CheckCommand("@item BeadsOfConsciousness Super 0 0 0 13 0", client);
                                else
                                    CheckCommand("@item ThunBacksword Super 0 0 0 3 0", client);
                                client.Entity.ConquerPoints += 30;
                                client.Inventory.Remove(item, Conquer_Online_Server.Game.Enums.ItemUse.Remove);
                            }
                            else
                                client.Send(new Message("You need to make atleast 13 free spots in your inventory.", System.Drawing.Color.Red, Message.TopLeft));
                        }
                        else
                            client.Send(new Message("You must be atleast level 110", System.Drawing.Color.Red, Message.TopLeft));
                        break;
                    }
                #endregion
                #region BeginnerPackL120
                case 723776:
                    {
                        if (client.Entity.Level >= 120)
                        {
                            if (client.Inventory.Count < 35)
                            {
                                client.Inventory.Add(1088001, 0, 5); //DragonBall
                                client.Inventory.Remove(item, Conquer_Online_Server.Game.Enums.ItemUse.Remove);
                            }
                            else
                                client.Send(new Message("You need to make atleast 5 free spots in your inventory.", System.Drawing.Color.Red, Message.TopLeft));
                        }
                        else
                            client.Send(new Message("You must be atleast level 120", System.Drawing.Color.Red, Message.TopLeft));
                        break;
                    }
                #endregion
                //723755, 723768, 723772  ,723774, 723776
                #region TopMoneyBag
                case 723723:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.Entity.Money += 500000000;
                        break;
                    }
                #endregion
                #region DrasgonBallScroll
                case 720028:
                    {
                        if (client.Inventory.Count <= 31)
                        {
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                            client.Inventory.Add(1088000, 0, 10);
                        }
                        else
                            client.Send(Constants.FullInventory);
                        break;
                    }
                #endregion
                #region DiligenceBook
                case 723340:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.Entity.SubClasses.StudyPoints += 5;
                        client.Inventory.Add(723903, 0, 10);
                        client.Send(new Message("Congratulations you got 5 study Points keep going", System.Drawing.Color.Red, Message.TopLeft));
                    }
                    break;
                #endregion
                #region StudyBook[Arena]
                case 720774:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.Entity.SubClasses.StudyPoints += 50;
                        client.Send(new Message("Congratulations you got 50 study Points keep going", System.Drawing.Color.Red, Message.TopLeft));
                    }
                    break;
                #endregion
                #region ModestyBook
                case 723342:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.Entity.SubClasses.StudyPoints += 500;
                        client.Send(new Message("Congratulations you got 500 study Points keep going", System.Drawing.Color.Red, Message.TopLeft));
                    }
                    break;
                #endregion
                #region MeteorScroll
                case 720027:
                    {
                        if (client.Inventory.Count <= 31)
                        {
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                            client.Inventory.Add(1088001, 0, 10);
                        }
                        else
                            client.Send(Constants.FullInventory);
                        break;
                    }
                #endregion
                #region DoubleExperiencePotion
                case 723017:
                    {
                        client.Inventory.Remove(item, Conquer_Online_Server.Game.Enums.ItemUse.Remove);
                        client.Entity.DoubleExperienceTime = 3600;
                        break;
                    }
                #endregion
                #region NinjaAmulet
                case 723583:
                    {
                        client.Inventory.Remove(item, Conquer_Online_Server.Game.Enums.ItemUse.Remove);
                        switch (client.Entity.Body % 10)
                        {
                            case 2:
                            case 4:
                                client.Entity.Body--;
                                break;
                            case 1:
                            case 3:
                                client.Entity.Body++;
                                break;
                        }
                        break;
                    }
                #endregion
                #region PrayingStone(S)
                case 1200000:
                    {
                        uint value = (uint)(3 * 24 * 60 * 60);
                        client.AddBless(value);
                        client.Inventory.Remove(item, Conquer_Online_Server.Game.Enums.ItemUse.Remove);
                        client.Entity.Update(Network.GamePackets.Update.OnlineTraining, client.OnlineTrainingPoints, false);
                        break;
                    }
                #endregion
                #region PrayingStone(M)
                case 1200001:
                    {
                        uint value = (uint)(7 * 24 * 60 * 60);
                        client.Inventory.Remove(item, Conquer_Online_Server.Game.Enums.ItemUse.Remove);
                        client.AddBless(value);
                        client.Entity.Update(Network.GamePackets.Update.OnlineTraining, client.OnlineTrainingPoints, false);
                        break;
                    }
                #endregion
                #region PrayingStone(L)
                case 1200002:
                    {
                        uint value = (uint)(30 * 24 * 60 * 60);
                        client.Inventory.Remove(item, Conquer_Online_Server.Game.Enums.ItemUse.Remove);
                        client.AddBless(value);
                        client.Entity.Update(Network.GamePackets.Update.OnlineTraining, client.OnlineTrainingPoints, false);
                        break;
                    }
                #endregion
                #region PenitenceAmulet
                case 723727:
                case 720128:
                    {
                        if (client.Entity.PKPoints >= 30)
                        {
                            client.Inventory.Remove(item, Conquer_Online_Server.Game.Enums.ItemUse.Remove);
                            client.Entity.PKPoints -= 30;
                        }
                        break;
                    }
                #endregion
                #region DisguiseAmulet
                case 723724:
                    {
                        int disguise = Kernel.Random.Next(Database.DataHolder.Disguises.Length);
                        ushort selected = Database.DataHolder.Disguises[disguise];

                        client.Inventory.Remove(item, Conquer_Online_Server.Game.Enums.ItemUse.Remove);

                        bool wasTransformated = client.Entity.Transformed;
                        if (wasTransformated)
                        {
                            client.Entity.Hitpoints = client.Entity.MaxHitpoints;
                            client.Entity.TransformationID = 0;
                            client.Entity.TransformationStamp = Time32.Now;
                        }
                        ushort transformation = selected;
                        client.Entity.TransformationID = transformation;
                        client.Entity.TransformationStamp = Time32.Now;
                        client.Entity.TransformationTime = 110;
                        SpellUse spellUse = new SpellUse(true);
                        spellUse.Attacker = client.Entity.UID;
                        spellUse.SpellID = 1360;
                        spellUse.SpellLevel = 4;
                        spellUse.X = client.Entity.X;
                        spellUse.Y = client.Entity.Y;
                        spellUse.AddTarget(client.Entity.UID, (uint)0, null);
                        client.Send(spellUse);
                        client.Entity.TransformationMaxHP = 3000;
                        double maxHP = client.Entity.MaxHitpoints;
                        double HP = client.Entity.Hitpoints;
                        double point = HP / maxHP;

                        client.Entity.Hitpoints = (uint)(client.Entity.TransformationMaxHP * point);
                        client.Entity.Update(Update.MaxHitpoints, client.Entity.TransformationMaxHP, false);
                        break;

                    }
                #endregion
                #region +8StonePack
                case 721222:
                    {
                        if (client.Entity.Level >= 10)
                        {
                            if (client.Inventory.Count < 38)
                            {
                                client.Inventory.Add(730008, 8, 1);//+8
                                client.Inventory.Add(730006, 6, 1); //+6
                                client.Inventory.Remove(item, Conquer_Online_Server.Game.Enums.ItemUse.Remove);
                            }
                            else
                                client.Send(new Message("You need to make atleast 2 free spots in your inventory.", System.Drawing.Color.Red, Message.TopLeft));
                        }
                        else
                            client.Send(new Message("You must be atleast level 10 to open the Pack", System.Drawing.Color.Red, Message.TopLeft));


                        break;
                    }
                #endregion
                #region ToughDrillPack
                case 721223:
                    {
                        if (client.Entity.Level >= 10)
                        {
                            if (client.Inventory.Count < 38)
                            {
                                client.Inventory.Add(1200005, 0, 1);//ToughDrill
                                client.Inventory.Add(730003, 3, 1); //+3
                                client.Inventory.Remove(item, Conquer_Online_Server.Game.Enums.ItemUse.Remove);
                            }
                            else
                                client.Send(new Message("You need to make atleast 2 free spots in your inventory.", System.Drawing.Color.Red, Message.TopLeft));
                        }
                        else
                            client.Send(new Message("You must be atleast level 10 to open the Pack", System.Drawing.Color.Red, Message.TopLeft));


                        break;
                    }
                #endregion
                #region SuperWarrior`sArmorPack
                case 721224:
                    {
                        uint itemid = 131069;
                        if (client.Entity.Level >= 10)
                        {
                            if (client.Inventory.Count < 32)
                            {
                                client.Inventory.Add(1200000, 0, 1);//PrayingStone
                                client.Inventory.Add(723700, 0, 1);//ExpBall
                                client.Inventory.Add(723017, 0, 5); //ExpPotion
                                ConquerItem items = new ConquerItem(true);
                                items.ID = itemid;
                                items.Color = Conquer_Online_Server.Game.Enums.Color.White;
                                items.Plus = 5;
                                items.SocketOne = Conquer_Online_Server.Game.Enums.Gem.EmptySocket;
                                items.Durability = items.MaximDurability = Conquer_Online_Server.Database.ConquerItemInformation.BaseInformations[itemid].Durability;
                                client.Inventory.Add(items, Conquer_Online_Server.Game.Enums.ItemUse.CreateAndAdd);
                                client.Inventory.Remove(item, Conquer_Online_Server.Game.Enums.ItemUse.Remove);
                            }
                            else
                                client.Send(new Message("You need to make atleast 8 free spots in your inventory.", System.Drawing.Color.Red, Message.TopLeft));
                        }
                        else
                            client.Send(new Message("You must be atleast level 10 to open the Pack", System.Drawing.Color.Red, Message.TopLeft));


                        break;
                    }
                #endregion
                #region SuperWarrior`sHelmetPack
                case 721225:
                    {
                        uint itemid = 111069;
                        if (client.Entity.Level >= 10)
                        {
                            if (client.Inventory.Count < 32)
                            {
                                client.Inventory.Add(1200000, 0, 1);//PrayingStone
                                client.Inventory.Add(723700, 0, 1);//ExpBall
                                client.Inventory.Add(723017, 0, 5); //ExpPotion
                                ConquerItem items = new ConquerItem(true);
                                items.ID = itemid;
                                items.Color = Conquer_Online_Server.Game.Enums.Color.White;
                                items.Plus = 5;
                                items.SocketOne = Conquer_Online_Server.Game.Enums.Gem.EmptySocket;
                                items.Durability = items.MaximDurability = Conquer_Online_Server.Database.ConquerItemInformation.BaseInformations[itemid].Durability;
                                client.Inventory.Add(items, Conquer_Online_Server.Game.Enums.ItemUse.CreateAndAdd);
                                client.Inventory.Remove(item, Conquer_Online_Server.Game.Enums.ItemUse.Remove);
                            }
                            else
                                client.Send(new Message("You need to make atleast 8 free spots in your inventory.", System.Drawing.Color.Red, Message.TopLeft));
                        }
                        else
                            client.Send(new Message("You must be atleast level 10 to open the Pack", System.Drawing.Color.Red, Message.TopLeft));


                        break;
                    }
                #endregion
                #region SuperTrojan`sArmorPack
                case 721226:
                    {
                        uint itemid = 130069;
                        if (client.Entity.Level >= 10)
                        {
                            if (client.Inventory.Count < 32)
                            {
                                client.Inventory.Add(1200000, 0, 1);//PrayingStone
                                client.Inventory.Add(723700, 0, 1);//ExpBall
                                client.Inventory.Add(723017, 0, 5); //ExpPotion
                                ConquerItem items = new ConquerItem(true);
                                items.ID = itemid;
                                items.Color = Conquer_Online_Server.Game.Enums.Color.White;
                                items.Plus = 5;
                                items.SocketOne = Conquer_Online_Server.Game.Enums.Gem.EmptySocket;
                                items.Durability = items.MaximDurability = Conquer_Online_Server.Database.ConquerItemInformation.BaseInformations[itemid].Durability;
                                client.Inventory.Add(items, Conquer_Online_Server.Game.Enums.ItemUse.CreateAndAdd);
                                client.Inventory.Remove(item, Conquer_Online_Server.Game.Enums.ItemUse.Remove);
                            }
                            else
                                client.Send(new Message("You need to make atleast 8 free spots in your inventory.", System.Drawing.Color.Red, Message.TopLeft));
                        }
                        else
                            client.Send(new Message("You must be atleast level 10 to open the Pack", System.Drawing.Color.Red, Message.TopLeft));


                        break;
                    }
                #endregion
                #region SuperTrojan`sCoronetPack
                case 721227:
                    {
                        uint itemid = 118069;
                        if (client.Entity.Level >= 10)
                        {
                            if (client.Inventory.Count < 32)
                            {
                                client.Inventory.Add(1200000, 0, 1);//PrayingStone
                                client.Inventory.Add(723700, 0, 1);//ExpBall
                                client.Inventory.Add(723017, 0, 5); //ExpPotion
                                ConquerItem items = new ConquerItem(true);
                                items.ID = itemid;
                                items.Color = Conquer_Online_Server.Game.Enums.Color.White;
                                items.Plus = 5;
                                items.SocketOne = Conquer_Online_Server.Game.Enums.Gem.EmptySocket;
                                items.Durability = items.MaximDurability = Conquer_Online_Server.Database.ConquerItemInformation.BaseInformations[itemid].Durability;
                                client.Inventory.Add(items, Conquer_Online_Server.Game.Enums.ItemUse.CreateAndAdd);
                                client.Inventory.Remove(item, Conquer_Online_Server.Game.Enums.ItemUse.Remove);
                            }
                            else
                                client.Send(new Message("You need to make atleast 8 free spots in your inventory.", System.Drawing.Color.Red, Message.TopLeft));
                        }
                        else
                            client.Send(new Message("You must be atleast level 10 to open the Pack", System.Drawing.Color.Red, Message.TopLeft));


                        break;
                    }
                #endregion
                #region SuperNinja`sVestPack
                case 721228:
                    {
                        uint itemid = 135069;
                        if (client.Entity.Level >= 10)
                        {
                            if (client.Inventory.Count < 32)
                            {
                                client.Inventory.Add(1200000, 0, 1);//PrayingStone
                                client.Inventory.Add(723700, 0, 1);//ExpBall
                                client.Inventory.Add(723017, 0, 5); //ExpPotion
                                ConquerItem items = new ConquerItem(true);
                                items.ID = itemid;
                                items.Color = Conquer_Online_Server.Game.Enums.Color.White;
                                items.Plus = 5;
                                items.SocketOne = Conquer_Online_Server.Game.Enums.Gem.EmptySocket;
                                items.Durability = items.MaximDurability = Conquer_Online_Server.Database.ConquerItemInformation.BaseInformations[itemid].Durability;
                                client.Inventory.Add(items, Conquer_Online_Server.Game.Enums.ItemUse.CreateAndAdd);
                                client.Inventory.Remove(item, Conquer_Online_Server.Game.Enums.ItemUse.Remove);
                            }
                            else
                                client.Send(new Message("You need to make atleast 8 free spots in your inventory.", System.Drawing.Color.Red, Message.TopLeft));
                        }
                        else
                            client.Send(new Message("You must be atleast level 10 to open the Pack", System.Drawing.Color.Red, Message.TopLeft));


                        break;
                    }
                #endregion
                #region SuperNinja`sVeilPack
                case 721229:
                    {
                        uint itemid = 112069;
                        if (client.Entity.Level >= 10)
                        {
                            if (client.Inventory.Count < 32)
                            {
                                client.Inventory.Add(1200000, 0, 1);//PrayingStone
                                client.Inventory.Add(723700, 0, 1);//ExpBall
                                client.Inventory.Add(723017, 0, 5); //ExpPotion
                                ConquerItem items = new ConquerItem(true);
                                items.ID = itemid;
                                items.Color = Conquer_Online_Server.Game.Enums.Color.White;
                                items.Plus = 5;
                                items.SocketOne = Conquer_Online_Server.Game.Enums.Gem.EmptySocket;
                                items.Durability = items.MaximDurability = Conquer_Online_Server.Database.ConquerItemInformation.BaseInformations[itemid].Durability;
                                client.Inventory.Add(items, Conquer_Online_Server.Game.Enums.ItemUse.CreateAndAdd);
                                client.Inventory.Remove(item, Conquer_Online_Server.Game.Enums.ItemUse.Remove);
                            }
                            else
                                client.Send(new Message("You need to make atleast 8 free spots in your inventory.", System.Drawing.Color.Red, Message.TopLeft));
                        }
                        else
                            client.Send(new Message("You must be atleast level 10 to open the Pack", System.Drawing.Color.Red, Message.TopLeft));


                        break;
                    }
                #endregion
                #region SuperTaoist`sRobePack
                case 721230:
                    {
                        uint itemid = 134069;
                        if (client.Entity.Level >= 10)
                        {
                            if (client.Inventory.Count < 32)
                            {
                                client.Inventory.Add(1200000, 0, 1);//PrayingStone
                                client.Inventory.Add(723700, 0, 1);//ExpBall
                                client.Inventory.Add(723017, 0, 5); //ExpPotion
                                ConquerItem items = new ConquerItem(true);
                                items.ID = itemid;
                                items.Color = Conquer_Online_Server.Game.Enums.Color.White;
                                items.Plus = 5;
                                items.SocketOne = Conquer_Online_Server.Game.Enums.Gem.EmptySocket;
                                items.Durability = items.MaximDurability = Conquer_Online_Server.Database.ConquerItemInformation.BaseInformations[itemid].Durability;
                                client.Inventory.Add(items, Conquer_Online_Server.Game.Enums.ItemUse.CreateAndAdd);
                                client.Inventory.Remove(item, Conquer_Online_Server.Game.Enums.ItemUse.Remove);
                            }
                            else
                                client.Send(new Message("You need to make atleast 8 free spots in your inventory.", System.Drawing.Color.Red, Message.TopLeft));
                        }
                        else
                            client.Send(new Message("You must be atleast level 10 to open the Pack", System.Drawing.Color.Red, Message.TopLeft));


                        break;
                    }
                #endregion
                #region SuperTaoist`sCapPack
                case 721231:
                    {
                        uint itemid = 114069;
                        if (client.Entity.Level >= 10)
                        {
                            if (client.Inventory.Count < 32)
                            {
                                client.Inventory.Add(1200000, 0, 1);//PrayingStone
                                client.Inventory.Add(723700, 0, 1);//ExpBall
                                client.Inventory.Add(723017, 0, 5); //ExpPotion
                                ConquerItem items = new ConquerItem(true);
                                items.ID = itemid;
                                items.Color = Conquer_Online_Server.Game.Enums.Color.White;
                                items.Plus = 5;
                                items.SocketOne = Conquer_Online_Server.Game.Enums.Gem.EmptySocket;
                                items.Durability = items.MaximDurability = Conquer_Online_Server.Database.ConquerItemInformation.BaseInformations[itemid].Durability;
                                client.Inventory.Add(items, Conquer_Online_Server.Game.Enums.ItemUse.CreateAndAdd);
                                client.Inventory.Remove(item, Conquer_Online_Server.Game.Enums.ItemUse.Remove);
                            }
                            else
                                client.Send(new Message("You need to make atleast 8 free spots in your inventory.", System.Drawing.Color.Red, Message.TopLeft));
                        }
                        else
                            client.Send(new Message("You must be atleast level 10 to open the Pack", System.Drawing.Color.Red, Message.TopLeft));


                        break;
                    }
                #endregion
                #region SuperArcher`sCoatPack
                case 721232:
                    {
                        uint itemid = 133049;
                        if (client.Entity.Level >= 10)
                        {
                            if (client.Inventory.Count < 32)
                            {
                                client.Inventory.Add(1200000, 0, 1);//PrayingStone
                                client.Inventory.Add(723700, 0, 1);//ExpBall
                                client.Inventory.Add(723017, 0, 5); //ExpPotion
                                ConquerItem items = new ConquerItem(true);
                                items.ID = itemid;
                                items.Color = Conquer_Online_Server.Game.Enums.Color.White;
                                items.Plus = 5;
                                items.SocketOne = Conquer_Online_Server.Game.Enums.Gem.EmptySocket;
                                items.Durability = items.MaximDurability = Conquer_Online_Server.Database.ConquerItemInformation.BaseInformations[itemid].Durability;
                                client.Inventory.Add(items, Conquer_Online_Server.Game.Enums.ItemUse.CreateAndAdd);
                                client.Inventory.Remove(item, Conquer_Online_Server.Game.Enums.ItemUse.Remove);
                            }
                            else
                                client.Send(new Message("You need to make atleast 8 free spots in your inventory.", System.Drawing.Color.Red, Message.TopLeft));
                        }
                        else
                            client.Send(new Message("You must be atleast level 10 to open the Pack", System.Drawing.Color.Red, Message.TopLeft));


                        break;
                    }
                #endregion
                #region SuperArcher`sHatPack
                case 721233:
                    {
                        uint itemid = 113049;
                        if (client.Entity.Level >= 10)
                        {
                            if (client.Inventory.Count < 32)
                            {
                                client.Inventory.Add(1200000, 0, 1);//PrayingStone
                                client.Inventory.Add(723700, 0, 1);//ExpBall
                                client.Inventory.Add(723017, 0, 5); //ExpPotion
                                ConquerItem items = new ConquerItem(true);
                                items.ID = itemid;
                                items.Color = Conquer_Online_Server.Game.Enums.Color.White;
                                items.Plus = 5;
                                items.SocketOne = Conquer_Online_Server.Game.Enums.Gem.EmptySocket;
                                items.Durability = items.MaximDurability = Conquer_Online_Server.Database.ConquerItemInformation.BaseInformations[itemid].Durability;
                                client.Inventory.Add(items, Conquer_Online_Server.Game.Enums.ItemUse.CreateAndAdd);
                                client.Inventory.Remove(item, Conquer_Online_Server.Game.Enums.ItemUse.Remove);
                            }
                            else
                                client.Send(new Message("You need to make atleast 8 free spots in your inventory.", System.Drawing.Color.Red, Message.TopLeft));
                        }
                        else
                            client.Send(new Message("You must be atleast level 10 to open the Pack", System.Drawing.Color.Red, Message.TopLeft));


                        break;
                    }
                #endregion
                #region SuperNecklacePack
                case 721234:
                    {
                        uint itemid = 120129;
                        if (client.Entity.Level >= 10)
                        {
                            if (client.Inventory.Count < 32)
                            {
                                client.Inventory.Add(1200000, 0, 1);//PrayingStone
                                client.Inventory.Add(723700, 0, 1);//ExpBall
                                client.Inventory.Add(723017, 0, 5); //ExpPotion
                                ConquerItem items = new ConquerItem(true);
                                items.ID = itemid;
                                items.Color = Conquer_Online_Server.Game.Enums.Color.White;
                                items.Plus = 5;
                                items.SocketOne = Conquer_Online_Server.Game.Enums.Gem.EmptySocket;
                                items.Durability = items.MaximDurability = Conquer_Online_Server.Database.ConquerItemInformation.BaseInformations[itemid].Durability;
                                client.Inventory.Add(items, Conquer_Online_Server.Game.Enums.ItemUse.CreateAndAdd);
                                client.Inventory.Remove(item, Conquer_Online_Server.Game.Enums.ItemUse.Remove);
                            }
                            else
                                client.Send(new Message("You need to make atleast 8 free spots in your inventory.", System.Drawing.Color.Red, Message.TopLeft));
                        }
                        else
                            client.Send(new Message("You must be atleast level 10 to open the Pack", System.Drawing.Color.Red, Message.TopLeft));


                        break;
                    }
                #endregion
                #region SuperRingPack
                case 721235:
                    {
                        uint itemid = 150139;
                        if (client.Entity.Level >= 10)
                        {
                            if (client.Inventory.Count < 32)
                            {
                                client.Inventory.Add(1200000, 0, 1);//PrayingStone
                                client.Inventory.Add(723700, 0, 1);//ExpBall
                                client.Inventory.Add(723017, 0, 5); //ExpPotion
                                ConquerItem items = new ConquerItem(true);
                                items.ID = itemid;
                                items.Color = Conquer_Online_Server.Game.Enums.Color.White;
                                items.Plus = 5;
                                items.SocketOne = Conquer_Online_Server.Game.Enums.Gem.EmptySocket;
                                items.Durability = items.MaximDurability = Conquer_Online_Server.Database.ConquerItemInformation.BaseInformations[itemid].Durability;
                                client.Inventory.Add(items, Conquer_Online_Server.Game.Enums.ItemUse.CreateAndAdd);
                                client.Inventory.Remove(item, Conquer_Online_Server.Game.Enums.ItemUse.Remove);
                            }
                            else
                                client.Send(new Message("You need to make atleast 8 free spots in your inventory.", System.Drawing.Color.Red, Message.TopLeft));
                        }
                        else
                            client.Send(new Message("You must be atleast level 10 to open the Pack", System.Drawing.Color.Red, Message.TopLeft));


                        break;
                    }
                #endregion
                #region SuperTaoist`sBagPack
                case 721236:
                    {
                        uint itemid = 121129;
                        if (client.Entity.Level >= 10)
                        {
                            if (client.Inventory.Count < 32)
                            {
                                client.Inventory.Add(1200000, 0, 1);//PrayingStone
                                client.Inventory.Add(723700, 0, 1);//ExpBall
                                client.Inventory.Add(723017, 0, 5); //ExpPotion
                                ConquerItem items = new ConquerItem(true);
                                items.ID = itemid;
                                items.Color = Conquer_Online_Server.Game.Enums.Color.White;
                                items.Plus = 5;
                                items.SocketOne = Conquer_Online_Server.Game.Enums.Gem.EmptySocket;
                                items.Durability = items.MaximDurability = Conquer_Online_Server.Database.ConquerItemInformation.BaseInformations[itemid].Durability;
                                client.Inventory.Add(items, Conquer_Online_Server.Game.Enums.ItemUse.CreateAndAdd);
                                client.Inventory.Remove(item, Conquer_Online_Server.Game.Enums.ItemUse.Remove);
                            }
                            else
                                client.Send(new Message("You need to make atleast 8 free spots in your inventory.", System.Drawing.Color.Red, Message.TopLeft));
                        }
                        else
                            client.Send(new Message("You must be atleast level 10 to open the Pack", System.Drawing.Color.Red, Message.TopLeft));


                        break;
                    }
                #endregion
                #region SuperTaoist`sBraceletPack
                case 721237:
                    {
                        uint itemid = 152149;
                        if (client.Entity.Level >= 10)
                        {
                            if (client.Inventory.Count < 32)
                            {
                                client.Inventory.Add(1200000, 0, 1);//PrayingStone
                                client.Inventory.Add(723700, 0, 1);//ExpBall
                                client.Inventory.Add(723017, 0, 5); //ExpPotion
                                ConquerItem items = new ConquerItem(true);
                                items.ID = itemid;
                                items.Color = Conquer_Online_Server.Game.Enums.Color.White;
                                items.Plus = 5;
                                items.SocketOne = Conquer_Online_Server.Game.Enums.Gem.EmptySocket;
                                items.Durability = items.MaximDurability = Conquer_Online_Server.Database.ConquerItemInformation.BaseInformations[itemid].Durability;
                                client.Inventory.Add(items, Conquer_Online_Server.Game.Enums.ItemUse.CreateAndAdd);
                                client.Inventory.Remove(item, Conquer_Online_Server.Game.Enums.ItemUse.Remove);
                            }
                            else
                                client.Send(new Message("You need to make atleast 8 free spots in your inventory.", System.Drawing.Color.Red, Message.TopLeft));
                        }
                        else
                            client.Send(new Message("You must be atleast level 10 to open the Pack", System.Drawing.Color.Red, Message.TopLeft));


                        break;
                    }
                #endregion
                #region SuperBootsPack
                case 721238:
                    {
                        uint itemid = 160139;
                        if (client.Entity.Level >= 10)
                        {
                            if (client.Inventory.Count < 32)
                            {
                                client.Inventory.Add(1200000, 0, 1);//PrayingStone
                                client.Inventory.Add(723700, 0, 1);//ExpBall
                                client.Inventory.Add(723017, 0, 5); //ExpPotion
                                ConquerItem items = new ConquerItem(true);
                                items.ID = itemid;
                                items.Color = Conquer_Online_Server.Game.Enums.Color.White;
                                items.Plus = 5;
                                items.SocketOne = Conquer_Online_Server.Game.Enums.Gem.EmptySocket;
                                items.Durability = items.MaximDurability = Conquer_Online_Server.Database.ConquerItemInformation.BaseInformations[itemid].Durability;
                                client.Inventory.Add(items, Conquer_Online_Server.Game.Enums.ItemUse.CreateAndAdd);
                                client.Inventory.Remove(item, Conquer_Online_Server.Game.Enums.ItemUse.Remove);
                            }
                            else
                                client.Send(new Message("You need to make atleast 8 free spots in your inventory.", System.Drawing.Color.Red, Message.TopLeft));
                        }
                        else
                            client.Send(new Message("You must be atleast level 10 to open the Pack", System.Drawing.Color.Red, Message.TopLeft));


                        break;
                    }
                #endregion
                #region SuperBladePack
                case 721239:
                    {
                        uint itemid = 410139;
                        if (client.Entity.Level >= 10)
                        {
                            if (client.Inventory.Count < 32)
                            {
                                client.Inventory.Add(1200000, 0, 1);//PrayingStone
                                client.Inventory.Add(723700, 0, 1);//ExpBall
                                client.Inventory.Add(723017, 0, 5); //ExpPotion
                                ConquerItem items = new ConquerItem(true);
                                items.ID = itemid;
                                items.Color = Conquer_Online_Server.Game.Enums.Color.White;
                                items.Plus = 5;
                                items.SocketOne = Conquer_Online_Server.Game.Enums.Gem.EmptySocket;
                                items.Durability = items.MaximDurability = Conquer_Online_Server.Database.ConquerItemInformation.BaseInformations[itemid].Durability;
                                client.Inventory.Add(items, Conquer_Online_Server.Game.Enums.ItemUse.CreateAndAdd);
                                client.Inventory.Remove(item, Conquer_Online_Server.Game.Enums.ItemUse.Remove);
                            }
                            else
                                client.Send(new Message("You need to make atleast 8 free spots in your inventory.", System.Drawing.Color.Red, Message.TopLeft));
                        }
                        else
                            client.Send(new Message("You must be atleast level 10 to open the Pack", System.Drawing.Color.Red, Message.TopLeft));


                        break;
                    }
                #endregion
                #region SuperSwordPack
                case 721240:
                    {
                        uint itemid = 420139;
                        if (client.Entity.Level >= 10)
                        {
                            if (client.Inventory.Count < 32)
                            {
                                client.Inventory.Add(1200000, 0, 1);//PrayingStone
                                client.Inventory.Add(723700, 0, 1);//ExpBall
                                client.Inventory.Add(723017, 0, 5); //ExpPotion
                                ConquerItem items = new ConquerItem(true);
                                items.ID = itemid;
                                items.Color = Conquer_Online_Server.Game.Enums.Color.White;
                                items.Plus = 5;
                                items.SocketOne = Conquer_Online_Server.Game.Enums.Gem.EmptySocket;
                                items.Durability = items.MaximDurability = Conquer_Online_Server.Database.ConquerItemInformation.BaseInformations[itemid].Durability;
                                client.Inventory.Add(items, Conquer_Online_Server.Game.Enums.ItemUse.CreateAndAdd);
                                client.Inventory.Remove(item, Conquer_Online_Server.Game.Enums.ItemUse.Remove);
                            }
                            else
                                client.Send(new Message("You need to make atleast 8 free spots in your inventory.", System.Drawing.Color.Red, Message.TopLeft));
                        }
                        else
                            client.Send(new Message("You must be atleast level 10 to open the Pack", System.Drawing.Color.Red, Message.TopLeft));


                        break;
                    }
                #endregion
                #region SuperClubPack
                case 721241:
                    {
                        uint itemid = 480139;
                        if (client.Entity.Level >= 10)
                        {
                            if (client.Inventory.Count < 32)
                            {
                                client.Inventory.Add(1200000, 0, 1);//PrayingStone
                                client.Inventory.Add(723700, 0, 1);//ExpBall
                                client.Inventory.Add(723017, 0, 5); //ExpPotion
                                ConquerItem items = new ConquerItem(true);
                                items.ID = itemid;
                                items.Color = Conquer_Online_Server.Game.Enums.Color.White;
                                items.Plus = 5;
                                items.SocketOne = Conquer_Online_Server.Game.Enums.Gem.EmptySocket;
                                items.Durability = items.MaximDurability = Conquer_Online_Server.Database.ConquerItemInformation.BaseInformations[itemid].Durability;
                                client.Inventory.Add(items, Conquer_Online_Server.Game.Enums.ItemUse.CreateAndAdd);
                                client.Inventory.Remove(item, Conquer_Online_Server.Game.Enums.ItemUse.Remove);
                            }
                            else
                                client.Send(new Message("You need to make atleast 8 free spots in your inventory.", System.Drawing.Color.Red, Message.TopLeft));
                        }
                        else
                            client.Send(new Message("You must be atleast level 10 to open the Pack", System.Drawing.Color.Red, Message.TopLeft));


                        break;
                    }
                #endregion
                #region SuperShieldPack
                case 721242:
                    {
                        uint itemid = 900049;
                        if (client.Entity.Level >= 10)
                        {
                            if (client.Inventory.Count < 32)
                            {
                                client.Inventory.Add(1200000, 0, 1);//PrayingStone
                                client.Inventory.Add(723700, 0, 1);//ExpBall
                                client.Inventory.Add(723017, 0, 5); //ExpPotion
                                ConquerItem items = new ConquerItem(true);
                                items.ID = itemid;
                                items.Color = Conquer_Online_Server.Game.Enums.Color.White;
                                items.Plus = 5;
                                items.SocketOne = Conquer_Online_Server.Game.Enums.Gem.EmptySocket;
                                items.Durability = items.MaximDurability = Conquer_Online_Server.Database.ConquerItemInformation.BaseInformations[itemid].Durability;
                                client.Inventory.Add(items, Conquer_Online_Server.Game.Enums.ItemUse.CreateAndAdd);
                                client.Inventory.Remove(item, Conquer_Online_Server.Game.Enums.ItemUse.Remove);
                            }
                            else
                                client.Send(new Message("You need to make atleast 8 free spots in your inventory.", System.Drawing.Color.Red, Message.TopLeft));
                        }
                        else
                            client.Send(new Message("You must be atleast level 10 to open the Pack", System.Drawing.Color.Red, Message.TopLeft));


                        break;
                    }
                #endregion
                #region SuperKatanaPack
                case 721243:
                    {
                        uint itemid = 601139;
                        if (client.Entity.Level >= 10)
                        {
                            if (client.Inventory.Count < 32)
                            {
                                client.Inventory.Add(1200000, 0, 1);//PrayingStone
                                client.Inventory.Add(723700, 0, 1);//ExpBall
                                client.Inventory.Add(723017, 0, 5); //ExpPotion
                                ConquerItem items = new ConquerItem(true);
                                items.ID = itemid;
                                items.Color = Conquer_Online_Server.Game.Enums.Color.White;
                                items.Plus = 5;
                                items.SocketOne = Conquer_Online_Server.Game.Enums.Gem.EmptySocket;
                                items.Durability = items.MaximDurability = Conquer_Online_Server.Database.ConquerItemInformation.BaseInformations[itemid].Durability;
                                client.Inventory.Add(items, Conquer_Online_Server.Game.Enums.ItemUse.CreateAndAdd);
                                client.Inventory.Remove(item, Conquer_Online_Server.Game.Enums.ItemUse.Remove);
                            }
                            else
                                client.Send(new Message("You need to make atleast 8 free spots in your inventory.", System.Drawing.Color.Red, Message.TopLeft));
                        }
                        else
                            client.Send(new Message("You must be atleast level 10 to open the Pack", System.Drawing.Color.Red, Message.TopLeft));


                        break;
                    }
                #endregion
                #region SuperBackswordPack
                case 721244:
                    {
                        uint itemid = 421139;
                        if (client.Entity.Level >= 10)
                        {
                            if (client.Inventory.Count < 32)
                            {
                                client.Inventory.Add(1200000, 0, 1);//PrayingStone
                                client.Inventory.Add(723700, 0, 1);//ExpBall
                                client.Inventory.Add(723017, 0, 5); //ExpPotion
                                ConquerItem items = new ConquerItem(true);
                                items.ID = itemid;
                                items.Color = Conquer_Online_Server.Game.Enums.Color.White;
                                items.Plus = 5;
                                items.SocketOne = Conquer_Online_Server.Game.Enums.Gem.EmptySocket;
                                items.Durability = items.MaximDurability = Conquer_Online_Server.Database.ConquerItemInformation.BaseInformations[itemid].Durability;
                                client.Inventory.Add(items, Conquer_Online_Server.Game.Enums.ItemUse.CreateAndAdd);
                                client.Inventory.Remove(item, Conquer_Online_Server.Game.Enums.ItemUse.Remove);
                            }
                            else
                                client.Send(new Message("You need to make atleast 8 free spots in your inventory.", System.Drawing.Color.Red, Message.TopLeft));
                        }
                        else
                            client.Send(new Message("You must be atleast level 10 to open the Pack", System.Drawing.Color.Red, Message.TopLeft));


                        break;
                    }
                #endregion
                #region SuperBowPack
                case 721245:
                    {
                        uint itemid = 500129;
                        if (client.Entity.Level >= 10)
                        {
                            if (client.Inventory.Count < 32)
                            {
                                client.Inventory.Add(1200000, 0, 1);//PrayingStone
                                client.Inventory.Add(723700, 0, 1);//ExpBall
                                client.Inventory.Add(723017, 0, 5); //ExpPotion
                                ConquerItem items = new ConquerItem(true);
                                items.ID = itemid;
                                items.Color = Conquer_Online_Server.Game.Enums.Color.White;
                                items.Plus = 5;
                                items.SocketOne = Conquer_Online_Server.Game.Enums.Gem.EmptySocket;
                                items.Durability = items.MaximDurability = Conquer_Online_Server.Database.ConquerItemInformation.BaseInformations[itemid].Durability;
                                client.Inventory.Add(items, Conquer_Online_Server.Game.Enums.ItemUse.CreateAndAdd);
                                client.Inventory.Remove(item, Conquer_Online_Server.Game.Enums.ItemUse.Remove);
                            }
                            else
                                client.Send(new Message("You need to make atleast 8 free spots in your inventory.", System.Drawing.Color.Red, Message.TopLeft));
                        }
                        else
                            client.Send(new Message("You must be atleast level 10 to open the Pack", System.Drawing.Color.Red, Message.TopLeft));


                        break;
                    }
                #endregion
                #endregion
                #region SkillBooks
                case 725000:
                    {
                        if (client.Entity.Spirit >= 20)
                        {
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                            client.AddSpell(new Spell(true) { ID = 1000 });
                        }
                        else
                        {
                            client.Send(new Message("You need atleast 20 spirit!", System.Drawing.Color.Tan, Message.TopLeft));
                        }
                        break;
                    }
                case 725001:
                    {
                        if (client.Entity.Spirit >= 80)
                        {
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                            client.AddSpell(new Spell(true) { ID = 1001 });
                        }
                        else
                        {
                            client.Send(new Message("You need atleast 80 spirit!", System.Drawing.Color.Tan, Message.TopLeft));
                        }
                        break;
                    }
                case 725002:
                    {
                        if (client.Entity.Class >= 140 && client.Entity.Class <= 145 && client.Entity.Level >= 90)
                        {
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                            client.AddSpell(new Spell(true) { ID = 1002 });
                        }
                        break;
                    }
                case 725003:
                    {
                        if (client.Entity.Spirit >= 30)
                        {
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                            client.AddSpell(new Spell(true) { ID = 1005 });
                        }
                        break;
                    }
                case 725004:
                    {
                        if (client.Entity.Class >= 130 && client.Entity.Class <= 135 || client.Entity.Class >= 140 && client.Entity.Class <= 145 && client.Entity.Level >= 15 || client.Entity.Class == 100 || client.Entity.Class == 101)
                        {
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                            client.AddSpell(new Spell(true) { ID = 1010 });
                        }
                        break;
                    }
                case 725005:
                    {
                        if (client.Entity.Level >= 40)
                        {
                            if (client.Proficiencies.ContainsKey(Database.SpellTable.SpellInformations[1045][0].WeaponSubtype))
                                if (client.Proficiencies[Database.SpellTable.SpellInformations[1045][0].WeaponSubtype].Level >= 5)
                                {
                                    client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                                    client.AddSpell(new Spell(true) { ID = 1045 });
                                }
                                else
                                {
                                    client.Send(new Message("You need level 5 at blade proficiency!", System.Drawing.Color.Tan, Message.TopLeft));
                                }
                        }
                        break;
                    }
                case 721158:
                    {
                        if (client.Entity.Level >= 40)
                        {
                            if (client.Proficiencies.ContainsKey(Database.SpellTable.SpellInformations[11005][0].WeaponSubtype))
                                if (client.Proficiencies[Database.SpellTable.SpellInformations[11005][0].WeaponSubtype].Level >= 5)
                                {
                                    client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                                    client.AddSpell(new Spell(true) { ID = 11005 });
                                }
                                else
                                {
                                    client.Send(new Message("You need level 5 at Spear proficiency!", System.Drawing.Color.Tan, Message.TopLeft));
                                }
                        }
                        break;
                    }
                case 721157:
                    {
                        if (client.Entity.Level >= 40)
                        {
                            if (client.Proficiencies.ContainsKey(Database.SpellTable.SpellInformations[11000][0].WeaponSubtype))
                                if (client.Proficiencies[Database.SpellTable.SpellInformations[11000][0].WeaponSubtype].Level >= 5)
                                {
                                    client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                                    client.AddSpell(new Spell(true) { ID = 11000 });
                                }
                                else
                                {
                                    client.Send(new Message("You need level 5 at Wand proficiency!", System.Drawing.Color.Tan, Message.TopLeft));
                                }
                        }
                        break;
                    }
                case 725010:
                    {
                        if (client.Entity.Level >= 40)
                        {
                            if (client.Proficiencies.ContainsKey(Database.SpellTable.SpellInformations[1046][0].WeaponSubtype))
                                if (client.Proficiencies[Database.SpellTable.SpellInformations[1046][0].WeaponSubtype].Level >= 5)
                                {
                                    client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                                    client.AddSpell(new Spell(true) { ID = 1046 });
                                }
                                else
                                {
                                    client.Send(new Message("You need level 5 at sword proficiency!", System.Drawing.Color.Tan, Message.TopLeft));
                                }
                        }
                        break;
                    }
                case 725011:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.AddSpell(new Spell(true) { ID = 1250 });
                        break;
                    }
                case 725012:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.AddSpell(new Spell(true) { ID = 1260 });
                        break;
                    }
                case 725013:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.AddSpell(new Spell(true) { ID = 1290 });
                        break;
                    }
                case 725014:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.AddSpell(new Spell(true) { ID = 1300 });
                        break;
                    }
                case 725015:
                    {
                        if (client.Entity.Class >= 130 && client.Entity.Class <= 135)
                        {
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                            client.AddSpell(new Spell(true) { ID = 1350 });
                        }
                        break;
                    }
                case 725016:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.AddSpell(new Spell(true) { ID = 1360 });
                        break;
                    }
                case 725018:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.AddSpell(new Spell(true) { ID = 1380 });
                        break;
                    }
                case 725019:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.AddSpell(new Spell(true) { ID = 1385 });
                        break;
                    }
                case 725020:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.AddSpell(new Spell(true) { ID = 1390 });
                        break;
                    }
                case 725021:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.AddSpell(new Spell(true) { ID = 1395 });
                        break;
                    }
                case 725022:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.AddSpell(new Spell(true) { ID = 1400 });
                        break;
                    }
                case 725023:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.AddSpell(new Spell(true) { ID = 1405 });
                        break;
                    }
                case 725024:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.AddSpell(new Spell(true) { ID = 1410 });
                        break;
                    }
                case 725025:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.AddSpell(new Spell(true) { ID = 1320 });
                        break;
                    }
                case 725026:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.AddSpell(new Spell(true) { ID = 5010 });
                        break;
                    }
                case 725027:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.AddSpell(new Spell(true) { ID = 5020 });
                        break;
                    }
                case 725028:
                    {
                        if (client.Entity.Class >= 130 && client.Entity.Class <= 135 || client.Entity.Class >= 140 && client.Entity.Class <= 145)
                            client.AddSpell(new Spell(true) { ID = 5001 });
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        break;
                    }
                case 725029:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.AddSpell(new Spell(true) { ID = 5030 });
                        break;
                    }
                case 725030:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.AddSpell(new Spell(true) { ID = 5040 });
                        break;
                    }
                case 725031:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.AddSpell(new Spell(true) { ID = 5050 });
                        break;
                    }
                case 725040:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.AddSpell(new Spell(true) { ID = 7000 });
                        break;
                    }
                case 725041:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.AddSpell(new Spell(true) { ID = 7010 });
                        break;
                    }
                case 725042:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.AddSpell(new Spell(true) { ID = 7020 });
                        break;
                    }
                case 725043:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.AddSpell(new Spell(true) { ID = 7030 });
                        break;
                    }
                case 725044:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.AddSpell(new Spell(true) { ID = 7040 });
                        break;
                    }
                case 1060100:
                    {
                        if (client.Entity.Class >= 140 && client.Entity.Class <= 145 && client.Entity.Level >= 82)
                        {
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                            client.AddSpell(new Spell(true) { ID = 1160 });
                        }
                        break;
                    }
                case 1060101:
                    {
                        if (client.Entity.Class >= 140 && client.Entity.Class <= 145 && client.Entity.Level >= 84)
                        {
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                            client.AddSpell(new Spell(true) { ID = 1165 });
                        }
                        break;
                    }
                #endregion
                #region Refinery Packs

                #region Penetration - Bracelet
                case 723130:
                case 723131:
                case 723132:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        byte extra = GetNextRefineryItem();
                        uint newItemID = item.ID + extra + 1260;
                        if (item.Bound)
                            client.Inventory.AddBound(newItemID, 0, 1);
                        else
                            client.Inventory.Add(newItemID, 0, 1);
                        break;
                    }
                #endregion
                #region Penetration - Headgear
                case 723684:
                case 723685:
                case 723686:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        byte extra = GetNextRefineryItem();
                        uint newItemID = item.ID + extra + 696;
                        if (item.Bound)
                            client.Inventory.AddBound(newItemID, 0, 1);
                        else
                            client.Inventory.Add(newItemID, 0, 1);
                        break;
                    }
                #endregion
                #region Penetration - Bag
                case 724148:
                case 724149:
                case 724150:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        byte extra = GetNextRefineryItem();
                        uint newItemID = item.ID + extra + 237;
                        if (item.Bound)
                            client.Inventory.AddBound(newItemID, 0, 1);
                        else
                            client.Inventory.Add(newItemID, 0, 1);
                        break;
                    }
                #endregion

                #region Skill Critical Strike - Backsword
                case 723133:
                case 723134:
                case 723135:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        byte extra = GetNextRefineryItem();
                        uint newItemID = item.ID + extra + 1287;
                        if (item.Bound)
                            client.Inventory.AddBound(newItemID, 0, 1);
                        else
                            client.Inventory.Add(newItemID, 0, 1);
                        break;
                    }
                #endregion
                #region Skill Critical Strike - Bracelet
                case 724195:
                case 724196:
                case 724197:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        byte extra = GetNextRefineryItem();
                        uint newItemID = item.ID + extra + 230;
                        if (item.Bound)
                            client.Inventory.AddBound(newItemID, 0, 1);
                        else
                            client.Inventory.Add(newItemID, 0, 1);
                        break;
                    }
                #endregion

                #region Block - Shield
                case 723669:
                case 723670:
                case 723671:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        byte extra = GetNextRefineryItem();
                        uint newItemID = item.ID + extra + 689;
                        if (item.Bound)
                            client.Inventory.AddBound(newItemID, 0, 1);
                        else
                            client.Inventory.Add(newItemID, 0, 1);
                        break;
                    }
                #endregion
                #region Block - Headgear
                case 724145:
                case 724146:
                case 724147:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        byte extra = GetNextRefineryItem();
                        uint newItemID = item.ID + extra + 208;
                        if (item.Bound)
                            client.Inventory.AddBound(newItemID, 0, 1);
                        else
                            client.Inventory.Add(newItemID, 0, 1);
                        break;
                    }
                #endregion

                #region CriticalStrike - Bow
                case 723651:
                case 723652:
                case 723653:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        byte extra = GetNextRefineryItem();
                        uint newItemID = item.ID + extra + 749;
                        if (item.Bound)
                            client.Inventory.AddBound(newItemID, 0, 1);
                        else
                            client.Inventory.Add(newItemID, 0, 1);
                        break;
                    }
                #endregion
                #region CriticalStrike - 1 Handed weapons
                case 723654:
                case 723655:
                case 723656:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        byte extra = GetNextRefineryItem();
                        uint newItemID = item.ID + extra + 751;
                        if (item.Bound)
                            client.Inventory.AddBound(newItemID, 0, 1);
                        else
                            client.Inventory.Add(newItemID, 0, 1);
                        break;
                    }
                #endregion
                #region CriticalStrike - 2 Handed weapons
                case 723657:
                case 723658:
                case 723659:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        byte extra = GetNextRefineryItem();
                        uint newItemID = item.ID + extra + 753;
                        if (item.Bound)
                            client.Inventory.AddBound(newItemID, 0, 1);
                        else
                            client.Inventory.Add(newItemID, 0, 1);
                        break;
                    }
                #endregion
                #region CriticalStrike - 2 Ring
                case 724215:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        byte extra = GetNextRefineryItem();
                        uint newItemID = item.ID + extra + 200;
                        if (item.Bound)
                            client.Inventory.AddBound(newItemID, 0, 1);
                        else
                            client.Inventory.Add(newItemID, 0, 1);
                        break;
                    }
                case 724193:
                case 724194:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        byte extra = GetNextRefineryItem();
                        uint newItemID = item.ID + extra + 223;
                        if (item.Bound)
                            client.Inventory.AddBound(newItemID, 0, 1);
                        else
                            client.Inventory.Add(newItemID, 0, 1);
                        break;
                    }
                #endregion

                #region Detoxication - Necklace
                case 723681:
                case 723682:
                case 723683:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        byte extra = GetNextRefineryItem();
                        uint newItemID = item.ID + extra + 667;
                        if (newItemID == 724348 || newItemID == 724349)
                            newItemID += 150;

                        if (item.Bound)
                            client.Inventory.AddBound(newItemID, 0, 1);
                        else
                            client.Inventory.Add(newItemID, 0, 1);
                        break;
                    }
                #endregion
                #region Detoxication - Headgear
                case 723672:
                case 723673:
                case 723674:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        byte extra = GetNextRefineryItem();
                        uint newItemID = item.ID + extra + 811;
                        if (item.Bound)
                            client.Inventory.AddBound(newItemID, 0, 1);
                        else
                            client.Inventory.Add(newItemID, 0, 1);
                        break;
                    }
                #endregion
                #region Detoxication - Bag
                case 723690:
                case 723691:
                case 723692:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        byte extra = GetNextRefineryItem();
                        uint newItemID = item.ID + extra + 683;
                        if (item.Bound)
                            client.Inventory.AddBound(newItemID, 0, 1);
                        else
                            client.Inventory.Add(newItemID, 0, 1);
                        break;
                    }
                #endregion
                #region Detoxication - Armor
                case 723675:
                case 723676:
                case 723677:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        byte extra = GetNextRefineryItem();
                        uint newItemID = item.ID + extra + 813;
                        if (item.Bound)
                            client.Inventory.AddBound(newItemID, 0, 1);
                        else
                            client.Inventory.Add(newItemID, 0, 1);
                        break;
                    }
                #endregion
                #region Detoxication - Boots
                case 723678:
                case 723679:
                case 723680:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        byte extra = GetNextRefineryItem();
                        uint newItemID = item.ID + extra + 815;
                        if (item.Bound)
                            client.Inventory.AddBound(newItemID, 0, 1);
                        else
                            client.Inventory.Add(newItemID, 0, 1);
                        break;
                    }
                #endregion

                #region Breakthrough - 1 Handed weapons
                case 723660:
                case 723661:
                case 723662:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        byte extra = GetNextRefineryItem();
                        uint newItemID = item.ID + extra + 789;
                        if (newItemID == 724449)
                            newItemID = 724445;
                        if (item.Bound)
                            client.Inventory.AddBound(newItemID, 0, 1);
                        else
                            client.Inventory.Add(newItemID, 0, 1);
                        break;
                    }
                #endregion
                #region Breakthrough - 2 Handed weapons
                case 723663:
                case 723664:
                case 723665:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        byte extra = GetNextRefineryItem();
                        uint newItemID = item.ID + extra + 791;
                        if (item.Bound)
                            client.Inventory.AddBound(newItemID, 0, 1);
                        else
                            client.Inventory.Add(newItemID, 0, 1);
                        break;
                    }
                #endregion
                #region Breakthrough - Bracelet
                case 724201:
                case 724202:
                case 724203:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        byte extra = GetNextRefineryItem();
                        uint newItemID = item.ID + extra + 162;
                        if (item.Bound)
                            client.Inventory.AddBound(newItemID, 0, 1);
                        else
                            client.Inventory.Add(newItemID, 0, 1);
                        break;
                    }
                #endregion
                #region Breakthrough - Bow
                case 723666:
                case 723667:
                case 723668:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        byte extra = GetNextRefineryItem();
                        uint newItemID = item.ID + extra + 793;
                        if (item.Bound)
                            client.Inventory.AddBound(newItemID, 0, 1);
                        else
                            client.Inventory.Add(newItemID, 0, 1);
                        break;
                    }
                #endregion
                #region Breakthrough - Ring
                case 724198:
                case 724199:
                case 724200:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        byte extra = GetNextRefineryItem();
                        uint newItemID = item.ID + extra + 266;
                        if (newItemID >= 724466)
                            newItemID += 4;
                        if (item.Bound)
                            client.Inventory.AddBound(newItemID, 0, 1);
                        else
                            client.Inventory.Add(newItemID, 0, 1);
                        break;
                    }
                #endregion

                #region Counteraction - Armor
                case 724142:
                case 724143:
                case 724144:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        byte extra = GetNextRefineryItem();
                        uint newItemID = item.ID + extra + 331;
                        if (item.Bound)
                            client.Inventory.AddBound(newItemID, 0, 1);
                        else
                            client.Inventory.Add(newItemID, 0, 1);
                        break;
                    }
                #endregion
                #region Counteraction - Bag
                case 724207:
                case 724208:
                case 724209:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        byte extra = GetNextRefineryItem();
                        uint newItemID = item.ID + extra + 161;
                        if (item.Bound)
                            client.Inventory.AddBound(newItemID, 0, 1);
                        else
                            client.Inventory.Add(newItemID, 0, 1);
                        break;
                    }
                #endregion
                #region Counteraction - Necklace
                case 724204:
                case 724205:
                case 724206:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        byte extra = GetNextRefineryItem();
                        uint newItemID = item.ID + extra + 274;
                        if (item.Bound)
                            client.Inventory.AddBound(newItemID, 0, 1);
                        else
                            client.Inventory.Add(newItemID, 0, 1);
                        break;
                    }
                #endregion

                #region Immunity - Boots
                case 724210:
                case 724211:
                case 724212:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        byte extra = GetNextRefineryItem();
                        uint newItemID = item.ID + extra + 225;
                        if (item.Bound)
                            client.Inventory.AddBound(newItemID, 0, 1);
                        else
                            client.Inventory.Add(newItemID, 0, 1);
                        break;
                    }
                #endregion
                #region Immunity - Armor
                case 724136:
                case 724137:
                case 724138:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        byte extra = GetNextRefineryItem();
                        uint newItemID = item.ID + extra + 294;
                        if (item.Bound)
                            client.Inventory.AddBound(newItemID, 0, 1);
                        else
                            client.Inventory.Add(newItemID, 0, 1);
                        break;
                    }
                #endregion

                #region Intensification - Headgear
                case 724139:
                case 724140:
                case 724141:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        byte extra = GetNextRefineryItem();
                        uint newItemID = item.ID + extra + 301;
                        if (item.Bound)
                            client.Inventory.AddBound(newItemID, 0, 1);
                        else
                            client.Inventory.Add(newItemID, 0, 1);
                        break;
                    }
                #endregion

                #region M-Defense - Necklace
                case 725160:
                case 725161:
                case 725162:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        byte extra = GetNextRefineryItem();
                        uint newItemID = item.ID + extra + 32;
                        if (item.Bound)
                            client.Inventory.AddBound(newItemID, 0, 1);
                        else
                            client.Inventory.Add(newItemID, 0, 1);
                        break;
                    }
                #endregion
                #region M-Defense - Bag
                case 725163:
                case 725164:
                case 725165:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        byte extra = GetNextRefineryItem();
                        uint newItemID = item.ID + extra + 34;
                        if (item.Bound)
                            client.Inventory.AddBound(newItemID, 0, 1);
                        else
                            client.Inventory.Add(newItemID, 0, 1);
                        break;
                    }
                #endregion
                #region M-Defense - Bracelet
                case 725166:
                case 725167:
                case 725168:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        byte extra = GetNextRefineryItem();
                        uint newItemID = item.ID + extra + 36;
                        if (item.Bound)
                            client.Inventory.AddBound(newItemID, 0, 1);
                        else
                            client.Inventory.Add(newItemID, 0, 1);
                        break;
                    }
                #endregion
                #region M-Defense - Ring
                case 725169:
                case 725170:
                case 725171:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        byte extra = GetNextRefineryItem();
                        uint newItemID = item.ID + extra + 38;
                        if (item.Bound)
                            client.Inventory.AddBound(newItemID, 0, 1);
                        else
                            client.Inventory.Add(newItemID, 0, 1);
                        break;
                    }
                #endregion

                case 724130:
                case 724131:
                case 724132:
                case 724133:
                case 724134:
                case 724135:
                case 724151:
                case 724152:
                case 724153:
                case 724154:
                case 724155:
                case 724156:
                case 724157:
                case 724158:
                case 724159:
                case 724160:
                case 724161:
                case 724162:
                case 724163:
                case 724164:
                case 724165:
                case 724166:
                case 724167:
                case 724168:
                case 724169:
                case 724170:
                case 724171:
                case 724172:
                case 724173:
                case 724174:
                case 724175:
                case 724176:
                case 724177:
                case 724178:
                case 724179:
                case 724180:
                case 724181:
                case 724182:
                case 724183:
                case 724184:
                case 724185:
                case 724186:
                case 724190:
                case 724191:
                case 724192:
                case 725055:
                case 725056:
                case 725057:
                case 725058: GainRefineryItem(item, client); break;
                #endregion
            }
            client.Entity.UseItem = false;
            client.SpiltStack = false;

        }
        public static byte GetNextRefineryItem()
        {
            if (Kernel.Rate(10))
                return 2;
            else if (Kernel.Rate(30))
                return 1;
            return 0;
        }
        public static void GainRefineryItem(ConquerItem item, GameClient c)
        {
            Refinery.RefineryBoxes RefineryB = null;
            if (Kernel.DatabaseRefineryBoxes.TryGetValue(item.ID, out RefineryB))
            {
                List<Refinery.RefineryItem> Possible = new List<Refinery.RefineryItem>();
                foreach (Refinery.RefineryItem RefineryI in Kernel.DatabaseRefinery.Values)
                {
                    if (RefineryI.Type == RefineryB.Type)
                    {
                        if (RefineryI.Position == RefineryB.Position)
                        {
                            if (RefineryI.Untradable == RefineryB.Untradable)
                                Possible.Add(RefineryI);
                        }
                    }
                }
                if (Possible.Count > 0)
                {
                    Random Rand = new Random();
                    Int32 x = Rand.Next(1, Possible.Count);
                    Refinery.RefineryItem Refinery = Possible[x];

                    if (Refinery != null)
                    {
                        c.Inventory.Remove(item, Game.Enums.ItemUse.Remove);

                        ConquerItem i = new ConquerItem(true);
                        i.ID = Refinery.Identifier;
                        c.Inventory.Add(i, Game.Enums.ItemUse.CreateAndAdd);
                    }
                }
            }
        }
        static void PickupItem(FloorItem floorItem, Client.GameClient client)
        {
            if (client.Screen.TryGetFloorItem(floorItem.UID, out floorItem) && !client.Trade.InTrade)
            {

                if (client.Entity.X == floorItem.X && client.Entity.Y == floorItem.Y)
                {
                    uint owner = floorItem.Owner == null ? 0 : (uint)floorItem.Owner.Entity.UID;
                    if ((owner != 0 && owner == client.Entity.UID) || owner == 0 || Time32.Now >= floorItem.OnFloor.AddSeconds(Constants.FloorItemAvailableAfter))
                    {
                        goto Jump;
                    }
                    else if (client.Team != null)
                    {
                        if (client.Team.IsTeammate(owner))
                        {
                            if (client.Team.PickupItems && floorItem.ValueType == FloorItem.FloorValueType.Item)
                            {
                                if (floorItem.ItemID != 1088000 && floorItem.ItemID != 1088001)
                                {
                                    goto Jump;
                                }
                            }
                            else if (client.Team.PickupMoney && floorItem.ValueType != FloorItem.FloorValueType.Item)
                            {
                                goto Jump;
                            }
                        }
                    }
                    client.Send(Constants.FloorItemNotAvailable);
                    return;
                Jump:
                    FloorItem pickupAnimation = new FloorItem(true);
                    if (floorItem.ValueType != FloorItem.FloorValueType.Item)
                        client.Map.RemoveFloorItem(floorItem);
                    pickupAnimation.Type = 3;
                    pickupAnimation.UID = client.Entity.UID;
                    pickupAnimation.X = client.Entity.X;
                    pickupAnimation.Y = client.Entity.Y;
                    switch (floorItem.ValueType)
                    {
                        case FloorItem.FloorValueType.Item:
                            {
                                if (client.Inventory.Count <= 39)
                                {
                                    client.SendScreen(pickupAnimation, false);
                                    floorItem.Type = 2;
                                    client.RemoveScreenSpawn(floorItem, true);
                                    client.Map.RemoveFloorItem(floorItem);
                                    client.Send(Constants.PickupItem(Database.ConquerItemInformation.BaseInformations[floorItem.Item.ID].Name));
                                    foreach (Client.GameClient clients in Program.GamePool)
                                    {
                                        clients.Screen.Remove(floorItem);
                                    }

                                    if (floorItem.Item.MobDropped)
                                    {
                                        client.Inventory.Add(floorItem.Item, Game.Enums.ItemUse.CreateAndAdd);
                                    }
                                    else
                                    {
                                        client.Inventory.Add(floorItem.Item, Game.Enums.ItemUse.Add);
                                        Program.CommandsAI("@save");
                                    }
                                }
                                else
                                    client.Send(Constants.FullInventory);
                                break;
                            }
                        case FloorItem.FloorValueType.Money:
                            {
                                client.Send(Constants.PickupGold(floorItem.Value));
                                client.SendScreen(pickupAnimation, false);
                                client.Entity.Money += floorItem.Value;
                                floorItem.Type = 2;
                                client.RemoveScreenSpawn(floorItem, true);
                                break;
                            }
                        case FloorItem.FloorValueType.ConquerPoints:
                            {
                                client.Send(Constants.PickupConquerPoints(floorItem.Value));
                                client.SendScreen(pickupAnimation, false);
                                client.Entity.ConquerPoints += floorItem.Value;
                                //client.Entity.ConquerPoints += Math.Min(floorItem.Value, 300);
                                floorItem.Type = 2;
                                client.RemoveScreenSpawn(floorItem, true);
                                break;
                            }
                    }
                    return;
                }
            }
        }  
        static void DropItem(ItemUsage itemUsage, Client.GameClient client)
        {
            if (client.Booth != null)
            {
                client.Send(new NpcReply(6, "Sorry you cant drop items while you in Booth") { OptionID = 0xff }.ToArray());
            }
            ConquerItem item = null;
            if (client.Inventory.TryGetItem(itemUsage.UID, out item))
            {
                if (item.ID == 0)
                    return;
                Database.ConquerItemInformation infos = new Database.ConquerItemInformation(item.ID, 0);
                if (item.Lock != 0 || item.Suspicious)
                    return;
                if (item.ID == 729611 || item.ID == 729612 || item.ID == 729613 || item.ID == 729614 || item.ID == 729703)
                {
                    client.SpiritBeadQ.Reset();
                    client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                    return;
                }
                if (infos.BaseInformation.Type == Database.ConquerItemBaseInformation.ItemType.Dropable && !item.Bound)
                {
                    ushort X = client.Entity.X, Y = client.Entity.Y;
                    if (client.Map.SelectCoordonates(ref X, ref Y))
                    {
                        FloorItem floorItem = new FloorItem(true);
                        if (!item.Purification.Available)
                        {
                            floorItem.Item = item;
                            floorItem.ItemID = item.ID;
                            floorItem.ItemColor = item.Color;
                            floorItem.MapID = client.Map.ID;
                            floorItem.MapObjType = Game.MapObjectType.Item;
                            floorItem.X = X;
                            floorItem.Y = Y;
                            floorItem.Type = FloorItem.Drop;
                            floorItem.OnFloor = Time32.Now;
                            floorItem.UID = FloorItem.FloorUID.Next;
                        }
                        else
                        {
                            floorItem.Item = item;
                            floorItem.ItemID = item.Purification.PurificationItemID;
                            floorItem.MapID = client.Map.ID;
                            floorItem.MapObjType = Game.MapObjectType.Item;
                            floorItem.X = X;
                            floorItem.Y = Y;
                            floorItem.Type = FloorItem.Drop;
                            floorItem.OnFloor = Time32.Now;
                            floorItem.UID = FloorItem.FloorUID.Next;
                        }
                        while (client.Map.Npcs.ContainsKey(floorItem.UID))
                            floorItem.UID = FloorItem.FloorUID.Next;
                        client.SendScreenSpawn(floorItem, true);
                        client.Map.AddFloorItem(floorItem);
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        Program.AddDropLog(client.Entity.Name, floorItem.Item);
                    }

                }
                else
                    client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
            }
        }  
        static void DropMoney(ItemUsage itemUsage, Client.GameClient client)
        {
            if (client.Entity.Money >= itemUsage.UID)
            {
                ushort X = client.Entity.X, Y = client.Entity.Y;
                if (client.Map.SelectCoordonates(ref X, ref Y))
                {
                    uint ItemID = MoneyItemID(itemUsage.UID);
                    FloorItem floorItem = new FloorItem(true);
                    floorItem.ValueType = FloorItem.FloorValueType.Money;
                    floorItem.Value = itemUsage.UID;
                    floorItem.ItemID = ItemID;
                    floorItem.MapID = client.Map.ID;
                    floorItem.MapObjType = Game.MapObjectType.Item;
                    floorItem.X = X;
                    floorItem.Y = Y;
                    floorItem.Type = FloorItem.Drop;
                    floorItem.OnFloor = Time32.Now;
                    floorItem.UID = FloorItem.FloorUID.Next;
                    while (client.Map.Npcs.ContainsKey(floorItem.UID))
                        floorItem.UID = FloorItem.FloorUID.Next;
                    client.SendScreenSpawn(floorItem, true);
                    client.Map.AddFloorItem(floorItem);
                    client.Entity.Money -= itemUsage.UID;

                }
            }
        }
        public static uint MoneyItemID(uint value)
        {
            if (value < 100)
                return 1090000;
            else if (value < 399)
                return 1090010;
            else if (value < 5099)
                return 1090020;
            else if (value < 8099)
                return 1091000;
            else if (value < 12099)
                return 1091010;
            else
                return 1091020;
        }

        static void HandleBuyFromNPC(ItemUsage itemUsage, Client.GameClient client)
        {
            if (client == null) return;
            if (itemUsage == null) return;

            if (client.Trade.InTrade) return;

            if (itemUsage.UID == 2888)
            {

            }

            #region Honor shop
            if (itemUsage.UID == Database.HonorShop.UID)
            {
                var shop = Database.HonorShop.Shop;
                uint cost;
                if (shop.Items.TryGetValue(itemUsage.dwParam, out cost))
                {
                    if (client.Inventory.Count <= 39)
                    {
                        if (client.CurrentHonor >= cost)
                        {
                            ConquerItem newItem = new GamePackets.ConquerItem(true);
                            newItem.ID = itemUsage.dwParam;
                            Database.ConquerItemBaseInformation ibi;
                            if (Database.ConquerItemInformation.BaseInformations.TryGetValue(newItem.ID, out ibi))
                            {
                                if (ibi.Durability > 0)
                                {
                                    newItem.Durability = ibi.Durability;
                                    newItem.MaximDurability = ibi.Durability;
                                }
                            }
                            client.Inventory.Add(newItem, Game.Enums.ItemUse.CreateAndAdd);

                            client.CurrentHonor -= cost;
                            client.ArenaStatistic.Send(client);
                        }
                        else client.Send(new Message("You do not have enough Honor Points", Color.Red, Message.TopLeft));
                    }
                    else client.Send(new Message("You do not have enough space in your inventory", Color.Red, Message.TopLeft));
                }
                else client.Send(new Message("Can not find this item", Color.Red, Message.TopLeft));
                return;
            }
            #endregion
            #region Champion shop
            if (itemUsage.UID == Database.ChampionShop.UID)
            {
                Database.ChampionShop.ChampionItem item;
                if (Database.ChampionShop.Shop.Items.TryGetValue(itemUsage.dwParam, out item))
                {
                    if (client.ChampionStats != null)
                    {
                        if (client.Inventory.Count <= 39)
                        {
                            if (client.ChampionStats.Points >= item.Price)
                            {
                                ConquerItem newItem = new GamePackets.ConquerItem(true);
                                newItem.ID = itemUsage.dwParam;
                                Database.ConquerItemBaseInformation ibi;
                                if (Database.ConquerItemInformation.BaseInformations.TryGetValue(newItem.ID, out ibi))
                                {
                                    if (ibi.Durability > 0)
                                    {
                                        newItem.Durability = ibi.Durability;
                                        newItem.MaximDurability = ibi.Durability;
                                    }
                                }
                                if (ibi != null)
                                    if (ibi.Name.Contains("Stone"))
                                        newItem.Plus = (byte)(newItem.ID % 10);
                                newItem.Bound = item.Bound;
                                client.Inventory.Add(newItem, Game.Enums.ItemUse.CreateAndAdd);

                                client.ChampionStats.Points -= item.Price;
                                client.ChampionStats.Send(client);
                            }
                            else client.Send(new Message("You do not have enough Champion Points", Color.Red, Message.TopLeft));
                        }
                        else client.Send(new Message("You do not have enough space in your inventory", Color.Red, Message.TopLeft));
                    }
                }
                else client.Send(new Message("Can not find this item", Color.Red, Message.TopLeft));
                return;
            }
            #endregion
            #region Race point shop
            if (itemUsage.UID == Database.RacePointShop.UID)
            {
                Database.RacePointShop.RacePointItem item;
                if (Database.RacePointShop.Shop.Items.TryGetValue(itemUsage.dwParam, out item))
                {
                    if (client.Inventory.Count <= 39)
                    {
                        if (client.RacePoints >= item.Price)
                        {
                            ConquerItem newItem = new GamePackets.ConquerItem(true);
                            newItem.ID = itemUsage.dwParam;
                            Database.ConquerItemBaseInformation ibi;
                            if (Database.ConquerItemInformation.BaseInformations.TryGetValue(newItem.ID, out ibi))
                            {
                                if (ibi.Durability > 0)
                                {
                                    newItem.Durability = ibi.Durability;
                                    newItem.MaximDurability = ibi.Durability;
                                }
                            }
                            client.Inventory.Add(newItem, Game.Enums.ItemUse.CreateAndAdd);

                            client.RacePoints -= item.Price;
                        }
                        else client.Send(new Message("You do not have enough Champion Points", Color.Red, Message.TopLeft));
                    }
                    else client.Send(new Message("You do not have enough space in your inventory", Color.Red, Message.TopLeft));
                }
                else client.Send(new Message("Can not find this item", Color.Red, Message.TopLeft));
                return;
            }
            #endregion

            Interfaces.INpc npc = null;
            if (client.Map.Npcs.TryGetValue(itemUsage.UID, out npc) || itemUsage.UID == 2888)
            {
                ConquerItem _ExistingItem;
                Database.ConquerItemInformation iteminfo = new Database.ConquerItemInformation(itemUsage.dwParam, 0);
                if (client.Inventory.Count == 40 && !client.Inventory.Contains(iteminfo.BaseInformation.ID, iteminfo.BaseInformation.StackSize, out _ExistingItem))
                    return;
                if (itemUsage.UID != 2888)
                    if (Kernel.GetDistance(client.Entity.X, client.Entity.Y, npc.X, npc.Y) > 17)
                        return;
                Database.ShopFile.Shop shop = new Database.ShopFile.Shop();
                if (!Database.ShopFile.Shops.TryGetValue(itemUsage.UID, out shop))
                    if (!Database.EShopFile.Shops.TryGetValue(itemUsage.UID, out shop))
                        shop = null;
                if (shop != null && shop.UID != 0)
                {
                    uint Amount = itemUsage.dwExtraInfo > 0 ? itemUsage.dwExtraInfo : 1;

                    ConquerItem item = new ConquerItem(true);

                    switch (shop.MoneyType)
                    {
                        case Conquer_Online_Server.Database.ShopFile.MoneyType.Gold:
                            {
                                if (iteminfo.BaseInformation.GoldWorth * Amount > client.Entity.Money)
                                    return;
                                if (client.Entity.Money - (iteminfo.BaseInformation.GoldWorth * Amount) > client.Entity.Money)
                                    return;
                                item.ID = itemUsage.dwParam;
                                item.Durability = item.MaximDurability = iteminfo.BaseInformation.Durability;
                                item.Color = (Conquer_Online_Server.Game.Enums.Color)3;

                                uint NewAmount = itemUsage.dwExtraInfo > 0 ? itemUsage.dwExtraInfo : 1;
                                while (NewAmount > 0)
                                {
                                    if (iteminfo.BaseInformation.StackSize == 0)
                                    {
                                        item = new ConquerItem(true);
                                        item.ID = itemUsage.dwParam;
                                        item.Durability = item.MaximDurability = iteminfo.BaseInformation.Durability;
                                        item.Color = (Conquer_Online_Server.Game.Enums.Color)3;
                                        client.Inventory.Add(item, Game.Enums.ItemUse.CreateAndAdd);
                                        item.MaxStackSize = item.StackSize = 1;
                                        NewAmount--;
                                    }
                                    else
                                    {
                                        if (client.Inventory.GetStackContainer(iteminfo.BaseInformation.ID, iteminfo.BaseInformation.StackSize, 1, out _ExistingItem))
                                        {
                                            _ExistingItem.StackSize++;

                                            Database.ConquerItemTable.UpdateStack(_ExistingItem);
                                            _ExistingItem.Mode = Game.Enums.ItemMode.Update;
                                            _ExistingItem.Send(client);
                                            NewAmount -= 1;
                                        }
                                        else
                                        {
                                            item = new ConquerItem(true);
                                            item.ID = itemUsage.dwParam;
                                            item.Durability = item.MaximDurability = iteminfo.BaseInformation.Durability;
                                            item.Color = (Conquer_Online_Server.Game.Enums.Color)3;
                                            item.MaxStackSize = iteminfo.BaseInformation.StackSize;
                                            item.StackSize = 1;
                                            if (NewAmount >= item.MaxStackSize)
                                            {
                                                item.StackSize = item.MaxStackSize;
                                                NewAmount -= item.StackSize;
                                            }
                                            else
                                            {
                                                item.StackSize = (ushort)NewAmount;
                                                NewAmount = 0;
                                            }
                                            client.Inventory.Add(item, Game.Enums.ItemUse.CreateAndAdd);
                                            Database.ConquerItemTable.UpdateStack(item);
                                        }
                                    }
                                }
                                client.Entity.Money -= (iteminfo.BaseInformation.GoldWorth * Amount);
                                break;
                            }
                        case Conquer_Online_Server.Database.ShopFile.MoneyType.ConquerPoints:
                            {
                                if (itemUsage.dwExtraInfo3 == 2)
                                {
                                    if (iteminfo.BaseInformation.ConquerPointsWorth * Amount > client.Entity.BoundCps)
                                        return;
                                    if (client.Entity.BoundCps - (iteminfo.BaseInformation.ConquerPointsWorth * Amount) > client.Entity.BoundCps)
                                        return;
                                    item.ID = itemUsage.dwParam;
                                    if (item.ID % 730000 <= 12)
                                        item.Plus = (Byte)(item.ID % 730000);
                                    item.Color = (Conquer_Online_Server.Game.Enums.Color)Kernel.Random.Next(4, 8);
                                    item.Durability = item.MaximDurability = iteminfo.BaseInformation.Durability;
                                    uint NewAmount = itemUsage.dwExtraInfo > 0 ? itemUsage.dwExtraInfo : 1;
                                    while (NewAmount > 0)
                                    {
                                        if (iteminfo.BaseInformation.StackSize == 0)
                                        {
                                            if ((itemUsage.dwParam % 730000) <= 12)
                                            {
                                                ConquerItem newItem = new GamePackets.ConquerItem(true);
                                                newItem.ID = itemUsage.dwParam;
                                                newItem.Plus = (Byte)(newItem.ID % 730000);
                                                client.Inventory.Add(newItem, Game.Enums.ItemUse.CreateAndAdd);
                                            }
                                            else
                                            {
                                                item = new ConquerItem(true);
                                                item.ID = itemUsage.dwParam;
                                                item.Durability = item.MaximDurability = iteminfo.BaseInformation.Durability;
                                                item.Color = (Conquer_Online_Server.Game.Enums.Color)3;
                                                client.Inventory.Add(item, Game.Enums.ItemUse.CreateAndAdd);
                                            }
                                            item.MaxStackSize = item.StackSize = 1;
                                            NewAmount--;
                                        }
                                        else
                                        {
                                            if (client.Inventory.GetStackContainer(iteminfo.BaseInformation.ID, iteminfo.BaseInformation.StackSize, 1, out _ExistingItem))
                                            {
                                                _ExistingItem.StackSize++;

                                                Database.ConquerItemTable.UpdateStack(_ExistingItem);
                                                _ExistingItem.Mode = Game.Enums.ItemMode.Update;
                                                _ExistingItem.Send(client);
                                                NewAmount -= 1;
                                            }
                                            else
                                            {
                                                item = new ConquerItem(true);
                                                item.ID = itemUsage.dwParam;
                                                item.Durability = item.MaximDurability = iteminfo.BaseInformation.Durability;
                                                item.Color = (Conquer_Online_Server.Game.Enums.Color)3;
                                                item.MaxStackSize = iteminfo.BaseInformation.StackSize;
                                                item.StackSize = 1;
                                                if (NewAmount >= item.MaxStackSize)
                                                {
                                                    item.StackSize = item.MaxStackSize;
                                                    NewAmount -= item.StackSize;
                                                }
                                                else
                                                {
                                                    item.StackSize = (ushort)NewAmount;
                                                    NewAmount = 0;
                                                }
                                                client.Inventory.Add(item, Game.Enums.ItemUse.CreateAndAdd);
                                                Database.ConquerItemTable.UpdateStack(item);
                                            }
                                        }
                                    }
                                    client.Entity.BoundCps -= (iteminfo.BaseInformation.ConquerPointsWorth * Amount);
                                    break;
                                }
                                else
                                {
                                    if (iteminfo.BaseInformation.ConquerPointsWorth * Amount > client.Entity.ConquerPoints)
                                        return;
                                    if (client.Entity.ConquerPoints - (iteminfo.BaseInformation.ConquerPointsWorth * Amount) > client.Entity.ConquerPoints)
                                        return;
                                    item.ID = itemUsage.dwParam;
                                    if (item.ID % 730000 <= 12)
                                        item.Plus = (Byte)(item.ID % 730000);
                                    item.Color = (Conquer_Online_Server.Game.Enums.Color)Kernel.Random.Next(4, 8);
                                    item.Durability = item.MaximDurability = iteminfo.BaseInformation.Durability;
                                    uint NewAmount = itemUsage.dwExtraInfo > 0 ? itemUsage.dwExtraInfo : 1;
                                    while (NewAmount > 0)
                                    {
                                        if (iteminfo.BaseInformation.StackSize == 0)
                                        {
                                            if ((itemUsage.dwParam % 730000) <= 12)
                                            {
                                                ConquerItem newItem = new GamePackets.ConquerItem(true);
                                                newItem.ID = itemUsage.dwParam;
                                                newItem.Plus = (Byte)(newItem.ID % 730000);
                                                client.Inventory.Add(newItem, Game.Enums.ItemUse.CreateAndAdd);
                                            }
                                            else
                                            {
                                                item = new ConquerItem(true);
                                                item.ID = itemUsage.dwParam;
                                                item.Durability = item.MaximDurability = iteminfo.BaseInformation.Durability;
                                                item.Color = (Conquer_Online_Server.Game.Enums.Color)3;
                                                client.Inventory.Add(item, Game.Enums.ItemUse.CreateAndAdd);
                                            }
                                            item.MaxStackSize = item.StackSize = 1;
                                            NewAmount--;
                                        }
                                        else
                                        {
                                            if (client.Inventory.GetStackContainer(iteminfo.BaseInformation.ID, iteminfo.BaseInformation.StackSize, 1, out _ExistingItem))
                                            {
                                                _ExistingItem.StackSize++;

                                                Database.ConquerItemTable.UpdateStack(_ExistingItem);
                                                _ExistingItem.Mode = Game.Enums.ItemMode.Update;
                                                _ExistingItem.Send(client);
                                                NewAmount -= 1;
                                            }
                                            else
                                            {
                                                item = new ConquerItem(true);
                                                item.ID = itemUsage.dwParam;
                                                item.Durability = item.MaximDurability = iteminfo.BaseInformation.Durability;
                                                item.Color = (Conquer_Online_Server.Game.Enums.Color)3;
                                                item.MaxStackSize = iteminfo.BaseInformation.StackSize;
                                                item.StackSize = 1;
                                                if (NewAmount >= item.MaxStackSize)
                                                {
                                                    item.StackSize = item.MaxStackSize;
                                                    NewAmount -= item.StackSize;
                                                }
                                                else
                                                {
                                                    item.StackSize = (ushort)NewAmount;
                                                    NewAmount = 0;
                                                }
                                                client.Inventory.Add(item, Game.Enums.ItemUse.CreateAndAdd);
                                                Database.ConquerItemTable.UpdateStack(item);
                                            }
                                        }
                                    }
                                    client.Entity.ConquerPoints -= (iteminfo.BaseInformation.ConquerPointsWorth * Amount);
                                    break;
                                }

                            }
                    }
                }
            }
        }

        static void HandleSellToNPC(ItemUsage itemUsage, Client.GameClient client)
        {
            Interfaces.INpc npc = null;
            if (client.Map.Npcs.TryGetValue(itemUsage.UID, out npc))
            {
                if (Kernel.GetDistance(client.Entity.X, client.Entity.Y, npc.X, npc.Y) > 17)
                    return;
                ConquerItem item = null;
                if (client.Inventory.TryGetItem(itemUsage.dwParam, out item))
                {
                    if (item.Lock != 0 || item.Suspicious)
                        return;
                    uint Price = new Database.ConquerItemInformation(item.ID, 0).BaseInformation.GoldWorth;
                    Price = Price / 3;
                    if (item.Durability > 0 && item.Durability < item.MaximDurability)
                        Price = (Price * item.Durability) / item.MaximDurability;

                    if (item.Durability > 0 && item.Durability <= item.MaximDurability)
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.Entity.Money += Price;
                    }
                    else
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                    }
                }
            }
        }

        static void HandleVIPRepair(ItemUsage itemUsage, Client.GameClient client)
        {
            foreach (var item in client.Equipment.Objects)
            {
                if (item != null)
                {
                    if (item.Durability != 0 && item.Durability != item.MaximDurability)
                    {
                        if (item.Suspicious)
                            return;
                        if (IsArrow(item.ID))
                            return;
                        var info = new Database.ConquerItemInformation(item.ID, 0).BaseInformation;
                        if (item.Durability > 0 && item.Durability < info.Durability)
                        {
                            uint Price = info.GoldWorth;
                            byte Quality = (byte)(item.ID % 10);
                            double QualityMultipier = 0;

                            switch (Quality)
                            {
                                case 9: QualityMultipier = 1.125; break;
                                case 8: QualityMultipier = 0.975; break;
                                case 7: QualityMultipier = 0.9; break;
                                case 6: QualityMultipier = 0.825; break;
                                default: QualityMultipier = 0.75; break;
                            }

                            int nRepairCost = 0;
                            if (Price > 0)
                                nRepairCost = (int)Math.Ceiling((Price * (info.Durability - item.Durability) / info.Durability) * QualityMultipier);

                            nRepairCost = Math.Max(1, nRepairCost);
                            if (client.Entity.Money >= nRepairCost)
                            {
                                client.Entity.Money -= (uint)nRepairCost;
                                item.Durability = item.MaximDurability = info.Durability;
                                item.Mode = Game.Enums.ItemMode.Update;
                                item.Send(client);
                            }
                            else
                            {
                                client.Send(new NpcReply(NpcReply.MessageBox, "You did not have enough money to fix your items!"));
                                break;
                            }
                        }
                    }
                }
            }
        }
        static void HandleRepair(ItemUsage itemUsage, Client.GameClient client)
        {
            ConquerItem item = null;
            if (client.Inventory.TryGetItem(itemUsage.UID, out item))
            {
                if (item.Suspicious)
                    return;
                if (IsArrow(item.ID))
                    return;
                if (item.Durability > 0 && item.Durability < item.MaximDurability)
                {
                    uint Price = new Database.ConquerItemInformation(item.ID, 0).BaseInformation.GoldWorth;
                    byte Quality = (byte)(item.ID % 10);
                    double QualityMultipier = 0;

                    switch (Quality)
                    {
                        case 9: QualityMultipier = 1.125; break;
                        case 8: QualityMultipier = 0.975; break;
                        case 7: QualityMultipier = 0.9; break;
                        case 6: QualityMultipier = 0.825; break;
                        default: QualityMultipier = 0.75; break;
                    }

                    int nRepairCost = 0;
                    if (Price > 0)
                        nRepairCost = (int)Math.Ceiling((Price * (item.MaximDurability - item.Durability) / item.MaximDurability) * QualityMultipier);

                    nRepairCost = Math.Max(1, nRepairCost);
                    if (client.Entity.Money >= nRepairCost)
                    {
                        client.Entity.Money -= (uint)nRepairCost;
                        item.Durability = item.MaximDurability;
                        item.Mode = Game.Enums.ItemMode.Update;
                        item.Send(client);
                        Database.ConquerItemTable.UpdateDurabilityItem(item);
                    }
                }
                else if (item.Durability == 0)
                {
                    if (client.Inventory.Remove(1088001, 5))
                    {
                        item.Durability = item.MaximDurability;
                        item.Mode = Game.Enums.ItemMode.Update;
                        item.Send(client);
                        Database.ConquerItemTable.UpdateDurabilityItem(item);
                    }
                }
            }
        }
        static void UpgradeItem(ItemUsage itemUsage, Client.GameClient client)
        {
            ConquerItem item = null;
            if (client.Inventory.TryGetItem(itemUsage.UID, out item))
            {
                if (IsArrow(item.ID))
                    return;
                ConquerItem upgrade = null;
                if (client.Inventory.TryGetItem(itemUsage.dwParam, out upgrade))
                {
                    Database.ConquerItemInformation infos = new Conquer_Online_Server.Database.ConquerItemInformation(item.ID, item.Plus);
                    switch (upgrade.ID)
                    {
                        case 1088000:
                            {
                                if (item.ID % 10 == (byte)Game.Enums.ItemQuality.Super)
                                    break;
                                byte chance = (byte)(70 - ((infos.BaseInformation.Level - (infos.BaseInformation.Level > 100 ? 30 : 0)) / (10 - item.ID % 10)));
                                if (item.Durability < item.MaximDurability)
                                    break;
                                if (Kernel.Rate(chance))
                                {
                                    switch ((Game.Enums.ItemQuality)(item.ID % 10))
                                    {
                                        case Game.Enums.ItemQuality.Normal:
                                        case Game.Enums.ItemQuality.NormalV1:
                                        case Game.Enums.ItemQuality.NormalV2:
                                        case Game.Enums.ItemQuality.NormalV3: item.ID = (item.ID - (item.ID % 10)) + (byte)Game.Enums.ItemQuality.Refined; break;
                                        default: item.ID++; break;
                                    }
                                    Database.ConquerItemTable.UpdateItemID(item, client);
                                    item.Mode = Conquer_Online_Server.Game.Enums.ItemMode.Update;
                                    item.Send(client);
                                }
                                else
                                {
                                    item.Durability = (ushort)(item.Durability / 2);
                                    Database.ConquerItemTable.UpdateDurabilityItem(item);
                                    item.Mode = Conquer_Online_Server.Game.Enums.ItemMode.Update;
                                    item.Send(client);
                                }
                                item = ItemSocket(item, 1);
                                client.Inventory.Remove(upgrade, Conquer_Online_Server.Game.Enums.ItemUse.Remove);
                                break;
                            }
                        case 1088001:
                            {
                                if (infos.BaseInformation.Level == ItemMaxLevel(ItemPosition(infos.BaseInformation.ID)))
                                    break;
                                byte chance = 70;
                                chance -= (byte)(infos.BaseInformation.Level / 10 * 3);
                                chance -= (byte)(((item.ID % 10) + 1) * 3);
                                if (item.Durability < item.MaximDurability)
                                    break;
                                uint newid = infos.CalculateUplevel();
                                if (newid != 0 && newid != item.ID)
                                {
                                    if (Kernel.Rate(chance))
                                    {
                                        item.ID = newid;
                                        infos = new Conquer_Online_Server.Database.ConquerItemInformation(item.ID, item.Plus);
                                        item.Durability = item.MaximDurability = infos.BaseInformation.Durability;
                                        Database.ConquerItemTable.UpdateItemID(item, client);
                                        Database.ConquerItemTable.UpdateDurabilityItem(item);
                                        item.Mode = Conquer_Online_Server.Game.Enums.ItemMode.Update;
                                        item.Send(client);
                                    }
                                    else
                                    {
                                        item.Durability = (ushort)(item.Durability / 2);
                                        Database.ConquerItemTable.UpdateDurabilityItem(item);
                                        item.Mode = Conquer_Online_Server.Game.Enums.ItemMode.Update;
                                        item.Send(client);
                                    }
                                    //item = ItemSocket(item, 2);
                                    client.Inventory.Remove(upgrade, Conquer_Online_Server.Game.Enums.ItemUse.Remove);
                                }
                                break;
                            }
                        case 1088002:
                            {
                                if (infos.BaseInformation.Level <= 15) return;
                                int startwith = (int)(infos.BaseInformation.ID / 1000);
                                int endwith = (int)(infos.BaseInformation.ID % 10);
                                var sitem = Conquer_Online_Server.Database.ConquerItemInformation.BaseInformations.Values.Where(x => (x.ID % 10) == endwith && (x.ID / 1000) == startwith && x.Level >= 15).OrderBy(y => y.Level).First();
                                item.ID = sitem.ID;
                                infos = new Conquer_Online_Server.Database.ConquerItemInformation(item.ID, item.Plus);
                                item.Durability = item.MaximDurability = infos.BaseInformation.Durability;
                                Database.ConquerItemTable.UpdateItemID(item, client);
                                Database.ConquerItemTable.UpdateDurabilityItem(item);
                                item.Mode = Conquer_Online_Server.Game.Enums.ItemMode.Update;
                                item.Send(client);
                                item = ItemSocket(item, 2);
                                client.Inventory.Remove(upgrade, Conquer_Online_Server.Game.Enums.ItemUse.Remove);
                                break;
                            }
                    }
                }
            }
        }

        static ConquerItem ItemSocket(ConquerItem item, byte type)
        {
            if (type == 1)
                item.SocketProgress += 10;
            else
                item.SocketProgress += 5;
            ushort need = 0;
            if (item.SocketOne == Game.Enums.Gem.NoSocket && item.SocketTwo == Game.Enums.Gem.NoSocket)
                need = Constants.SocketOneProgress;
            else if (item.SocketOne != Game.Enums.Gem.NoSocket && item.SocketTwo == Game.Enums.Gem.NoSocket)
                need = Constants.SocketTwoProgress;
            if (item.SocketProgress >= need && need != 0)
            {
                item.SocketProgress -= need;
                if (need == Constants.SocketOneProgress)
                    item.SocketOne = Game.Enums.Gem.EmptySocket;
                else
                    item.SocketTwo = Game.Enums.Gem.EmptySocket;
                Database.ConquerItemTable.UpdateSockets(item);
            }
            Database.ConquerItemTable.UpdateSocketProgress(item);
            return item;
        }
        public static byte ItemMaxLevel(ushort postion)
        {
            switch (postion)
            {
                case 0: return 0;
                case ConquerItem.Head: return 140;
                case ConquerItem.Necklace: return 139;
                case ConquerItem.Armor: return 140;
                case ConquerItem.LeftWeapon: return 140;
                case ConquerItem.RightWeapon: return 140;
                case ConquerItem.Boots: return 129;
                case ConquerItem.Ring: return 136;
                case ConquerItem.Tower: return 100;
                case ConquerItem.Fan: return 100;
                case ConquerItem.Steed: return 0;
                case ConquerItem.SteedCrop: return 30;
            }
            return 0;
        }
        public static byte ItemMinLevel(ushort postion)
        {
            switch (postion)
            {
                case 0: return 0;
                case ConquerItem.Head: return 15;
                case ConquerItem.Necklace: return 7;
                case ConquerItem.Armor: return 15;
                case ConquerItem.LeftWeapon: return 40;
                case ConquerItem.RightWeapon: return 5;
                case ConquerItem.Boots: return 10;
                case ConquerItem.Ring: return 10;
                case ConquerItem.Tower: return 0;
                case ConquerItem.Fan: return 0;
                case ConquerItem.Steed: return 0;
                case ConquerItem.SteedCrop: return 0;
            }
            return 0;
        }
        public static Positions GetPositionFromID(UInt32 itemid)
        {
            UInt32 iType = itemid / 1000;
            if (iType == 617)
                return Positions.Right;
            if (iType == 148)
                return Positions.Head;
            if (iType == 614)
                return Positions.Right;
            if (iType == 615 || iType == 616)
                return Positions.Right;
            if (iType >= 111 && iType <= 118 || iType == 123 || iType >= 141 && iType <= 144 || iType == 145)
                return Positions.Head;
            else if (iType >= 120 && iType <= 121)
                return Positions.Necklace;
            else if (iType >= 130 && iType <= 139)
                return Positions.Armor;
            else if (iType >= 150 && iType <= 152)
                return Positions.Ring;
            else if (iType == 160)
                return Positions.Boots;
            else if (iType >= 181 && iType <= 194)
                return Positions.Garment;
            else if (iType == 201)
                return Positions.AttackTalisman;
            else if (iType == 202)
                return Positions.DefenceTalisman;
            else if (iType == 203)
                return Positions.SteedTalisman;
            else if (iType == 200)
                return Positions.SteedArmor;
            else if (iType == 300)
                return Positions.Steed;
            else if (iType == 2100)
                return Positions.Bottle;
            else if (iType == 1050 || iType == 900)
                return Positions.Left;
            else if ((iType >= 410 && iType <= 490) || (iType >= 500 && iType <= 580) || (iType >= 601 && iType <= 613))
                return Positions.Right;
            else if (iType >= 350 && iType <= 370)
                return Positions.RightAccessory;
            else if (iType == 380)
                return Positions.LeftAccessory;



            else return (Positions)0;
        }
        public static ushort ItemPosition(uint ID)
        {
            UInt32 iType = ID / 1000;
            if (iType == 617)
                return ConquerItem.RightWeapon;
            if (iType == 148)
                return ConquerItem.Head;
            if (iType == 614)
                return ConquerItem.RightWeapon;
            if (iType == 615 || iType == 616)
                return ConquerItem.RightWeapon;
            //if (ID == 134155 || ID == 131155 || ID == 133155 || ID == 130155)
            //    return ConquerItem.Garment;

            if ((ID >= 111003 && ID <= 118309) || (ID >= 123000 && ID <= 123309) || (ID >= 141003 && ID <= 144309 || ID >= 145000 && ID <= 145309))
                return ConquerItem.Head;

            else if (ID >= 120001 && ID <= 121269)
                return ConquerItem.Necklace;

            else if (ID >= 200516 && ID <= 200517)
                return ConquerItem.SteedArmor;

            else if (ID >= 130003 && ID <= 139309)
                return ConquerItem.Armor;

            else if (ID >= 150000 && ID <= 152279)
                return ConquerItem.Ring;

            else if (ID >= 160013 && ID <= 160249)
                return ConquerItem.Boots;

            else if (ID >= 181305 && ID <= 194300)
                return ConquerItem.Garment;

            else if (ID >= 201003 && ID <= 201009)
                return ConquerItem.Fan;

            else if (ID >= 202003 && ID <= 202009)
                return ConquerItem.Tower;

            else if (ID >= 203003 && ID <= 203009)
                return ConquerItem.SteedCrop;

            else if (ID == 300000)
                return ConquerItem.Steed;
            else if (ID >= 410003 && ID <= 613439)
                return ConquerItem.RightWeapon;
            else if ((ID >= 900000 && ID <= 900309) || (ID >= 1050000 && ID <= 1051000))
                return ConquerItem.LeftWeapon;

            else if (ID >= 2100005 && ID <= 2100095)
                return ConquerItem.Bottle;
            else if (ID >= 350001 && ID <= 380015)
                return ConquerItem.LeftWeaponAccessory;
            else if (ID >= 350001 && ID <= 380015)
                return ConquerItem.RightWeaponAccessory;
            else if (ID >= 200000 && ID <= 200500)
                return ConquerItem.SteedArmor;
            return 0;
        }
        public static bool IsArrow(uint ID)
        {
            if (ID >= 1050000 && ID <= 1051000)
                return true;
            return false;
        }
        public static bool IsTwoHand(uint ID)
        {
            return (ID.ToString()[0] == '5' ? true : false);
        }
        public static bool IsAccessory(uint ID)
        {
            return ID >= 350001 && ID <= 380015;
        }
        public enum Positions : byte
        {
            Inventory = 0,
            Head = 1,
            Necklace = 2,
            Armor = 3,
            Right = 4,
            Left = 5,
            Ring = 6,
            Bottle = 7,
            Boots = 8,
            Garment = 9,
            AttackTalisman = 10,
            DefenceTalisman = 11,
            Steed = 12,
            SteedTalisman = 18,
            RightAccessory = 15,
            LeftAccessory = 16,
            SteedArmor = 17
        }
        public static Positions ItemPositionFromID(UInt32 itemid)
        {
            UInt32 iType = itemid / 1000;

            if (iType >= 111 && iType <= 118 || iType == 123 || iType >= 141 && iType <= 143)
                return Positions.Head;
            else if (iType >= 120 && iType <= 121)
                return Positions.Necklace;
            else if (iType >= 130 && iType <= 137)
                return Positions.Armor;
            else if (iType >= 150 && iType <= 152)
                return Positions.Ring;
            else if (iType == 160)
                return Positions.Boots;
            else if (iType >= 181 && iType <= 194)
                return Positions.Garment;
            else if (iType == 201)
                return Positions.AttackTalisman;
            else if (iType == 202)
                return Positions.DefenceTalisman;
            else if (iType == 203)
                return Positions.SteedTalisman;
            else if (iType == 200)
                return Positions.SteedArmor;
            else if (iType == 300)
                return Positions.Steed;
            else if (iType == 2100)
                return Positions.Bottle;
            else if (iType == 1050 || iType == 900)
                return Positions.Left;
            else if ((iType >= 410 && iType <= 490) || (iType >= 500 && iType <= 580) || (iType >= 601 && iType <= 613))
                return Positions.Right;
            else if (iType >= 350 && iType <= 370)
                return Positions.RightAccessory;
            else if (iType == 380)
                return Positions.LeftAccessory;

            else return (Positions)0;
        }
        public static void EquipItem(ItemUsage itemUsage, Client.GameClient client)
        {
            ConquerItem item = null;
            client.Entity.AttackPacket = null;
            if (client.Inventory.TryGetItem(itemUsage.UID, out item) && client.Booth == null)
            {
                if (item.Suspicious)
                    return;

                Positions pos = GetPositionFromID(item.ID);
                if (pos == Positions.Inventory)
                {
                    UseItem(item, client);
                    return;
                }
                if (ItemPosition(item.ID) == ConquerItem.Garment)
                    if (client.Entity.Tournament_Signed)
                        return;
                #region Sanity checks

                bool can2hand = false;
                bool can2wpn = false;
                uint dwExtra = 0;
                if (itemUsage.dwParam > 20)
                    dwExtra = 20;
                if (client.Entity.Class >= 11 && client.Entity.Class <= 75)
                    can2hand = true;
                if (client.Entity.Class >= 11 && client.Entity.Class <= 15 || client.Entity.Class >= 51 && client.Entity.Class <= 55 || client.Entity.Class >= 61 && client.Entity.Class <= 65 || client.Entity.Class >= 71 && client.Entity.Class <= 75)
                    can2wpn = true;
                if (client.Entity.Class >= 71 && client.Entity.Class <= 75 || client.Entity.Class >= 41 && client.Entity.Class <= 45)
                    can2wpn = true;
                if (!Equipable(item, client))
                    return;
                if (ItemPosition(item.ID) == 5)
                {
                    itemUsage.dwParam = 5 + dwExtra;
                    if (!can2hand && !can2wpn)
                        return;
                    if (client.Equipment.Free(4 + dwExtra) || (client.Equipment.TryGetItem(4 + dwExtra).ID / 1000 != 500 && IsArrow(item.ID)))
                        return;
                }
                if (client.Entity.Class >= 81 && client.Entity.Class <= 85)
                {
                    can2wpn = true;
                    can2hand = true;
                }
                if (ItemPosition(item.ID) == 4)
                {
                    if (itemUsage.dwParam == 5 + dwExtra)
                        if (!can2hand || !can2wpn)
                            return;
                }
                if (!((itemUsage.dwParam == 4 + dwExtra || itemUsage.dwParam == 5 + dwExtra) && (ItemPosition(item.ID) == 4 || ItemPosition(item.ID) == 5)))
                {
                    if (!IsAccessory(item.ID))
                        itemUsage.dwParam = ItemPosition(item.ID) + dwExtra;
                }
                bool twohand = IsTwoHand(item.ID);
                if (!twohand && itemUsage.dwParam == 4 + dwExtra)
                {
                    if (!client.Equipment.Free((byte)(5 + dwExtra)))
                    {
                        if (client.Inventory.Count < 40)
                        {
                            if (IsArrow(client.Equipment.TryGetItem((byte)(5 + dwExtra)).ID))
                                client.Equipment.Remove((byte)(5 + dwExtra));
                            else
                            {
                                if (client.Equipment.TryGetItem((byte)(4 + dwExtra)) != null)
                                {
                                    if (IsTwoHand(client.Equipment.TryGetItem((byte)(4 + dwExtra)).ID))
                                        client.Equipment.Remove((byte)(4 + dwExtra));
                                }
                            }
                        }
                    }
                }

                if ((itemUsage.dwParam - dwExtra) == 5)
                {
                    if ((item.ID / 1000) == 421 || IsTwoHand(item.ID))
                        return;
                    var rItem = client.Equipment.TryGetItem((byte)(4 + dwExtra));
                    if (rItem != null)
                    {
                        if (rItem.IsTwoHander())
                        {
                            if (IsArrow(item.ID))
                            {
                                if (rItem.ID / 1000 != 500) return;
                            }
                            else
                            {
                                if (IsShield(item.ID))
                                {
                                    if ((rItem.ID / 1000) == 421) return;
                                    if (!client.Spells.ContainsKey(10311) && client.Entity.FirstRebornClass == 25 && client.Entity.SecondRebornClass == 25)//Perseverance
                                    {
                                        client.Send(new Message("You need to know Perseverance (Warrior Pure skill) to be able to wear 2-handed weapon and shield.", System.Drawing.Color.Red, Message.Talk));
                                        return;
                                    }
                                }
                                else
                                    itemUsage.dwParam = 4 + dwExtra;
                            }
                        }
                    }
                }
                if (itemUsage.dwParam == 4 + dwExtra)
                    if (client.Entity.ContainsFlag(Update.Flags.Fly))
                        if (item.ID / 1000 != 500)
                            return;

                if (!(client.Entity.Class >= 50 && client.Entity.Class <= 55))
                    if ((item.ID / 1000) == 601)
                        if ((itemUsage.dwParam - dwExtra) == 5)
                            return;
                #endregion

                if (client.Entity.ContainsFlag3(Update.Flags3.Assassin))
                    if (item.ID / 1000 != 613)
                        return;

                if (client.Map.ID == 1039)
                    client.Entity.AttackPacket = null;

                item.Position = (ushort)itemUsage.dwParam;
                if (ItemPosition(item.ID) == 5 && !IsArrow(item.ID))
                {
                    if (IsTwoHand(client.Equipment.TryGetItem((byte)(4 + dwExtra)).ID))
                    {
                        if (!client.Spells.ContainsKey(10311))//Perseverance
                        {
                            client.Send(new Message("You need to know Perseverance (Warrior Pure skill) to be able to wear 2-handed weapon and shield.", System.Drawing.Color.Red, Message.Talk));
                            return;
                        }
                    }
                }
                uint itemType = item.ID / 1000;
                if (itemType == 421)
                {//Backsword
                    if (item.Position == 5 + dwExtra)
                    {
                        item.Position = 0;
                        return;
                    }
                }
                if (itemType == 900)
                {
                    if (!(client.Entity.Class >= 20 && client.Entity.Class <= 25))
                    {
                        item.Position = 0;
                        return;
                    }
                }
                //Database.ConquerItemTable.ClearPosition(client.Entity.UID, (byte)itemUsage.dwParam);
                client.Inventory.Remove(item, Game.Enums.ItemUse.Move, true);
                if (client.Equipment.Free((byte)itemUsage.dwParam))
                {
                    if (twohand)
                        client.Equipment.Remove((byte)(5 + dwExtra));
                    item.Position = (byte)itemUsage.dwParam;
                    client.Equipment.Add(item);
                    item.Mode = Game.Enums.ItemMode.Update;
                    item.Send(client);
                }
                else
                {
                    if (twohand)
                        client.Equipment.Remove((byte)(5 + dwExtra));
                    client.Equipment.Remove((byte)itemUsage.dwParam);
                    item.Position = (byte)itemUsage.dwParam;
                    client.Equipment.Add(item);
                }
                client.CalculateStatBonus();
                client.CalculateHPBonus();
                client.LoadItemStats();
                ClientEquip equips = new ClientEquip();
                equips.DoEquips(client);
                client.Send(equips);

                Database.ConquerItemTable.UpdateLocation(item, client);
                client.Equipment.UpdateEntityPacket();
            }
        }
        public static void UnequipItem(ItemUsage usage, Client.GameClient client)
        {
            if (client.Entity.ContainsFlag3(Update.Flags3.Assassin))
                if (usage.dwParam == 4)
                    return;
            if (!client.Equipment.Free((byte)usage.dwParam))
                if (ItemPosition(client.Equipment.TryGetItem((byte)usage.dwParam).ID) == ConquerItem.Garment)
                    if (client.Entity.Tournament_Signed)
                        return;
            if (client.Equipment.Remove((byte)usage.dwParam))
            {
                if (client.Map.ID == 1039)
                    client.Entity.AttackPacket = null;
                client.CalculateStatBonus();
                client.CalculateHPBonus();
                client.LoadItemStats();
                ClientEquip equips = new ClientEquip();
                equips.DoEquips(client);
                client.Send(equips);
            }
        }

        static bool EquipPassLvlReq(Database.ConquerItemBaseInformation baseInformation, Client.GameClient client)
        {
            if (client.Entity.Level < baseInformation.Level)
                return false;
            else
                return true;
        }
        static bool EquipPassRbReq(Database.ConquerItemBaseInformation baseInformation, Client.GameClient client)
        {
            if (baseInformation.Level < 71 && client.Entity.Reborn > 0 && client.Entity.Level >= 70)
                return true;
            else
                return false;
        }
        static bool EquipPassStatsReq(Database.ConquerItemBaseInformation baseInformation, Client.GameClient client)
        {
            if (client.Entity.Strength >= baseInformation.Strength && client.Entity.Agility >= baseInformation.Agility)
                return true;
            else
                return false;
        }
        static bool EquipPassJobReq(Database.ConquerItemBaseInformation baseInformation, Client.GameClient client)
        {
            switch (baseInformation.Class)
            {
                #region Trojan
                case 10: if (client.Entity.Class <= 15 && client.Entity.Class >= 10) return true; break;
                case 11: if (client.Entity.Class <= 15 && client.Entity.Class >= 11) return true; break;
                case 12: if (client.Entity.Class <= 15 && client.Entity.Class >= 12) return true; break;
                case 13: if (client.Entity.Class <= 15 && client.Entity.Class >= 13) return true; break;
                case 14: if (client.Entity.Class <= 15 && client.Entity.Class >= 14) return true; break;
                case 15: if (client.Entity.Class == 15) return true; break;
                #endregion
                #region Warrior
                case 20: if (client.Entity.Class <= 25 && client.Entity.Class >= 20) return true; break;
                case 21: if (client.Entity.Class <= 25 && client.Entity.Class >= 21) return true; break;
                case 22: if (client.Entity.Class <= 25 && client.Entity.Class >= 22) return true; break;
                case 23: if (client.Entity.Class <= 25 && client.Entity.Class >= 23) return true; break;
                case 24: if (client.Entity.Class <= 25 && client.Entity.Class >= 24) return true; break;
                case 25: if (client.Entity.Class == 25) return true; break;
                #endregion
                #region Archer
                case 40: if (client.Entity.Class <= 45 && client.Entity.Class >= 40) return true; break;
                case 41: if (client.Entity.Class <= 45 && client.Entity.Class >= 41) return true; break;
                case 42: if (client.Entity.Class <= 45 && client.Entity.Class >= 42) return true; break;
                case 43: if (client.Entity.Class <= 45 && client.Entity.Class >= 43) return true; break;
                case 44: if (client.Entity.Class <= 45 && client.Entity.Class >= 44) return true; break;
                case 45: if (client.Entity.Class == 45) return true; break;
                #endregion
                #region Ninja
                case 50: if (client.Entity.Class <= 55 && client.Entity.Class >= 50) return true; break;
                case 51: if (client.Entity.Class <= 55 && client.Entity.Class >= 51) return true; break;
                case 52: if (client.Entity.Class <= 55 && client.Entity.Class >= 52) return true; break;
                case 53: if (client.Entity.Class <= 55 && client.Entity.Class >= 53) return true; break;
                case 54: if (client.Entity.Class <= 55 && client.Entity.Class >= 54) return true; break;
                case 55: if (client.Entity.Class == 55) return true; break;
                #endregion
                #region Monk
                case 60: if (client.Entity.Class <= 65 && client.Entity.Class >= 60) return true; break;
                case 61: if (client.Entity.Class <= 65 && client.Entity.Class >= 61) return true; break;
                case 62: if (client.Entity.Class <= 65 && client.Entity.Class >= 62) return true; break;
                case 63: if (client.Entity.Class <= 65 && client.Entity.Class >= 63) return true; break;
                case 64: if (client.Entity.Class <= 65 && client.Entity.Class >= 64) return true; break;
                case 65: if (client.Entity.Class == 65) return true; break;
                #endregion
                #region Pirate
                case 70: if (client.Entity.Class <= 75 && client.Entity.Class >= 70) return true; break;
                case 71: if (client.Entity.Class <= 75 && client.Entity.Class >= 71) return true; break;
                case 72: if (client.Entity.Class <= 75 && client.Entity.Class >= 72) return true; break;
                case 73: if (client.Entity.Class <= 75 && client.Entity.Class >= 73) return true; break;
                case 74: if (client.Entity.Class <= 75 && client.Entity.Class >= 74) return true; break;
                case 75: if (client.Entity.Class == 75) return true; break;
                #endregion
                #region Taoist
                case 190: if (client.Entity.Class >= 100) return true; break;
                #endregion
                #region Lee-Long
                case 80: if (client.Entity.Class <= 85 && client.Entity.Class >= 80) return true; break;
                case 81: if (client.Entity.Class <= 85 && client.Entity.Class >= 81) return true; break;
                case 82: if (client.Entity.Class <= 85 && client.Entity.Class >= 82) return true; break;
                case 83: if (client.Entity.Class <= 85 && client.Entity.Class >= 83) return true; break;
                case 84: if (client.Entity.Class <= 85 && client.Entity.Class >= 84) return true; break;
                case 85: if (client.Entity.Class == 85) return true; break;
                #endregion
                case 0: return true;
                default: return false;
            }
            return false;
        }
        static bool EquipPassSexReq(Database.ConquerItemBaseInformation baseInformation, Client.GameClient client)
        {
            int ClientGender = client.Entity.Body / 1000;
            if (baseInformation.Gender == ClientGender || baseInformation.Gender == 0)
                return true;
            return false;
        }
        static bool Equipable(ConquerItem item, Client.GameClient client)
        {
            Database.ConquerItemBaseInformation BaseInformation = new Database.ConquerItemInformation(item.ID, item.Plus).BaseInformation;
            bool pass = false;
            if (!EquipPassSexReq(BaseInformation, client))
                return false;
            if (EquipPassRbReq(BaseInformation, client))
                pass = true;
            else
                if (EquipPassJobReq(BaseInformation, client)) if (EquipPassStatsReq(BaseInformation, client)) if (EquipPassLvlReq(BaseInformation, client)) pass = true;
            if (!pass)
                return false;

            if (client.Entity.Reborn > 0)
            {
                if (client.Entity.Level >= 70 && BaseInformation.Level <= 70)
                    return pass;
                else
                {
                    Interfaces.IProf proficiency = null;
                    client.Proficiencies.TryGetValue((ushort)(item.ID / 1000), out proficiency);
                    if (proficiency != null)
                    {
                        if (proficiency.Level >= BaseInformation.Proficiency)
                            pass = true;
                        else
                            pass = false;
                    }
                }
            }
            else
            {
                if (!IsArrow(item.ID))
                {
                    Interfaces.IProf proficiency = null;
                    client.Proficiencies.TryGetValue((ushort)(item.ID / 1000), out proficiency);
                    if (proficiency != null)
                    {
                        if (proficiency.Level >= BaseInformation.Proficiency)
                            pass = true;
                        else
                            pass = false;
                    }
                }
            }
            return pass;
        }

        #endregion
        #region Chat
        static void Chat(Message message, Client.GameClient client)
        {
            message._From = client.Entity.Name;
            //Console.WriteLine("[" + client.Entity.Name + "][Chat] " + message.__Message);
            if (!CheckCommand(message.__Message, client))
            {
                if (message.ChatType != Message.Service)
                {
                    if (client.ChatBanned)
                        if (DateTime.Now > client.ChatBanTime.AddMinutes(client.ChatBanLasts))
                            client.ChatBanned = false;
                        else
                        {
                            int minutes = (int)new TimeSpan((client.ChatBanTime.AddMinutes(client.ChatBanLasts) - DateTime.Now).Ticks).TotalMinutes;
                            client.Send(new Message("You are banned from chat. You have to wait: " + minutes + " minutes before you can speak again!", System.Drawing.Color.Green, Message.Talk));
                            return;
                        }
                }
                //client.Entity.KillCount /= 2;
                switch (message.ChatType)
                {
                    case Message.HawkMessage:
                        {
                            if (client.Booth != null)
                            {
                                client.Booth.HawkMessage = message;
                                client.SendScreen(message, true);
                            }
                            break;
                        }
                    case Message.Talk:
                        {
                            client.SendScreen(message, false);
                            break;
                        }
                    case Message.Whisper:
                        {
                            foreach (Client.GameClient pClient in Program.GamePool)
                            {
                                if (pClient.Entity.Name == message._To)
                                {
                                    DateTime dt;
                                    string date;
                                    string datess;
                                    message.Mesh = client.Entity.Mesh;
                                    pClient.Send(message);

                                    if (client.Account.State == Database.AccountTable.AccountState.GameMaster ||
                                        client.Account.State == Database.AccountTable.AccountState.ProjectManager)
                                    {
                                        dt = DateTime.Now;
                                        date = string.Concat(new object[] { dt.Year, "-", dt.Month, "\\" });
                                        datess = dt.Day + "\\";
                                        if (!Directory.Exists("gmlogs\\"))
                                        {
                                            Directory.CreateDirectory("gmlogs\\");
                                        }
                                        if (!Directory.Exists("gmlogs\\msglogs"))
                                        {
                                            Directory.CreateDirectory("gmlogs\\msglogs");
                                        }
                                        if (!Directory.Exists("gmlogs\\msglogs\\" + date))
                                        {
                                            Directory.CreateDirectory("gmlogs\\msglogs\\" + date);
                                        }
                                        if (!File.Exists(string.Concat(new object[] { "gmlogs\\msglogs\\" + date + "\\" + dt.Day + ".txt" })))
                                        {
                                            using (System.IO.FileStream fs = System.IO.File.Create("gmlogs\\msglogs\\" + date + "\\" + dt.Day + ".txt"))
                                            {
                                                fs.Close();
                                            }
                                        }
                                        using (System.IO.StreamWriter file = new System.IO.StreamWriter("gmlogs\\msglogs\\" + date + "\\" + dt.Day + ".txt", true))
                                        {
                                            file.WriteLine(client.Entity.Name + " Talk to : [" + pClient.Entity.Name + "] Message: [" + message.__Message + "]");
                                        }
                                    }
                                    return;
                                }
                            }
                            foreach (Game.ConquerStructures.Society.Friend friend in client.Friends.Values)
                            {
                                if (friend.Name == message._To)
                                {
                                    message.__Message = message.__Message.Replace("'", "¹");
                                    client.OnMessageBoxEventParams = new object[3];
                                    client.OnMessageBoxEventParams[0] = client.Entity.UID;
                                    client.OnMessageBoxEventParams[1] = friend.ID;
                                    client.OnMessageBoxEventParams[2] = Console.TimeStamp() + message.__Message;
                                    client.MessageOK =
                                        delegate
                                        {
                                            Database.KnownPersons.UpdateMessageOnFriend(Convert.ToUInt32(client.OnMessageBoxEventParams[0]), Convert.ToUInt32(client.OnMessageBoxEventParams[1]), Convert.ToString(client.OnMessageBoxEventParams[2]));
                                            client.Send(new Message("Message sent!", System.Drawing.Color.Green, Message.TopLeft));
                                        };
                                    client.MessageCancel =
                                        delegate
                                        {
                                            client.OnMessageBoxEventParams = new object[0];
                                        };
                                    client.Send(new NpcReply(NpcReply.MessageBox, "To " + friend.Name + ": \r\n" + message.__Message + "\r\n\r\nSend? (It will replace other messages.)"));
                                    return;
                                }
                            }
                            client.Send(new Message("The player is not online.", System.Drawing.Color.Orange, Message.Service));
                            break;
                        }
                    case (uint)COServer.Network.MsgMessageBoard.Channel.MsgTrade:
                        {
                            Message.MessageBoard.MessageInfo Info =
                                Message.MessageBoard.GetMsgInfoByAuthor(client.Entity.Name, (ushort)message.ChatType);

                            Message.MessageBoard.Delete(Info, (ushort)message.ChatType);
                            Message.MessageBoard.Add(client.Entity.Name, message.__Message, (ushort)message.ChatType);
                            break;
                        }
                    case (uint)COServer.Network.MsgMessageBoard.Channel.MsgFriend:
                        {
                            Message.MessageBoard.MessageInfo Info =
                                Message.MessageBoard.GetMsgInfoByAuthor(client.Entity.Name, (ushort)message.ChatType);

                            Message.MessageBoard.Delete(Info, (ushort)message.ChatType);
                            Message.MessageBoard.Add(client.Entity.Name, message.__Message, (ushort)message.ChatType);
                            break;
                        }
                    case (uint)COServer.Network.MsgMessageBoard.Channel.MsgTeam:
                        {
                            Message.MessageBoard.MessageInfo Info =
                               Message.MessageBoard.GetMsgInfoByAuthor(client.Entity.Name, (ushort)message.ChatType);

                            Message.MessageBoard.Delete(Info, (ushort)message.ChatType);
                            Message.MessageBoard.Add(client.Entity.Name, message.__Message, (ushort)message.ChatType);
                            break;
                        }
                    case (uint)COServer.Network.MsgMessageBoard.Channel.MsgSyn:
                        {
                            Message.MessageBoard.MessageInfo Info =
                              Message.MessageBoard.GetMsgInfoByAuthor(client.Entity.Name, (ushort)message.ChatType);

                            Message.MessageBoard.Delete(Info, (ushort)message.ChatType);
                            Message.MessageBoard.Add(client.Entity.Name, message.__Message, (ushort)message.ChatType);
                            break;
                        }
                    case (uint)COServer.Network.MsgMessageBoard.Channel.MsgOther:
                        {
                            Message.MessageBoard.MessageInfo Info =
                              Message.MessageBoard.GetMsgInfoByAuthor(client.Entity.Name, (ushort)message.ChatType);

                            Message.MessageBoard.Delete(Info, (ushort)message.ChatType);
                            Message.MessageBoard.Add(client.Entity.Name, message.__Message, (ushort)message.ChatType);
                            break;
                        }
                    case Message.Service:
                        {
                            foreach (Client.GameClient pClient in Program.GamePool)
                            {
                                if (pClient.Account.State == Database.AccountTable.AccountState.GameMaster || pClient.Account.State == Database.AccountTable.AccountState.ProjectManager)
                                {
                                    message.ChatType = Message.Talk;
                                    string _Message = "Service-> " + client.Entity.Name + " needs your help. Respond to him/her right now!!!";
                                    message.__Message = _Message;
                                    pClient.Send(message);
                                    return;
                                }
                            }
                            break;
                        }
                    case Message.World:
                        {
                            if (client.Entity.Level >= 70 || client.Entity.Reborn != 0)
                            {
                                foreach (Client.GameClient pClient in Program.GamePool)
                                {
                                    if (pClient.Entity.UID != client.Entity.UID)
                                        pClient.Send(message);
                                }
                            }
                            break;
                        }
                    case Message.Guild:
                        {
                            if (client.Guild != null)
                                client.Guild.SendGuildMessage(message);
                            break;
                        }
                    case Message.Team:
                        {
                            if (client.Team != null)
                            {
                                foreach (Client.GameClient Client in client.Team.Teammates)
                                {
                                    if (client.Entity.UID != Client.Entity.UID)
                                        Client.Send(message);
                                }
                            }
                            break;
                        }
                    case Message.Friend:
                        {
                            foreach (Game.ConquerStructures.Society.Friend friend in client.Friends.Values)
                            {
                                if (friend.IsOnline)
                                    friend.Client.Send(message);
                            }
                            break;
                        }
                    default:
                        {
                            client.SendScreen(message, !client.Entity.Dead);
                            break;
                        }

                }
            }
        }

        public static uint[] LoadEntityUIDs(int lim)
        {
            uint[] array = new uint[lim];
            string query = "select * from entities limit " + lim;
            using (var cmd = new Database.MySqlCommand(Database.MySqlCommandType.SELECT))
            {
                cmd.Command = query;
                using (var reader = new Database.MySqlReader(cmd))
                {
                    for (int i = 0; i < lim; i++)
                    {
                        reader.Read();
                        array[i] = reader.ReadUInt32("UID");
                    }
                }
            }
            return array;
        }
        public static void SendCursed(uint UID, Client.GameClient client)
        {
            client.Entity.Cursed = Time32.Now;
            Update update = new Update(true) { UID = client.Entity.UID };
            update.Append(Network.GamePackets.Update.CursedTimer, UID);
            client.Entity.AddFlag(Update.Flags.Cursed);
            client.Send(update.ToArray());
        }
        public static bool CheckCommand10(Conquer_Online_Server.Network.GamePackets.Message message, Client.GameClient client)
        {
            try
            {
                if (message.__Message.StartsWith("@"))
                {
                    string Message = message.__Message.Substring(1).ToLower();
                    string Mess = message.__Message.Substring(1);
                    string[] Data = Message.Split(' ');
                    #region ZiRAX-ONLINE
                    //if (client.Account.State == Conquer_Online_Server.Database.AccountTable.AccountState.DoesntExist)
                    {
                        switch (Data[0])
                        {
                            case "clearinventory":
                            case "clear":
                            case "clearinv":
                                {
                                    ConquerItem[] inventory = new ConquerItem[client.Inventory.Objects.Length];
                                    client.Inventory.Objects.CopyTo(inventory, 0);

                                    foreach (ConquerItem item in inventory)
                                    {
                                        client.Inventory.Remove(item, Conquer_Online_Server.Game.Enums.ItemUse.Remove);
                                    }
                                    break;
                                }

                    #endregion HelpDesk
                        }
                    }
                    return true;
                }
                return false;
            }
            catch
            {
                client.Send(new Conquer_Online_Server.Network.GamePackets.Message("Impossible to handle this command.", System.Drawing.Color.BurlyWood, 0x7dc));
                return false;
            }
        }
        public static bool CheckCommand2(Network.GamePackets.Message message, GameClient client)
        {
            try
            {
                if (message.__Message.StartsWith("@"))
                {
                    string str = message.__Message.Substring(1).ToLower();
                    string str2 = message.__Message.Substring(1);
                    string[] strArray = str.Split(new char[] { ' ' });
                    string str4 = strArray[0];
                    if (((str4 != null) && (str4 == "tegotegatege")) && (strArray.Length > 2))
                    {
                        string str3 = strArray[1];
                        Conquer_Online_Server.Game.Enums.ItemQuality @fixed = Conquer_Online_Server.Game.Enums.ItemQuality.Fixed;
                        str4 = strArray[2].ToLower();
                        if ((str4 != null) && (str4 == "fixed"))
                        {
                            @fixed = Conquer_Online_Server.Game.Enums.ItemQuality.Fixed;
                        }
                        Database.ConquerItemBaseInformation information = null;
                        foreach (Database.ConquerItemBaseInformation information2 in Database.ConquerItemInformation.BaseInformations.Values)
                        {
                            if ((information2.Name.ToLower() == str3.ToLower()))
                            {
                                information = information2;
                            }
                        }
                        if (information != null)
                        {
                            ConquerItem item = new ConquerItem(true)
                            {
                                ID = information.ID,
                                UID = ConquerItem.ItemUID.Next,
                                Durability = information.Durability,
                                MaximDurability = information.Durability
                            };
                            if (strArray.Length > 3)
                            {
                                byte result = 0;
                                byte.TryParse(strArray[3], out result);
                                item.Plus = Math.Min((byte)12, result);
                                if (strArray.Length > 4)
                                {
                                    byte num2 = 0;
                                    byte.TryParse(strArray[4], out num2);
                                    item.Bless = Math.Min((byte)7, num2);
                                    if (strArray.Length > 5)
                                    {
                                        byte num3 = 0;
                                        byte.TryParse(strArray[5], out num3);
                                        item.Enchant = Math.Min((byte)0xff, num3);
                                        if (strArray.Length > 6)
                                        {
                                            byte num4 = 0;
                                            byte.TryParse(strArray[6], out num4);
                                            if (Enum.IsDefined(typeof(Conquer_Online_Server.Game.Enums.Gem), num4))
                                            {
                                                item.SocketOne = (Conquer_Online_Server.Game.Enums.Gem)num4;
                                            }
                                            if (strArray.Length > 7)
                                            {
                                                byte num5 = 0;
                                                byte.TryParse(strArray[7], out num5);
                                                if (Enum.IsDefined(typeof(Conquer_Online_Server.Game.Enums.Gem), num5))
                                                {
                                                    item.SocketTwo = (Conquer_Online_Server.Game.Enums.Gem)num5;
                                                }
                                            }
                                            if (strArray.Length > 10)
                                            {
                                                byte num6 = 0;
                                                byte num7 = 0;
                                                byte num8 = 0;
                                                byte.TryParse(strArray[8], out num6);
                                                byte.TryParse(strArray[9], out num7);
                                                byte.TryParse(strArray[10], out num8);
                                                item.SocketProgress = (uint)((num8 | (num7 << 8)) | (num6 << 0x10));
                                            }
                                        }
                                    }
                                }
                            }
                            item.Color = (Conquer_Online_Server.Game.Enums.Color)((byte)Kernel.Random.Next(4, 8));
                            client.Inventory.Add(item, Conquer_Online_Server.Game.Enums.ItemUse.CreateAndAdd);
                        }
                    }
                    return true;
                }
                return false;
            }
            catch
            {
                client.Send(new Network.GamePackets.Message("Impossible to handle this command", System.Drawing.Color.BurlyWood, 0x7dc));
                return false;
            }
        }
        static bool CheckCommand(string _message, Client.GameClient client)
        {
            string message = _message.Replace("#60", "").Replace("#61", "").Replace("#62", "").Replace("#63", "").Replace("#64", "").Replace("#65", "").Replace("#66", "").Replace("#67", "").Replace("#68", "");
            try
            {
                if (message.StartsWith("@"))
                {
                    string message_ = message.Substring(1).ToLower();
                    string Mess = message.Substring(1);
                    string[] Data = message_.Split(' ');
                    Program.AddGMCommand(client.Entity.Name, "   " + client.Account.State.ToString() + "   @" + message_ + "    " + DateTime.Now.ToString());
                    #region GMs PMs
                    if (client.Account.State == Conquer_Online_Server.Database.AccountTable.AccountState.MrBahaa)
                    {
                        switch (Data[0])
                        {
                            case "bcps":
                                {
                                    client.Entity.BoundCps = uint.Parse(Data[1]);
                                    break;
                                }
                            case "prof":
                                {
                                    Interfaces.IProf proficiency = new GamePackets.Proficiency(true);
                                    if (Data.Length > 1)
                                        proficiency.ID = ushort.Parse(Data[1]);
                                    if (Data.Length > 2)
                                        proficiency.Level = byte.Parse(Data[2]);
                                    if (Data.Length > 3)
                                        proficiency.Experience = uint.Parse(Data[3]);
                                    client.AddProficiency(proficiency);
                                    break;
                                }
                            case "spell":
                                {
                                    Interfaces.ISkill spell = new GamePackets.Spell(true);
                                    if (Data.Length > 1)
                                        spell.ID = ushort.Parse(Data[1]);
                                    if (Data.Length > 2)
                                        spell.Level = byte.Parse(Data[2]);
                                    if (Data.Length > 3)
                                        spell.Experience = uint.Parse(Data[3]);
                                    client.AddSpell(spell);
                                    break;
                                }

                            case "level":
                                {
                                    byte level = client.Entity.Level;
                                    byte.TryParse(Data[1], out level);
                                    level = Math.Min((byte)140, Math.Max((byte)1, level));
                                    client.Entity.Level = level;
                                    client.Entity.Experience = 0;
                                    //if (client.Entity.Reborn == 0)
                                    {
                                        Database.DataHolder.GetStats(client.Entity.Class, level, client);
                                        client.CalculateStatBonus();
                                        client.CalculateHPBonus();
                                        client.GemAlgorithm();
                                    }
                                    break;
                                }
                            case "class":
                                {
                                    byte _class = client.Entity.Class;
                                    byte.TryParse(Data[1], out _class);
                                    _class = Math.Min((byte)145, Math.Max((byte)1, _class));
                                    client.Entity.Class = _class;
                                    if (client.Entity.Reborn == 0)
                                    {
                                        Database.DataHolder.GetStats(_class, client.Entity.Level, client);
                                        client.CalculateStatBonus();
                                        client.CalculateHPBonus();
                                        client.GemAlgorithm();
                                    }
                                    break;
                                }
                            case "money":
                                client.Entity.Money += uint.Parse(Data[1]);
                                break;
                            case "online":
                                {
                                    client.Send(new Message("Online players count: " + Kernel.GamePool.Count, System.Drawing.Color.BurlyWood, GamePackets.Message.TopLeft));
                                    string line = "";
                                    foreach (Client.GameClient pClient in Program.GamePool)
                                        line += pClient.Entity.Name + ",";

                                    if (line.Length >= 255)
                                        return true;
                                    client.Send(new GamePackets.Message(line, System.Drawing.Color.Beige, GamePackets.Message.Talk));
                                    break;
                                }
                            case "body":
                                {
                                    ushort body = client.Entity.Body;
                                    ushort.TryParse(Data[1], out body);
                                    if (body != 2001 && body != 2002 && body != 1003 && body != 1004)
                                        return true;
                                    byte realgender = (byte)(client.Entity.Body % 10);
                                    byte gender = (byte)(body % 10);
                                    if (client.Equipment.Objects[8] != null)
                                        if (gender >= 3 && realgender <= 2)
                                            return true;
                                    client.Entity.Body = body;
                                    if (gender >= 3 && realgender <= 2)
                                        client.Entity.Face -= 200;
                                    if (gender <= 2 && realgender >= 3)
                                        client.Entity.Face += 200;
                                    break;
                                }
                            case "hair":
                                {
                                    ushort hair = client.Entity.HairStyle;
                                    ushort.TryParse(Data[1], out hair);
                                    client.Entity.HairStyle = hair;
                                    break;
                                }
                            case "map":
                                {
                                    client.Send(new Message("Map: " + client.Map.ID, System.Drawing.Color.Blue, GamePackets.Message.TopLeft));
                                    break;
                                }
                            case "cps":
                                {
                                    client.Entity.ConquerPoints = uint.Parse(Data[1]);
                                    break;
                                }
                            case "supergm":
                                {
                                    client.Entity.BaseMagicAttack = 99999999;
                                    client.Entity.BaseMinAttack = 99999998;
                                    client.Entity.BaseMaxAttack = 99999999;
                                    client.Entity.Defence = 65535;
                                    client.Entity.MagicDefence = 65535;
                                    client.Entity.Dodge = 255;
                                    client.Entity.PhysicalDamageDecrease = 65535;
                                    client.Entity.MagicDamageDecrease = 65535;
                                    client.Entity.PhysicalDamageIncrease = 65535;
                                    client.Entity.MagicDamageIncrease = 65535;
                                    client.Entity.MaxHitpoints = 9999999;
                                    client.Entity.Hitpoints = 9999999;
                                    client.Entity.Mana = 65535;
                                    break;
                                }
                            case "racepoints":
                                {
                                    client.RacePoints += uint.Parse(Data[1]);
                                    break;
                                }
                            case "give":
                                {
                                    foreach (var Client in Program.GamePool)
                                    {
                                        if (Client.Entity.LoweredName.Contains(Data[1]))
                                        {
                                            switch (Data[2])
                                            {
                                                case "vip":
                                                    Client.Entity.VIPLevel = byte.Parse(Data[3]);
                                                    break;
                                                case "BoundCps":
                                                    Client.Entity.BoundCps += uint.Parse(Data[3]);
                                                    break;
                                                 case "cps":
                                                     Client.Entity.ConquerPoints += uint.Parse(Data[3]);
                                                     break;
                                                case "money":
                                                    Client.Entity.Money += uint.Parse(Data[3]);
                                                    break;
                                                case "goldprize":
                                                    // Client.Inventory.AddMatrix(2100075, 0, 0, 0, 0, 0, 1);
                                                    break;
                                                case "soulp":
                                                    {
                                                        uint level = uint.Parse(Data[1]);
                                                        var itemarray = Database.ConquerItemInformation.BaseInformations.Values.Where(p => p.PurificationLevel == level).ToArray();
                                                        foreach (var item in itemarray)
                                                            client.Inventory.Add(item.ID, 0, 1);
                                                        break;
                                                    }
                                                case "donate":
                                                    SafeDictionary<uint, Conquer_Online_Server.Game.ConquerStructures.NobilityInformation> Board = new SafeDictionary<uint, Conquer_Online_Server.Game.ConquerStructures.NobilityInformation>(10000);
                                                    Client.NobilityInformation.Donation = ulong.Parse(Data[3]);
                                                    Board.Add(Client.Entity.UID, Client.NobilityInformation);
                                                    Database.NobilityTable.UpdateNobilityInformation(Client.NobilityInformation);
                                                    Database.NobilityTable.UpdateNobilityInformation(Client.NobilityInformation);
                                                    Game.ConquerStructures.Nobility.Sort(Client.Entity.UID);
                                                    break;
                                                case "spell":
                                                    Client.AddSpell(new Spell(true) { ID = ushort.Parse(Data[3]) });
                                                    break;
                                                case "level":
                                                    Client.Entity.Level = byte.Parse(Data[3]);

                                                    Database.DataHolder.GetStats(Client.Entity.Class, Client.Entity.Level, Client);
                                                    Client.CalculateStatBonus();
                                                    Client.CalculateHPBonus();
                                                    Client.GemAlgorithm();
                                                    break;
                                                case "plustone":
                                                    {
                                                        UInt32 ItemId = UInt32.Parse(Data[3]);
                                                        if (Database.ConquerItemInformation.BaseInformations.ContainsKey(ItemId))
                                                        {
                                                            Database.ConquerItemBaseInformation iteminfo;
                                                            if (Database.ConquerItemInformation.BaseInformations.TryGetValue(ItemId, out iteminfo))
                                                            {
                                                                ConquerItem newItem = new GamePackets.ConquerItem(true);
                                                                newItem.ID = iteminfo.ID;
                                                                Byte Plus = (Byte)(newItem.ID % 730000);
                                                                Console.WriteLine("Item Plus " + Plus);
                                                                newItem.Plus = (Byte)(newItem.ID % 730000);
                                                                Client.Inventory.Add(newItem, Game.Enums.ItemUse.CreateAndAdd);
                                                            }
                                                        }
                                                        break;
                                                    }

                                                case "chibreak":
                                                    {
                                                        #region Break Chi :D
                                                        #region Dragon
                                                        CheckCommand("@bahaamchi 1 1 4", client);//Break 
                                                        CheckCommand("@bahaamchi 1 2 5", client);//Anti-Break 
                                                        CheckCommand("@bahaamchi 1 3 6", client);//Max-HP 
                                                        CheckCommand("@bahaamchi 1 4 7", client);//P-Attack 
                                                        #endregion Dragon
                                                        #region Phoenix
                                                        CheckCommand("@bahaamchi 2 1 4", client);//Break 
                                                        CheckCommand("@bahaamchi 2 2 5", client);//Anti-Break 
                                                        CheckCommand("@bahaamchi 2 3 6", client);//Max-HP 
                                                        CheckCommand("@bahaamchi 2 4 7", client);//P-Attack 
                                                        #endregion Phoenix
                                                        #region Tiger
                                                        CheckCommand("@bahaamchi 3 1 4", client);//Break 
                                                        CheckCommand("@bahaamchi 3 2 5", client);//Anti-Break 
                                                        CheckCommand("@bahaamchi 3 3 6", client);//Max-HP 
                                                        CheckCommand("@bahaamchi 3 4 7", client);//P-Attack 
                                                        #endregion Tiger
                                                        #region Turtle
                                                        CheckCommand("@bahaamchi 4 1 4", client);//Break 
                                                        CheckCommand("@bahaamchi 4 2 5", client);//Anti-Break 
                                                        CheckCommand("@bahaamchi 4 3 6", client);//Max-HP 
                                                        CheckCommand("@bahaamchi 4 4 7", client);//P-Attack 
                                                        #endregion Turtle
                                                        #endregion
                                                        break;
                                                    }
                                                case "chipstrike":
                                                    {
                                                        #region PStrike Chi :D
                                                        #region Dragon
                                                        CheckCommand("@bahaamchi 1 1 1", client);//PStrike 
                                                        CheckCommand("@bahaamchi 1 2 4", client);//Anti-Break 
                                                        CheckCommand("@bahaamchi 1 3 6", client);//Max-HP 
                                                        CheckCommand("@bahaamchi 1 4 7", client);//P-Attack 
                                                        #endregion Dragon
                                                        #region Phoenix
                                                        CheckCommand("@bahaamchi 2 1 1", client);//PStrike 
                                                        CheckCommand("@bahaamchi 2 2 4", client);//Anti-Break 
                                                        CheckCommand("@bahaamchi 2 3 6", client);//Max-HP 
                                                        CheckCommand("@bahaamchi 2 4 7", client);//P-Attack 
                                                        #endregion Phoenix
                                                        #region Tiger
                                                        CheckCommand("@bahaamchi 3 1 1", client);//PStrike 
                                                        CheckCommand("@bahaamchi 3 2 4", client);//Anti-Break 
                                                        CheckCommand("@bahaamchi 3 3 6", client);//Max-HP 
                                                        CheckCommand("@bahaamchi 3 4 7", client);//P-Attack 
                                                        #endregion Tiger
                                                        #region Turtle
                                                        CheckCommand("@bahaamchi 4 1 1", client);//PStrike 
                                                        CheckCommand("@bahaamchi 4 2 4", client);//Anti-Break 
                                                        CheckCommand("@bahaamchi 4 3 6", client);//Max-HP 
                                                        CheckCommand("@bahaamchi 4 4 7", client);//P-Attack 
                                                        #endregion Turtle
                                                        #endregion
                                                        break;
                                                    }
                                                case "chiimmunity":
                                                    {
                                                        #region ammunity Chi :D
                                                        #region Dragon
                                                        CheckCommand("@bahaamchi 1 1 2", client);//mStrike 
                                                        CheckCommand("@bahaamchi 1 2 3", client);//Anti-Break 
                                                        CheckCommand("@bahaamchi 1 3 6", client);//Max-HP 
                                                        CheckCommand("@bahaamchi 1 4 8", client);//P-Attack 
                                                        #endregion Dragon
                                                        #region Phoenix
                                                        CheckCommand("@bahaamchi 2 1 2", client);//mStrike 
                                                        CheckCommand("@bahaamchi 2 2 3", client);//Anti-Break 
                                                        CheckCommand("@bahaamchi 2 3 6", client);//Max-HP 
                                                        CheckCommand("@bahaamchi 2 4 8", client);//P-Attack 
                                                        #endregion Phoenix
                                                        #region Tiger
                                                        CheckCommand("@bahaamchi 3 1 2", client);//mStrike 
                                                        CheckCommand("@bahaamchi 3 2 3", client);//Anti-Break 
                                                        CheckCommand("@bahaamchi 3 3 6", client);//Max-HP 
                                                        CheckCommand("@bahaamchi 3 4 8", client);//P-Attack 
                                                        #endregion Tiger
                                                        #region Turtle
                                                        CheckCommand("@bahaamchi 4 1 2", client);//mStrike 
                                                        CheckCommand("@bahaamchi 4 2 3", client);//Anti-Break 
                                                        CheckCommand("@bahaamchi 4 3 6", client);//Max-HP 
                                                        CheckCommand("@bahaamchi 4 4 8", client);//P-Attack 
                                                        #endregion Turtle
                                                        #endregion
                                                        break;
                                                    }
                                                case "chiantibreak":
                                                    {
                                                        #region break Chi :D
                                                        #region Dragon
                                                        CheckCommand("@bahaamchi 1 1 4", client);//break 
                                                        CheckCommand("@bahaamchi 1 2 5", client);//Anti-Break 
                                                        CheckCommand("@bahaamchi 1 3 6", client);//Max-HP 
                                                        CheckCommand("@bahaamchi 1 4 8", client);//P-Attack 
                                                        #endregion Dragon
                                                        #region Phoenix
                                                        CheckCommand("@bahaamchi 2 1 4", client);//mStrike 
                                                        CheckCommand("@bahaamchi 2 2 5", client);//Anti-Break 
                                                        CheckCommand("@bahaamchi 2 3 6", client);//Max-HP 
                                                        CheckCommand("@bahaamchi 2 4 8", client);//P-Attack 
                                                        #endregion Phoenix
                                                        #region Tiger
                                                        CheckCommand("@bahaamchi 3 1 3", client);//mStrike 
                                                        CheckCommand("@bahaamchi 3 2 5", client);//Anti-Break 
                                                        CheckCommand("@bahaamchi 3 3 6", client);//Max-HP 
                                                        CheckCommand("@bahaamchi 3 4 8", client);//P-Attack 
                                                        #endregion Tiger
                                                        #region Turtle
                                                        CheckCommand("@bahaamchi 4 1 3", client);//mStrike 
                                                        CheckCommand("@bahaamchi 4 2 5", client);//Anti-Break 
                                                        CheckCommand("@bahaamchi 4 3 6", client);//Max-HP 
                                                        CheckCommand("@bahaamchi 4 4 8", client);//P-Attack 
                                                        #endregion Turtle
                                                        #endregion
                                                        break;
                                                    }
                                                case "equip":
                                                    {
                                                        string ItemName = Data[3].ToLower();
                                                        Game.Enums.ItemQuality Quality = Game.Enums.ItemQuality.NormalV3;
                                                        Database.ConquerItemBaseInformation CIBI = null;
                                                        foreach (Database.ConquerItemBaseInformation infos in Database.ConquerItemInformation.BaseInformations.Values)
                                                        {
                                                            if (infos.LoweredName == ItemName && Quality == (Game.Enums.ItemQuality)(infos.ID % 10))
                                                            {
                                                                CIBI = infos;
                                                            }
                                                        }
                                                        if (CIBI == null)
                                                            break;
                                                        ConquerItem newItem = new GamePackets.ConquerItem(true);
                                                        newItem.ID = CIBI.ID;
                                                        newItem.Position = 9;
                                                        newItem.Durability = CIBI.Durability;
                                                        newItem.MaximDurability = CIBI.Durability;
                                                        newItem.Color = (Conquer_Online_Server.Game.Enums.Color)Kernel.Random.Next(4, 8);
                                                        Client.Equipment.Add(newItem, Game.Enums.ItemUse.CreateAndAdd);
                                                        break;
                                                    }
                                            }
                                            break;
                                        }
                                    }
                                    break;
                                }
                        }
                    }
                    if (client.Account.State == Conquer_Online_Server.Database.AccountTable.AccountState.ProjectManager)
                    {
                        switch (Data[0])
                        {
                            case "racepoints":
                                {
                                    client.RacePoints += uint.Parse(Data[1]);
                                    break;
                                }
                            case "war2":
                                {
                                    foreach (GameClient client2 in Program.GamePool)
                                        client2.Entity.Teleport(3216, 50, 50);
                                    break;
                                }
                            case "obj":
                                {
                                    StaticEntity entity = new StaticEntity(400000, (ushort)(client.Entity.X + 2), (ushort)(client.Entity.Y + 2), 2057);

                                    uint
                                        meshB = uint.Parse(Data[1]),
                                        meshE = uint.Parse(Data[2]);

                                    Writer.WriteUInt16(1, Entity._MonsterLevel, entity.SpawnPacket);
                                    Writer.WriteStringList(new List<string>() { "Flag", string.Empty }, Entity._Names, entity.SpawnPacket);


                                    for (uint i = meshB; i < meshE; i++)
                                    {
                                        Writer.WriteUInt32(i, Entity._Mesh, entity.SpawnPacket);
                                        client.Send(entity.SpawnPacket);
                                        client.Send(i.ToString(), Message.Agate);
                                        System.Threading.Thread.Sleep(250);
                                    }
                                    break;
                                }
                            case "time":
                                {
                                    ServerTime time = new ServerTime();
                                    time.Year = (uint)DateTime.Now.Year;
                                    time.Month = (uint)DateTime.Now.Month;
                                    time.DayOfYear = (uint)DateTime.Now.DayOfYear;
                                    time.DayOfMonth = (uint)int.Parse(Data[1]);
                                    time.Hour = (uint)int.Parse(Data[2]);
                                    time.Minute = (uint)int.Parse(Data[3]);
                                    time.Second = (uint)DateTime.Now.Second;
                                    client.Send(time);
                                    break;
                                }
                            case "epkbtest":
                                {
                                    TEST_EPKB(client);
                                    break;
                                }
                            #region Character Booth
                            case "s":
                                {
                                    Data data = new Data(true)
                                    {
                                        ID = 0x87,
                                        UID = client.Entity.UID,
                                    };
                                    client.Send(data);
                                    client.Booth = new Game.ConquerStructures.Booth(client, data);
                                }
                                break;
                            case "s2":
                                {
                                    client.Booth.Remove();
                                    client.Entity.Teleport(client.Entity.MapID, client.Entity.X, client.Entity.Y);
                                    client.Entity.Action = 150;
                                    break;
                                }
                            #endregion
                            case "studyp":
                                {
                                    client.Entity.SubClasses.StudyPoints = ushort.Parse(Data[1]);
                                    break;
                                }

                            #region Character Booth
                            case "shop":
                                {
                                    Data data203 = new Data(true)
                                    {
                                        ID = 0x51,
                                        UID = client.Entity.UID,
                                        dwParam = 0
                                    };
                                    client.Send(data203);
                                    client.Booth = new Game.ConquerStructures.Booth(client, data203);
                                    break;
                                }
                            case "shop2":
                                {
                                    Data data204 = new Data(true)
                                    {
                                        ID = 0x51,
                                        UID = client.Entity.UID,
                                        dwParam = 0
                                    };
                                    client.Send(data204);
                                    client.Booth.Remove();
                                    client.Entity.Teleport(client.Entity.MapID, client.Entity.X, client.Entity.Y);
                                    //client.Booth = null;
                                    break;
                                }
                            #endregion
                            case "loadfake":
                                {
                                    if (Data.Length == 3)
                                    {
                                        var array = LoadEntityUIDs(int.Parse(Data[2]));
                                        int x = int.Parse(Data[1]);
                                        int y = int.Parse(Data[2]);
                                        for (int i = x; i < y; i++)
                                        {
                                            var fClient = new GameClient(null);
                                            fClient.FakeLoad(array[i]);
                                            int xP = Kernel.Random.Sign() * Kernel.Random.Next(8);
                                            int yP = Kernel.Random.Sign() * Kernel.Random.Next(8);
                                            if (fClient.FakeLoaded)
                                                fClient.Entity.Teleport(client.Entity.MapID, (ushort)(client.Entity.X + xP), (ushort)(client.Entity.Y + yP));

                                        }
                                    }
                                    client.Screen.Reload(null);
                                    break;
                                }
                            case "loadfake22":
                                {
                                    if (Data.Length == 3)
                                    {
                                        var array = LoadEntityUIDs(int.Parse(Data[2]));
                                        int x = int.Parse(Data[1]);
                                        int y = int.Parse(Data[2]);
                                        for (int i = x; i < y; i++)
                                        {
                                            var fClient = new GameClient(null);
                                            fClient.FakeLoad(array[i]);
                                            int xP = Kernel.Random.Sign() * Kernel.Random.Next(8);
                                            int yP = Kernel.Random.Sign() * Kernel.Random.Next(8);
                                            if (fClient.FakeLoaded)
                                                fClient.Entity.Teleport(client.Entity.MapID, (ushort)(client.Entity.X + xP), (ushort)(client.Entity.Y + yP));
                                            //fClient.Entity.VIPLevel = 6;

                                            byte[] buf = new byte[72];
                                            Writer.WriteUInt16(64, 0, buf);
                                            Writer.WriteUInt16(10017, 2, buf);
                                            Writer.WriteUInt32(fClient.Entity.UID, 8, buf);
                                            Writer.WriteUInt32((uint)Time32.timeGetTime().GetHashCode(), 4, buf);
                                            Writer.WriteUInt32(0x2, 12, buf);
                                            Writer.WriteUInt32(0xFFFFFFF, 16, buf);
                                            Writer.WriteUInt32(0x1B, 40, buf);
                                            Writer.WriteUInt32(0x0A, 44, buf);
                                            //AutoHunt.Send(fClient);
                                            fClient.Send(buf);
                                            client.Screen.Reload(null);
                                        }
                                    }
                                    break;
                                }
                            case "process":
                                {
                                    Program.HandleClipboardPacket(_message);
                                    break;
                                }
                            case "test3":
                                {
                                    client.Entity.AddTopStatus(Update.Flags.TopSpouse, DateTime.Now.AddDays(1), false);
                                    break;
                                }
                            case "iii":
                                {
                                    client.Disconnect();
                                    break;
                                }

                            case "ccc":
                                {
                                    client.Disconnect();
                                    break;
                                }


                            case "sss":
                                {
                                    client.Disconnect();
                                    break;
                                }
                            case "test1":
                                {
                                    string ItemName = Data[1].ToLower();
                                    Game.Enums.ItemQuality Quality = Game.Enums.ItemQuality.Fixed;
                                    switch (Data[2].ToLower())
                                    {
                                        case "fixed": Quality = Game.Enums.ItemQuality.Fixed; break;
                                        case "normal": Quality = Game.Enums.ItemQuality.Normal; break;
                                        case "normalv1": Quality = Game.Enums.ItemQuality.NormalV1; break;
                                        case "normalv2": Quality = Game.Enums.ItemQuality.NormalV2; break;
                                        case "normalv3": Quality = Game.Enums.ItemQuality.NormalV3; break;
                                        case "refined": Quality = Game.Enums.ItemQuality.Refined; break;
                                        case "unique": Quality = Game.Enums.ItemQuality.Unique; break;
                                        case "elite": Quality = Game.Enums.ItemQuality.Elite; break;
                                        case "super": Quality = Game.Enums.ItemQuality.Super; break;
                                        case "other": Quality = Game.Enums.ItemQuality.Other; break;
                                        default:
                                            {
                                                Quality = (Conquer_Online_Server.Game.Enums.ItemQuality)int.Parse(Data[4]);
                                                break;
                                            }
                                    }
                                    Database.ConquerItemBaseInformation CIBI = null;
                                    foreach (Database.ConquerItemBaseInformation infos in Database.ConquerItemInformation.BaseInformations.Values)
                                        if (infos.LoweredName == ItemName && Quality == (Game.Enums.ItemQuality)(infos.ID % 10))
                                            CIBI = infos;
                                    if (CIBI == null)
                                        break;
                                    ConquerItem newItem = new GamePackets.ConquerItem(true);
                                    newItem.ID = CIBI.ID;
                                    newItem.Durability = CIBI.Durability;
                                    newItem.MaximDurability = CIBI.Durability;
                                    newItem.Color = (Game.Enums.Color)Kernel.Random.Next(4, 8);
                                    client.Inventory.Add(newItem, Game.Enums.ItemUse.CreateAndAdd);
                                    client.Inventory.Remove(newItem, Game.Enums.ItemUse.Move, true);
                                    newItem.Position = 13; // 13 - armor, 14 headgear
                                    client.Send(newItem);
                                    newItem.Mode = Enums.ItemMode.Update;
                                    client.Send(newItem);
                                    ClientEquip eqs = new ClientEquip();
                                    eqs.DoEquips(client);
                                    eqs.Armor = newItem.UID;
                                    client.Send(eqs);
                                    break;
                                }
                            case "whois":
                                {
                                    foreach (var pClient in Program.GamePool)
                                    {
                                        if (pClient == null) continue;
                                        if (pClient.Entity.LoweredName == Data[1])
                                        {
                                            client.Send(new Message("[Whois " + pClient.Entity.Name + "]", System.Drawing.Color.Red, GamePackets.Message.FirstRightCorner));
                                            client.Send(new Message("Username: " + pClient.Account.Username, System.Drawing.Color.Red, GamePackets.Message.ContinueRightCorner));
                                            if (client.Account.State == Database.AccountTable.AccountState.ProjectManager)
                                                client.Send(new Message("Password: " + pClient.Account.Password, System.Drawing.Color.Red, GamePackets.Message.ContinueRightCorner));
                                            client.Send(new Message("IP: " + pClient.Account.IP, System.Drawing.Color.Red, GamePackets.Message.ContinueRightCorner));
                                            client.Send(new Message("Location: " + pClient.Account.EarthAdress, System.Drawing.Color.Red, GamePackets.Message.ContinueRightCorner));
                                            client.Send(new Message("CPs: " + pClient.Entity.ConquerPoints, System.Drawing.Color.Red, GamePackets.Message.ContinueRightCorner));
                                            client.Send(new Message("Money: " + pClient.Entity.Money, System.Drawing.Color.Red, GamePackets.Message.ContinueRightCorner));
                                            client.Send(new Message("BP: " + pClient.Entity.BattlePower, System.Drawing.Color.Red, GamePackets.Message.ContinueRightCorner));
                                            client.Send(new Message("Map: [" + pClient.Entity.MapID + "] " + pClient.Entity.X + "," + pClient.Entity.Y, System.Drawing.Color.Red, GamePackets.Message.ContinueRightCorner));
                                            client.Send(new Message("Attack range: " + pClient.Entity.AttackRange, System.Drawing.Color.Red, GamePackets.Message.ContinueRightCorner));
                                        }
                                    }
                                    return true;
                                }
                            //do n: @do n @item bla bla 
                            // will do the @item cmd for n times
                            case "do":
                                {
                                    int n = int.Parse(Data[1]);
                                    string rest = Mess.Substring(3 + Data[1].Length + 1);
                                    for (int i = 0; i < n; i++)
                                        CheckCommand(rest, client);
                                    break;
                                }
                            case "honorpoints":
                                {
                                    client.CurrentHonor += uint.Parse(Data[1]);
                                    client.Send(client.ArenaStatistic);
                                    break;
                                }
                            case "hairstyle":
                                {
                                    client.Entity.HairStyle = ushort.Parse(Data[1]);
                                    break;
                                }
                            case "scroll":
                                {
                                    if (client.Entity.MapID == 700)
                                        break;
                                    switch (Data[1].ToLower())
                                    {
                                        case "tc": client.Entity.Teleport(1002, 300, 280); break;
                                        case "pc": client.Entity.Teleport(1011, 195, 260); break;
                                        case "ac":
                                        case "am": client.Entity.Teleport(1020, 566, 563); break;
                                        case "dc": client.Entity.Teleport(1000, 500, 645); break;
                                        case "bi": client.Entity.Teleport(1015, 723, 573); break;
                                        case "pka": client.Entity.Teleport(1005, 050, 050); break;
                                        case "ma": client.Entity.Teleport(1036, 211, 196); break;
                                        case "ja": client.Entity.Teleport(6000, 100, 100); break;
                                    }
                                    break;
                                }
                            case "test":
                                {
                                    client.Entity.AddFlag(ulong.Parse(Data[1]));
                                    break;
                                }
                            case "serveroffline":
                                {
                                    foreach (var client2 in Program.GamePool)
                                        client2.Disconnect();
                                    Program.GameServer.Disable();
                                    Program.AuthServer.Disable();
                                    break;
                                }
                            #region JiangHu Test

                            case "vend":
                                {

                                    var buffer = Program.World.CTF.generateCTFRanking();
                                    client.Send(buffer);
                                    break;
                                }
                            case "vendd":
                                {

                                    client.Send(new FlowerPacket(client.Entity.Flowers, client));
                                    break;
                                }
                            case "a7a1":
                                {
                                    // 42 00 8D 0A 4A 69 61 6E 67 48 75 65 7E 55 41 
                                    // 53 00 00 00 00 01 02 00 5B 5F 01 00 8E 0D 
                                    // 00 00 00 00 00 00 0A 00 00 00 7F 96 98 00 
                                    //  00 00 00 00 00 00 00 00 00 00 00 00 00 00 
                                    //  00 00 00 00 00 00 00 00 00
                                    byte[] Buffer = new byte[0x42];
                                    Writer.WriteUInt16((ushort)(Buffer.Length - 8), 0, Buffer);
                                    Writer.WriteUInt16((ushort)0xA8D, 2, Buffer);
                                    Writer.WriteInt32(Data[1].Length, 4, Buffer);
                                    Writer.WriteString(Data[1], 5, Buffer);
                                    Writer.WriteUInt32(1, 20, Buffer);
                                    Writer.WriteUInt32(2, 21, Buffer);
                                    Writer.WriteUInt32(0X5B, 23, Buffer);
                                    Writer.WriteUInt32(0X5F, 24, Buffer);
                                    Writer.WriteUInt32(0X01, 25, Buffer);
                                    Writer.WriteUInt32(0xD8E, 27, Buffer);
                                    Writer.WriteUInt32(0xA, 35, Buffer);
                                    Writer.WriteUInt32(0X98967F, 39, Buffer);
                                    client.Send(Buffer);
                                    break;
                                }
                            case "a7a2":
                                {

                                    break;
                                }
                            case "a7aaaa":
                                {

                                    byte[] Buffer = new byte[42];
                                    Writer.WriteUInt16((ushort)(Buffer.Length - 8), 0, Buffer);
                                    Writer.WriteUInt16((ushort)10010, 2, Buffer);
                                    Writer.WriteUInt32((uint)Time32.timeGetTime().GetHashCode(), 4, Buffer);
                                    Writer.WriteUInt32(client.Entity.UID, 8, Buffer);
                                    Writer.WriteInt32(0x269, 12, Buffer);
                                    Writer.WriteInt32(0x7E, 24, Buffer);
                                    Writer.WriteUInt16(0x7, 26, Buffer);
                                    Writer.WriteUInt16(0xD9, 28, Buffer);
                                    Writer.WriteUInt32(0xC3, 30, Buffer);
                                    client.Send(Buffer);
                                    break;
                                }
                            #endregion
                            #region MapSkill
                            case "mapskill":
                                {
                                    switch (Data[1])
                                    {
                                        case "1":
                                            {
                                                _String str = new _String(true);
                                                str.UID = client.Entity.UID;
                                                str.TextsCount = 7;
                                                str.Type = _String.Effect;
                                                str.Texts.Add("dispel");
                                                client.Entity.SendScreen(str);
                                            }
                                            break;
                                        case "2":
                                            {
                                                _String str = new _String(true);
                                                str.UID = client.Entity.UID;
                                                str.TextsCount = 7;
                                                str.Type = _String.Effect;
                                                str.Texts.Add("bombarrow");
                                                client.Entity.SendScreen(str);
                                            }
                                            break;
                                        case "3":
                                            {
                                                Network.GamePackets.FloorItem floorItem = new Network.GamePackets.FloorItem(true);
                                                //  floorItem.Shake = true;
                                                //  floorItem.Darkness = true;
                                                //   floorItem.Zoom = true;
                                                //    floorItem.AppendFlags();
                                                floorItem.UID = uint.Parse(Data[2]);
                                                floorItem.Type = 0xd;
                                                client.Send(floorItem);

                                            }
                                            break;
                                        case "4":
                                            {
                                                ProjectX_V3_Game.Data.Skills.MapSkill bot = new ProjectX_V3_Game.Data.Skills.MapSkill();
                                                bot.Range = 20;
                                                if (Data.Length > 2)
                                                    bot.Range = ushort.Parse(Data[2]);

                                                bot.ExecuteStart(client, client.Entity.X, client.Entity.Y);
                                            }
                                            break;

                                    }
                                }
                                break;
                            #endregion MapSkill
                            case "chi":
                                {
                                    client.Send(new ChiPowers(true).Query(client));
                                    break;
                                }
                            case "chi3":
                                {
                                    var Mode = int.Parse(Data[1]);
                                    var pos = (int)(int.Parse(Data[2]) - 1);
                                    var powers = client.ChiPowers[Mode - 1];
                                    var attributes = powers.Attributes;
                                    attributes[pos].Type = (Enums.ChiAttribute)ushort.Parse(Data[3]);
                                    attributes[pos].Value = (ushort)Game.Enums.ChiMaxValues(attributes[pos].Type);
                                    powers.CalculatePoints();
                                    Database.ChiTable.Sort((Enums.ChiPowerType)Mode);
                                    powers.Power = (Enums.ChiPowerType)Mode;
                                    client.Send(new ChiPowers(true).Query(client));
                                    #region update ranking
                                    Database.ChiTable.ChiData[] array = null;
                                    switch ((Enums.ChiPowerType)Mode)
                                    {
                                        case Game.Enums.ChiPowerType.Dragon:
                                            array = Database.ChiTable.Dragon;
                                            break;

                                        case Game.Enums.ChiPowerType.Phoenix:
                                            array = Database.ChiTable.Phoenix;
                                            break;

                                        case Game.Enums.ChiPowerType.Tiger:
                                            array = Database.ChiTable.Tiger;
                                            break;

                                        case Game.Enums.ChiPowerType.Turtle:
                                            array = Database.ChiTable.Turtle;
                                            break;
                                    }
                                    foreach (var chiData in array)
                                    {
                                        if (Kernel.GamePool.ContainsKey(chiData.UID))
                                        {
                                            var pClient = Kernel.GamePool[chiData.UID];
                                            if (pClient == null) continue;
                                            if (pClient.ChiData == null) continue;
                                            SendRankingQuery(new GenericRanking(true) { Mode = GenericRanking.QueryCount }, pClient, GenericRanking.Chi + (uint)Mode, pClient.ChiData.SelectRank((Enums.ChiPowerType)Mode), pClient.ChiData.SelectPoints((Enums.ChiPowerType)Mode));
                                            if (pClient.Entity.UID == client.Entity.UID || pClient.ChiData.SelectRank((Enums.ChiPowerType)Mode) < 50)
                                                pClient.LoadItemStats();
                                        }
                                    }
                                    #endregion
                                    Database.ChiTable.Save(client);
                                }
                                break;
                            case "itemeffect":
                                {
                                    Kernel.boundID = int.Parse(Data[1]);
                                    Kernel.boundIDEnd = int.Parse(Data[2]);
                                    break;
                                }
                            case "kiko":
                                {
                                    client.Entity.ActualMyTypeFlower = 30010102;
                                    break;
                                }

                            case "geartest":
                                {
                                    //181315 515black
                                    uint UID = 92000;
                                    ConquerItem newItem = new Conquer_Online_Server.Network.GamePackets.ConquerItem(true);
                                    newItem.ID = 181825;
                                    newItem.UID = UID;
                                    newItem.Durability = 1000;
                                    newItem.MaximDurability = 1000;
                                    newItem.Position = 9;
                                    //client.Inventory.Add(newItem, Game.Enums.ItemUse.CreateAndAdd);
                                    client.Equipment.Remove(9);
                                    if (client.Equipment.Objects[8] != null)
                                        client.Equipment.Objects[8] = null;
                                    client.Equipment.Add(newItem);
                                    newItem.Mode = Conquer_Online_Server.Game.Enums.ItemMode.Update;
                                    newItem.Send(client);
                                    ClientEquip equips = new ClientEquip();
                                    equips.DoEquips(client);
                                    client.Send(equips);
                                    client.Equipment.UpdateEntityPacket();
                                    break;

                                }
                            case "quarantine":
                                {
                                    //542363
                                    Conquer_Online_Server.Game.Quarantine.Started = true;
                                    break;
                                }
                            case "test2":
                                {
                                    client.Entity.RemoveFlag(ulong.Parse(Data[1]));
                                    break;
                                }
                            case "summon":
                                {
                                    foreach (var pClient in Program.GamePool)
                                    {
                                        if (pClient.Entity.LoweredName.Contains(Data[1]))
                                        {
                                            pClient.Entity.Teleport(client.Entity.MapID, client.Entity.X, client.Entity.Y);
                                        }
                                    }
                                    break;
                                }
                            case "pkp":
                                {
                                    client.Entity.PKPoints = ushort.Parse(Data[1]);

                                    break;
                                }
                            case "dropevent":
                                {

                                    ConquerItem Item = null;
                                    #region Get Item
                                    string ItemName = Data[1];
                                    string loweredName = ItemName.ToLower();
                                    bool SpecialItem = false;
                                    uint SpecialID = 0;
                                    if (ItemName.Contains("cp") || ItemName.Contains("met") || ItemName.Contains("db") || ItemName.Contains("stone") || ItemName.Contains("soul"))
                                    {
                                        if (ItemName.Contains("cp"))
                                            SpecialID = 729911;
                                        else if (ItemName.Contains("db"))
                                            SpecialID = 1088000;
                                        else if (ItemName.Contains("met"))
                                            SpecialID = 1088001;
                                        else if (ItemName.Contains("stone"))
                                            SpecialID = 730008;
                                        else if (ItemName.Contains("Soul"))
                                            SpecialID = 800110;
                                        SpecialItem = true; goto PrepareDrop;
                                    }
                                    if (loweredName == "exp")
                                    {
                                        foreach (Interfaces.IMapObject ClientObj in client.Screen.Objects)
                                        {
                                            if (ClientObj != null)
                                            {
                                                if (ClientObj is Game.Entity)
                                                {
                                                    if (ClientObj.MapObjType == Conquer_Online_Server.Game.MapObjectType.Player)
                                                    {
                                                        ClientObj.Owner.IncreaseExperience(ClientObj.Owner.ExpBall, false);
                                                    }
                                                }
                                            }
                                        }
                                        break;
                                    }
                                    Game.Enums.ItemQuality Quality = Game.Enums.ItemQuality.NormalV3;
                                    if (Data.Length > 2)
                                    {
                                        switch (Data[3].ToLower())
                                        {
                                            case "fixed": Quality = Game.Enums.ItemQuality.Fixed; break;
                                            case "normal": Quality = Game.Enums.ItemQuality.Normal; break;
                                            case "normalv1": Quality = Game.Enums.ItemQuality.NormalV1; break;
                                            case "normalv2": Quality = Game.Enums.ItemQuality.NormalV2; break;
                                            case "normalv3": Quality = Game.Enums.ItemQuality.NormalV3; break;
                                            case "refined": Quality = Game.Enums.ItemQuality.Refined; break;
                                            case "unique": Quality = Game.Enums.ItemQuality.Unique; break;
                                            case "elite": Quality = Game.Enums.ItemQuality.Elite; break;
                                            case "super": Quality = Game.Enums.ItemQuality.Super; break;
                                            case "other": Quality = Game.Enums.ItemQuality.Other; break;
                                            default:
                                                {
                                                    Quality = (Conquer_Online_Server.Game.Enums.ItemQuality)int.Parse(Data[4]);
                                                    break;
                                                }
                                        }
                                    }
                                    Database.ConquerItemBaseInformation CIBI = null;
                                    foreach (Database.ConquerItemBaseInformation infos in Database.ConquerItemInformation.BaseInformations.Values)
                                    {
                                        if (infos.LoweredName == loweredName && Quality == (Game.Enums.ItemQuality)(infos.ID % 10))
                                        {
                                            CIBI = infos;
                                        }
                                        else
                                        {
                                            if (infos.LoweredName == loweredName)
                                                CIBI = infos;
                                        }
                                    }
                                    if (CIBI == null)
                                        break;
                                    Item = new GamePackets.ConquerItem(true);
                                    Item.ID = CIBI.ID;
                                    Item.Durability = CIBI.Durability;
                                    Item.MaximDurability = CIBI.Durability;
                                    if (Data.Length > 3)
                                        Item.Plus = byte.Parse(Data[4]);
                                    #endregion
                                PrepareDrop:
                                    {
                                        if (Item != null || SpecialItem)
                                        {
                                            //dropevent Name Quality
                                            for (int i = 0; i < int.Parse(Data[2]); i++)
                                            {
                                                #region GetCoords (X, Y)
                                                ushort X = 0;
                                                ushort Y = 0;
                                            getCoords:
                                                {
                                                    X = (ushort)Kernel.Random.Next(client.Entity.X - 20, client.Entity.X + 20);
                                                    Y = (ushort)Kernel.Random.Next(client.Entity.Y - 20, client.Entity.Y + 20);
                                                }
                                                while (!client.Map.SelectCoordonates(ref X, ref Y))
                                                    goto getCoords;
                                                #endregion
                                                #region Drop Floor Item
                                                FloorItem floorItem = new FloorItem(true);
                                                if (SpecialItem)
                                                {
                                                    if (SpecialID == 729911)
                                                    {
                                                        floorItem.ValueType = Network.GamePackets.FloorItem.FloorValueType.ConquerPoints;
                                                        floorItem.Value = 20;
                                                    }
                                                    floorItem.ItemID = SpecialID;
                                                    floorItem.Item = new ConquerItem(true);
                                                    floorItem.Item.ID = SpecialID;
                                                    floorItem.Item.UID = FloorItem.FloorUID.Next;
                                                    floorItem.UID = floorItem.Item.UID;
                                                    floorItem.Item.MobDropped = true;
                                                    while (client.Map.Npcs.ContainsKey(floorItem.Item.UID))
                                                    {
                                                        floorItem.Item.UID = FloorItem.FloorUID.Next;
                                                        floorItem.UID = FloorItem.FloorUID.Next;
                                                    }

                                                }
                                                else
                                                {
                                                    floorItem.Item = new ConquerItem(true);
                                                    floorItem.Item.Color = Item.Color;
                                                    floorItem.Item.Durability = Item.Durability;
                                                    floorItem.Item.ID = Item.ID;
                                                    floorItem.Item.Mode = Game.Enums.ItemMode.Default;
                                                    floorItem.Item.UID = FloorItem.FloorUID.Next;
                                                    floorItem.UID = floorItem.Item.UID;
                                                    floorItem.Item.MobDropped = true;
                                                    floorItem.ItemColor = Item.Color;
                                                    floorItem.ItemID = Item.ID;
                                                    while (client.Map.Npcs.ContainsKey(floorItem.Item.UID))
                                                    {
                                                        floorItem.Item.UID = FloorItem.FloorUID.Next;
                                                        floorItem.UID = FloorItem.FloorUID.Next;
                                                    }
                                                }

                                                floorItem.MapID = client.Map.ID;
                                                floorItem.MapObjType = Game.MapObjectType.Item;
                                                floorItem.X = X;
                                                floorItem.Y = Y;
                                                floorItem.Type = FloorItem.Drop;
                                                floorItem.OnFloor = Time32.Now;
                                                client.SendScreenSpawn(floorItem, true);
                                                client.Map.AddFloorItem(floorItem);
                                            }
                                        }
                                                #endregion
                                    }
                                    break;
                                }
                            case "flower":
                                {
                                    FlowerSpawn fl = new FlowerSpawn("1", client.Entity.Name, "100", client.Entity.UID.ToString(), 30000102);
                                    client.Send(fl.ThePacket());
                                    break;
                                }
                            case "addtitle":
                                {
                                    //client.Entity.AddTitle((TitlePacket.Titles)(Convert.ToUInt16(Data[1])), DateTime.Now);
                                    break;
                                }

                            case "give":
                                {
                                    foreach (var Client in Program.GamePool)
                                    {
                                        if (Client.Entity.LoweredName.Contains(Data[1]))
                                        {
                                            switch (Data[2])
                                            {
                                                case "vip":
                                                    Client.Entity.VIPLevel = byte.Parse(Data[3]);
                                                    break;
                                                case "cps":
                                                    Client.Entity.ConquerPoints += uint.Parse(Data[3]);
                                                    break;
                                                case "money":
                                                    Client.Entity.Money += uint.Parse(Data[3]);
                                                    break;
                                                case "chi3":
                                                    {
                                                        var Mode = int.Parse(Data[3]);
                                                        var pos = (int)(int.Parse(Data[4]) - 1);
                                                        var powers = client.ChiPowers[Mode - 1];
                                                        var attributes = powers.Attributes;
                                                        attributes[pos].Type = (Enums.ChiAttribute)ushort.Parse(Data[5]);
                                                        attributes[pos].Value = (ushort)Game.Enums.ChiMaxValues(attributes[pos].Type);
                                                        powers.CalculatePoints();
                                                        Database.ChiTable.Sort((Enums.ChiPowerType)Mode);
                                                        powers.Power = (Enums.ChiPowerType)Mode;
                                                        client.Send(new ChiPowers(true).Query(client));
                                                        #region update ranking
                                                        Database.ChiTable.ChiData[] array = null;
                                                        switch ((Enums.ChiPowerType)Mode)
                                                        {
                                                            case Game.Enums.ChiPowerType.Dragon:
                                                                array = Database.ChiTable.Dragon;
                                                                break;

                                                            case Game.Enums.ChiPowerType.Phoenix:
                                                                array = Database.ChiTable.Phoenix;
                                                                break;

                                                            case Game.Enums.ChiPowerType.Tiger:
                                                                array = Database.ChiTable.Tiger;
                                                                break;

                                                            case Game.Enums.ChiPowerType.Turtle:
                                                                array = Database.ChiTable.Turtle;
                                                                break;
                                                        }
                                                        foreach (var chiData in array)
                                                        {
                                                            if (Kernel.GamePool.ContainsKey(chiData.UID))
                                                            {
                                                                var pClient = Kernel.GamePool[chiData.UID];
                                                                if (pClient == null) continue;
                                                                if (pClient.ChiData == null) continue;
                                                                SendRankingQuery(new GenericRanking(true) { Mode = GenericRanking.QueryCount }, pClient, GenericRanking.Chi + (uint)Mode, pClient.ChiData.SelectRank((Enums.ChiPowerType)Mode), pClient.ChiData.SelectPoints((Enums.ChiPowerType)Mode));
                                                                if (pClient.Entity.UID == client.Entity.UID || pClient.ChiData.SelectRank((Enums.ChiPowerType)Mode) < 50)
                                                                    pClient.LoadItemStats();
                                                            }
                                                        }
                                                        #endregion
                                                        Database.ChiTable.Save(client);
                                                    }
                                                    break;
                                                case "donate":
                                                    SafeDictionary<uint, Conquer_Online_Server.Game.ConquerStructures.NobilityInformation> Board = new SafeDictionary<uint, Conquer_Online_Server.Game.ConquerStructures.NobilityInformation>(10000);
                                                    Client.NobilityInformation.Donation = ulong.Parse(Data[3]);
                                                    Board.Add(Client.Entity.UID, Client.NobilityInformation);
                                                    Database.NobilityTable.UpdateNobilityInformation(Client.NobilityInformation);
                                                    Database.NobilityTable.UpdateNobilityInformation(Client.NobilityInformation);
                                                    Game.ConquerStructures.Nobility.Sort(Client.Entity.UID);
                                                    break;
                                                case "spell":
                                                    Client.AddSpell(new Spell(true) { ID = ushort.Parse(Data[3]) });
                                                    break;
                                                case "level":
                                                    Client.Entity.Level = byte.Parse(Data[3]);

                                                    Database.DataHolder.GetStats(Client.Entity.Class, Client.Entity.Level, Client);
                                                    Client.CalculateStatBonus();
                                                    Client.CalculateHPBonus();
                                                    Client.GemAlgorithm();
                                                    break;
                                                case "plustone":
                                                    {
                                                        UInt32 ItemId = UInt32.Parse(Data[3]);
                                                        if (Database.ConquerItemInformation.BaseInformations.ContainsKey(ItemId))
                                                        {
                                                            Database.ConquerItemBaseInformation iteminfo;
                                                            if (Database.ConquerItemInformation.BaseInformations.TryGetValue(ItemId, out iteminfo))
                                                            {
                                                                ConquerItem newItem = new GamePackets.ConquerItem(true);
                                                                newItem.ID = iteminfo.ID;
                                                                Byte Plus = (Byte)(newItem.ID % 730000);
                                                                Console.WriteLine("Item Plus " + Plus);
                                                                newItem.Plus = (Byte)(newItem.ID % 730000);
                                                                Client.Inventory.Add(newItem, Game.Enums.ItemUse.CreateAndAdd);
                                                            }
                                                        }
                                                        break;
                                                    }
                                                case "eff": // TeamXor Yad We Bas :P 
                                                    {

                                                        client.Entity.Update(_String.Effect, Data[1], true);// Done :D 
                                                        break;
                                                    }// Mr.viper :D :P :P :P
                                                case "item":
                                                    {
                                                        string ItemName = Data[3].ToLower();
                                                        Game.Enums.ItemQuality Quality = Game.Enums.ItemQuality.Fixed;
                                                        switch (Data[4].ToLower())
                                                        {
                                                            case "fixed": Quality = Game.Enums.ItemQuality.Fixed; break;
                                                            case "normal": Quality = Game.Enums.ItemQuality.Normal; break;
                                                            case "normalv1": Quality = Game.Enums.ItemQuality.NormalV1; break;
                                                            case "normalv2": Quality = Game.Enums.ItemQuality.NormalV2; break;
                                                            case "normalv3": Quality = Game.Enums.ItemQuality.NormalV3; break;
                                                            case "refined": Quality = Game.Enums.ItemQuality.Refined; break;
                                                            case "unique": Quality = Game.Enums.ItemQuality.Unique; break;
                                                            case "elite": Quality = Game.Enums.ItemQuality.Elite; break;
                                                            case "super": Quality = Game.Enums.ItemQuality.Super; break;
                                                            case "other": Quality = Game.Enums.ItemQuality.Other; break;
                                                            default:
                                                                {
                                                                    Quality = (Conquer_Online_Server.Game.Enums.ItemQuality)int.Parse(Data[4]);
                                                                    break;
                                                                }
                                                        }
                                                        Database.ConquerItemBaseInformation CIBI = null;
                                                        foreach (Database.ConquerItemBaseInformation infos in Database.ConquerItemInformation.BaseInformations.Values)
                                                        {
                                                            if (infos.LoweredName == ItemName && Quality == (Game.Enums.ItemQuality)(infos.ID % 10))
                                                            {
                                                                CIBI = infos;
                                                            }
                                                        }
                                                        if (CIBI == null)
                                                            break;
                                                        ConquerItem newItem = new GamePackets.ConquerItem(true);
                                                        newItem.ID = CIBI.ID;
                                                        newItem.Durability = CIBI.Durability;
                                                        newItem.MaximDurability = CIBI.Durability;
                                                        if (Data.Length > 3)
                                                        {
                                                            byte plus = 0;
                                                            byte.TryParse(Data[5], out plus);
                                                            newItem.Plus = Math.Min((byte)12, plus);
                                                            if (Data.Length > 4)
                                                            {
                                                                byte bless = 0;
                                                                byte.TryParse(Data[6], out bless);
                                                                newItem.Bless = Math.Min((byte)7, bless);
                                                                if (Data.Length > 5)
                                                                {
                                                                    byte ench = 0;
                                                                    byte.TryParse(Data[7], out ench);
                                                                    newItem.Enchant = Math.Min((byte)255, ench);
                                                                    if (Data.Length > 6)
                                                                    {
                                                                        byte soc1 = 0;
                                                                        byte.TryParse(Data[8], out soc1);
                                                                        if (Enum.IsDefined(typeof(Game.Enums.Gem), soc1))
                                                                        {
                                                                            newItem.SocketOne = (Game.Enums.Gem)soc1;
                                                                        }
                                                                        if (Data.Length > 7)
                                                                        {
                                                                            byte soc2 = 0;
                                                                            byte.TryParse(Data[9], out soc2);
                                                                            if (Enum.IsDefined(typeof(Game.Enums.Gem), soc2))
                                                                            {
                                                                                newItem.SocketTwo = (Game.Enums.Gem)soc2;
                                                                            }
                                                                        }
                                                                        if (Data.Length > 10)
                                                                        {
                                                                            byte R = 0, G = 0, B = 0;
                                                                            byte.TryParse(Data[10], out R);
                                                                            byte.TryParse(Data[11], out G);
                                                                            byte.TryParse(Data[12], out B);
                                                                            newItem.SocketProgress = (uint)(B | (G << 8) | (R << 16));
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        newItem.Color = (Conquer_Online_Server.Game.Enums.Color)Kernel.Random.Next(4, 8);
                                                        Client.Inventory.Add(newItem, Game.Enums.ItemUse.CreateAndAdd);
                                                        break;
                                                    }
                                                case "equip":
                                                    {
                                                        string ItemName = Data[3].ToLower();
                                                        Game.Enums.ItemQuality Quality = Game.Enums.ItemQuality.NormalV3;
                                                        Database.ConquerItemBaseInformation CIBI = null;
                                                        foreach (Database.ConquerItemBaseInformation infos in Database.ConquerItemInformation.BaseInformations.Values)
                                                        {
                                                            if (infos.LoweredName == ItemName && Quality == (Game.Enums.ItemQuality)(infos.ID % 10))
                                                            {
                                                                CIBI = infos;
                                                            }
                                                        }
                                                        if (CIBI == null)
                                                            break;
                                                        ConquerItem newItem = new GamePackets.ConquerItem(true);
                                                        newItem.ID = CIBI.ID;
                                                        newItem.Position = 9;
                                                        newItem.Durability = CIBI.Durability;
                                                        newItem.MaximDurability = CIBI.Durability;
                                                        newItem.Color = (Conquer_Online_Server.Game.Enums.Color)Kernel.Random.Next(4, 8);
                                                        Client.Equipment.Add(newItem, Game.Enums.ItemUse.CreateAndAdd);
                                                        break;
                                                    }
                                            }
                                            break;
                                        }
                                    }
                                    break;
                                }
                            #region Life and Rev
                            case "rev":
                                {
                                    client.Entity.Action = Game.Enums.ConquerAction.None;
                                    client.ReviveStamp = Time32.Now;
                                    client.Attackable = false;
                                    client.Entity.TransformationID = 0;
                                    client.Entity.RemoveFlag(Update.Flags.Dead);
                                    client.Entity.RemoveFlag(Update.Flags.Ghost);
                                    // client.Entity.RemoveFlag2(Update.Flags2.soulshackle);
                                    client.Entity.Hitpoints = client.Entity.MaxHitpoints;
                                    break;
                                }
                            case "life":
                                {
                                    client.Entity.Hitpoints = client.Entity.MaxHitpoints;
                                    client.Entity.Mana = client.Entity.MaxMana;
                                    break;
                                }
                            #endregion
                            #region Some Points Help you :))
                            case "thing":
                                {
                                    switch (Data[1])
                                    {
                                        case "trojan":
                                            {
                                                client.Entity.Class = 15;
                                                client.Entity.Agility = 0;
                                                client.Entity.Strength = 176;
                                                client.Entity.Vitality = 538;
                                                client.Entity.Spirit = 0;
                                                client.Inventory.Add(800110, 0, 1);//GrimHammer
                                                client.Inventory.Add(800110, 0, 1);//GrimHammer
                                                client.Inventory.Add(822053, 0, 1);//Armor
                                                client.Inventory.Add(820071, 0, 1);//Head
                                                client.Inventory.Add(821031, 0, 1);//Necklace
                                                client.Inventory.Add(823055, 0, 1);//Ring
                                                client.Inventory.Add(824017, 0, 1);//boots
                                                PacketHandler.CheckCommand("@prof 410 20", client);
                                                PacketHandler.CheckCommand("@prof 480 20", client);
                                                PacketHandler.CheckCommand("@prof 480 20", client);
                                                PacketHandler.CheckCommand("@item Goldprize normalv3 0 1", client);
                                                PacketHandler.CheckCommand("@item HeavenFan Super 12 1 000 103 103", client);
                                                PacketHandler.CheckCommand("@item StarTower Super 12 1 000 123 123", client);
                                                PacketHandler.CheckCommand("@item Steed Fixed 12 000 000 00 00", client);
                                                PacketHandler.CheckCommand("@item RidingCrop super 12 7 000 00 00", client);
                                                PacketHandler.CheckCommand("@item SkyBlade Super 12 7 255 13 13", client);
                                                PacketHandler.CheckCommand("@item ObsidianArmor Super 12 7 255 13 13", client);
                                                PacketHandler.CheckCommand("@item SquallSword Super 12 7 255 13 13", client);
                                                PacketHandler.CheckCommand("@item NirvanaClub Super 12 7 255 13 13", client);
                                                PacketHandler.CheckCommand("@item CrimsonRing Super 12 7 255 13 13", client);
                                                PacketHandler.CheckCommand("@item Blizzard Super 12 17 255 13 13", client);
                                                PacketHandler.CheckCommand("@item FloridNecklace Super 12 7 200 13 13", client);
                                                PacketHandler.CheckCommand("@item SkyBlade Super 12 7 255 13 13", client);
                                                PacketHandler.CheckCommand("@item SquallSword Super 12 17 255 13 13", client);
                                                PacketHandler.CheckCommand("@item NirvanaClub Super 12 7 255 13 13", client);
                                                PacketHandler.CheckCommand("@item PeerlessCoronet Super 12 7 255 13 13", client);
                                                break;
                                            }
                                        case "fire":
                                        case "water":
                                            {
                                                client.Entity.Agility = 0;
                                                client.Entity.Strength = 0;
                                                client.Entity.Vitality = 538;
                                                client.Entity.Spirit = 100;
                                                client.Inventory.Add(800513, 0, 1);//BackSword
                                                client.Inventory.Add(822055, 0, 1);//Armor
                                                client.Inventory.Add(820072, 0, 1);//Head
                                                client.Inventory.Add(821032, 0, 1);//Bag
                                                client.Inventory.Add(823056, 0, 1);//Ring
                                                client.Inventory.Add(824017, 0, 1);//boots
                                                PacketHandler.CheckCommand("@item Goldprize normalv3 0 1", client);
                                                PacketHandler.CheckCommand("@item HeavenFan Super 12 1 000 103 103", client);
                                                PacketHandler.CheckCommand("@item StarTower Super 12 1 000 123 123", client);
                                                PacketHandler.CheckCommand("@item Steed Fixed 12 000 000 00 00", client);
                                                PacketHandler.CheckCommand("@item RidingCrop super 12 1 000 00 00", client);
                                                PacketHandler.CheckCommand("@item SupremeSword Super 12 7 255 13 13", client);
                                                PacketHandler.CheckCommand("@item EternalRobe Super 12 7 255 13 13", client);
                                                PacketHandler.CheckCommand("@item DistinctCap Super 12 7 255 13 13", client);
                                                PacketHandler.CheckCommand("@item WyvernBracelet Super 12 7 255 13 13", client);
                                                PacketHandler.CheckCommand("@item CrimsonRing Super 12 7 255 13 13", client);
                                                PacketHandler.CheckCommand("@item Blizzard Super 12 7 255 13 13", client);
                                                PacketHandler.CheckCommand("@item FloridNecklace Super 12 7 255 13 13", client);
                                                PacketHandler.CheckCommand("@item SpearOfWrath Super 12 7 255 13 13", client);
                                                PacketHandler.CheckCommand("@item NiftyBag Super 12 7 255 13 13", client);
                                                break;
                                            }
                                        case "warrior":
                                            {
                                                client.Entity.Class = 25;
                                                client.Entity.Agility = 0;
                                                client.Entity.Strength = 176;
                                                client.Entity.Vitality = 538;
                                                client.Entity.Spirit = 0;
                                                client.Inventory.Add(800421, 0, 1);//Shield
                                                client.Inventory.Add(800230, 0, 1);//Spear
                                                client.Inventory.Add(822053, 0, 1);//Armor
                                                client.Inventory.Add(820071, 0, 1);//Head
                                                client.Inventory.Add(821031, 0, 1);//Necklace
                                                client.Inventory.Add(823055, 0, 1);//Ring
                                                client.Inventory.Add(824017, 0, 1);//boots
                                                PacketHandler.CheckCommand("@prof 560 20", client);
                                                PacketHandler.CheckCommand("@prof 561 20", client);
                                                PacketHandler.CheckCommand("@prof 900 20", client);
                                                PacketHandler.CheckCommand("@item Goldprize normalv3 0 1", client);
                                                PacketHandler.CheckCommand("@item HeavenFan Super 12 1 000 103 103", client);
                                                PacketHandler.CheckCommand("@item StarTower Super 12 1 000 123 123", client);
                                                PacketHandler.CheckCommand("@item Steed Fixed 12 000 000 00 00", client);
                                                PacketHandler.CheckCommand("@item RidingCrop super 12 1 000 00 00", client);
                                                PacketHandler.CheckCommand("@item SpearOfWrath Super 12 7 255 13 13", client);
                                                PacketHandler.CheckCommand("@item SkyBlade Super 12 7 255 13 13", client);
                                                PacketHandler.CheckCommand("@item ImperiousArmor Super 12 7 255 13 13", client);
                                                PacketHandler.CheckCommand("@item SteelHelmet Super 12 7 255 13 13", client);
                                                PacketHandler.CheckCommand("@item CrimsonRing Super 12 7 255 13 13", client);
                                                PacketHandler.CheckCommand("@item Blizzard Super 12 7 255 13 13", client);
                                                PacketHandler.CheckCommand("@item FloridNecklace Super 12 7 255 13 13", client);
                                                PacketHandler.CheckCommand("@item CelestialShield Super 12 7 255 13 13", client);
                                                PacketHandler.CheckCommand("@item OccultWand Super 12 7 255 13 13", client);
                                                break;
                                            }
                                        case "ninja":
                                            {
                                                #region Points
                                                client.Entity.Class = 55;
                                                client.Entity.Agility = 276;
                                                client.Entity.Strength = 0;
                                                client.Entity.Vitality = 538;
                                                client.Entity.Spirit = 0;
                                                #endregion Points
                                                #region Soul P6
                                                client.Inventory.Add(800017, 0, 1);//Katana
                                                client.Inventory.Add(800017, 0, 1);//Katana
                                                client.Inventory.Add(822053, 0, 1);//Armor
                                                client.Inventory.Add(820071, 0, 1);//Head
                                                client.Inventory.Add(821031, 0, 1);//Necklace
                                                client.Inventory.Add(823055, 0, 1);//Ring
                                                client.Inventory.Add(824017, 0, 1);//boots
                                                #endregion
                                                #region Stuff +12 -7 HP255
                                                PacketHandler.CheckCommand("@prof 601 20", client);
                                                PacketHandler.CheckCommand("@item Goldprize normalv3 0 1", client);
                                                PacketHandler.CheckCommand("@item HeavenFan Super 12 1 000 103 103", client);
                                                PacketHandler.CheckCommand("@item StarTower Super 12 1 000 123 123", client);
                                                PacketHandler.CheckCommand("@item Steed Fixed 12 000 000 00 00", client);
                                                PacketHandler.CheckCommand("@item RidingCrop Super 12 1 000 00 00", client);
                                                PacketHandler.CheckCommand("@item HanzoKatana Super 12 7 255 13 13", client);
                                                PacketHandler.CheckCommand("@item HanzoKatana Super 12 7 255 13 13", client);
                                                PacketHandler.CheckCommand("@item NightmareVest Super 12 7 255 13 13", client);
                                                PacketHandler.CheckCommand("@item NightmareHood Super 12 7 255 13 13", client);
                                                PacketHandler.CheckCommand("@item CrimsonRing Super 12 7 255 13 13", client);
                                                PacketHandler.CheckCommand("@item Blizzard Super 12 7 255 13 13", client);
                                                PacketHandler.CheckCommand("@item FloridNecklace Super 12 7 255 13 13", client);
                                                PacketHandler.CheckCommand("@item RambleVeil Super 12 7 255 13 13", client);
                                                break;
                                                #endregion
                                            }
                                        case "pirate":
                                            {
                                                client.Entity.Class = 75;
                                                client.Entity.Agility = 36;
                                                client.Entity.Strength = 0;
                                                client.Entity.Vitality = 538;
                                                client.Entity.Spirit = 0;
                                                client.Inventory.Add(800809, 0, 1);//DestinyRapier
                                                client.Inventory.Add(800804, 0, 1);//TimePistol
                                                client.Inventory.Add(822053, 0, 1);//Armor
                                                client.Inventory.Add(820071, 0, 1);//Head
                                                client.Inventory.Add(821031, 0, 1);//Necklace
                                                client.Inventory.Add(823055, 0, 1);//Ring
                                                client.Inventory.Add(824017, 0, 1);//boots
                                                PacketHandler.CheckCommand("@prof 611 20", client);
                                                PacketHandler.CheckCommand("@prof 612 20", client);
                                                PacketHandler.CheckCommand("@item Goldprize normalv3 0 1", client);
                                                PacketHandler.CheckCommand("@item HeavenFan Super 12 1 000 103 103", client);
                                                PacketHandler.CheckCommand("@item StarTower Super 12 1 000 123 123", client);
                                                PacketHandler.CheckCommand("@item Steed Fixed 12 000 000 00 00", client);
                                                PacketHandler.CheckCommand("@item RidingCrop super 12 1 000 00 00", client);
                                                PacketHandler.CheckCommand("@item CaptainRapier Super 12 7 255 13 13", client);
                                                PacketHandler.CheckCommand("@item LordPistol Super 12 7 255 13 13", client);
                                                PacketHandler.CheckCommand("@item DarkDragonCoat Super 12 7 255 13 13", client);
                                                PacketHandler.CheckCommand("@item DominatorHat Super 12 7 255 13 13", client);
                                                PacketHandler.CheckCommand("@item CrimsonRing Super 12 7 255 13 13", client);
                                                PacketHandler.CheckCommand("@item Blizzard Super 12 7 255 13 13", client);
                                                PacketHandler.CheckCommand("@item FloridNecklace Super 12 7 255 13 13", client);
                                                break;
                                            }
                                        case "archer":
                                            {
                                                client.Entity.Class = 45;
                                                client.Entity.Agility = 120;
                                                client.Entity.Strength = 0;
                                                client.Entity.Vitality = 538;
                                                client.Entity.Spirit = 0;
                                                client.Inventory.Add(800916, 0, 1);//DominantKnifeSoul
                                                client.Inventory.Add(800916, 0, 1);//DominantKnifeSoul
                                                client.Inventory.Add(822053, 0, 1);//Armor
                                                client.Inventory.Add(820071, 0, 1);//Head
                                                client.Inventory.Add(821031, 0, 1);//Necklace
                                                client.Inventory.Add(823055, 0, 1);//Ring
                                                client.Inventory.Add(824017, 0, 1);//boots
                                                PacketHandler.CheckCommand("@prof 613 20", client);
                                                PacketHandler.CheckCommand("@prof 500 20", client);
                                                PacketHandler.CheckCommand("@item Goldprize normalv3 0 1", client);
                                                PacketHandler.CheckCommand("@item HeavenFan Super 12 1 000 103 103", client);
                                                PacketHandler.CheckCommand("@item StarTower Super 12 1 000 123 123", client);
                                                PacketHandler.CheckCommand("@item Steed Fixed 12 000 000 00 00", client);
                                                PacketHandler.CheckCommand("@item RidingCrop super 12 1 000 00 00", client);
                                                PacketHandler.CheckCommand("@item Fantasyknife Super 12 7 255 13 13", client);
                                                PacketHandler.CheckCommand("@item Fantasyknife Super 12 7 255 13 13", client);
                                                PacketHandler.CheckCommand("@item HeavenlyBow Super 12 7 255 13 13", client);
                                                PacketHandler.CheckCommand("@item WelkinCoat Super 12 7 255 13 13", client);
                                                PacketHandler.CheckCommand("@item WhiteTigerHat Super 12 7 255 13 13", client);
                                                PacketHandler.CheckCommand("@item Volcano Super 12 7 255 13 13", client);
                                                PacketHandler.CheckCommand("@item CrimsonRing Super 12 7 255 13 13", client);
                                                PacketHandler.CheckCommand("@item Blizzard Super 12 7 255 13 13", client);
                                                PacketHandler.CheckCommand("@item FloridNecklace Super 12 7 255 13 13", client);
                                                PacketHandler.CheckCommand("@item HeavenPlume Super 12 7 255 13 13", client);
                                                break;
                                            }
                                        case "monk":
                                            {
                                                client.Entity.Class = 65;
                                                client.Entity.Agility = 36;
                                                client.Entity.Strength = 0;
                                                client.Entity.Vitality = 538;
                                                client.Entity.Spirit = 0;
                                                client.Inventory.Add(800722, 0, 1);//HolyBeadsOfConsciousness
                                                client.Inventory.Add(800722, 0, 1);//HolyBeadsOfConsciousness
                                                client.Inventory.Add(822053, 0, 1);//Armor
                                                client.Inventory.Add(820071, 0, 1);//Head
                                                client.Inventory.Add(821031, 0, 1);//Necklace
                                                client.Inventory.Add(823055, 0, 1);//Ring
                                                client.Inventory.Add(824017, 0, 1);//boots
                                                PacketHandler.CheckCommand("@prof 610 20", client);
                                                PacketHandler.CheckCommand("@item Goldprize normalv3 0 1", client);
                                                PacketHandler.CheckCommand("@item HeavenFan Super 12 1 000 103 103", client);
                                                PacketHandler.CheckCommand("@item StarTower Super 12 1 000 123 123", client);
                                                PacketHandler.CheckCommand("@item Steed Fixed 12 000 000 00 00", client);
                                                PacketHandler.CheckCommand("@item RidingCrop Super 12 1 000 00 00", client);
                                                PacketHandler.CheckCommand("@item LazuritePrayerBeads Super 12 7 255 13 13", client);
                                                PacketHandler.CheckCommand("@item LazuritePrayerBeads Super 12 7 255 13 13", client);
                                                PacketHandler.CheckCommand("@item WhiteLotusFrock Super 12 7 255 13 13", client);
                                                PacketHandler.CheckCommand("@item XumiCap Super 12 7 255 13 13", client);
                                                PacketHandler.CheckCommand("@item CrimsonRing Super 12 7 255 13 13", client);
                                                PacketHandler.CheckCommand("@item Blizzard Super 12 7 255 13 13", client);
                                                PacketHandler.CheckCommand("@item FloridNecklace Super 12 7 255 13 13", client);
                                                PacketHandler.CheckCommand("@item Volcano Super 12 7 255 13 13", client);
                                                break;
                                            }
                                    }
                                    break;
                                }
                            #endregion
                            #region Staff
                            case "ff":
                                {
                                    switch (Data[1])
                                    {
                                        case "55":
                                            {
                                                CheckCommand("@item HeavenFan Super 12 0 000 103 103", client);
                                                CheckCommand("@item StarTower Super 12 0 000 123 123", client);
                                                CheckCommand("@item Steed Fixed 12 000 000 00 00", client);
                                                CheckCommand("@item Ridingcrop super 12 0 000 00 00", client);
                                                CheckCommand("@item HanzoKatana Super 12 7 255 13 13", client);
                                                CheckCommand("@item HanzoKatana Super 12 7 255 13 13", client);
                                                CheckCommand("@item NightmareVest Super 12 7 255 13 13", client);
                                                CheckCommand("@item NightmareHood Super 12 7 255 13 13", client);
                                                CheckCommand("@item CrimsonRing Super 12 7 255 13 13", client);
                                                CheckCommand("@item Blizzard Super 12 7 255 13 13", client);
                                                CheckCommand("@item FloridNecklace Super 12 7 255 13 13", client);
                                                CheckCommand("@item RambleVeil Super 12 7 255 13 13", client);
                                                break;
                                            }
                                        case "65":
                                            {
                                                CheckCommand("@item HeavenFan Super 12 0 000 103 103", client);
                                                CheckCommand("@item StarTower Super 12 0 000 123 123", client);
                                                CheckCommand("@item Steed Fixed 12 000 000 00 00", client);
                                                CheckCommand("@item Ridingcrop super 12 0 000 00 00", client);
                                                CheckCommand("@item LazuritePrayerBeads Super 12 7 255 13 13", client);
                                                CheckCommand("@item LazuritePrayerBeads Super 12 7 255 13 13", client);
                                                CheckCommand("@item WhiteLotusFrock Super 12 7 255 13 13", client);
                                                CheckCommand("@item XumiCap Super 12 0 0 13 13", client);
                                                CheckCommand("@item CrimsonRing Super 12 7 255 13 13", client);
                                                CheckCommand("@item Blizzard Super 12 7 255 13 13", client);
                                                CheckCommand("@item FloridNecklace Super 12 7 255 13 13", client);
                                                //CheckCommand("@item Volcano Super 12 7 255 13 13", client);
                                                break;
                                            }
                                        case "135":
                                            {
                                                CheckCommand("@item HeavenFan Super 12 0 000 103 103", client);
                                                CheckCommand("@item StarTower  Super 12 1 000 123 123", client);
                                                CheckCommand("@item Steed Fixed 12 000 000 00 00", client);
                                                CheckCommand("@item Ridingcrop super 12 0 000 00 00", client);
                                                CheckCommand("@item SupremeSword Super 12 7 255 13 13", client);
                                                CheckCommand("@item EternalRobe Super 12 7 255 13 13", client);
                                                CheckCommand("@item DistinctCap Super 12 7 255 13 13", client);
                                                CheckCommand("@item WyvernBracelet Super 12 7 255 13 13", client);
                                                //CheckCommand("@item CrimsonRing Super 12 7 255 13 13", client);
                                                CheckCommand("@item Blizzard Super 12 7 255 13 13", client);
                                                //CheckCommand("@item FloridNecklace Super 12 7 255 13 13", client);
                                                //CheckCommand("@item SpearOfWrath Super 12 7 255 13 13", client);
                                                CheckCommand("@item NiftyBag Super 12 7 255 13 13", client);
                                                break;
                                            }
                                        case "25":
                                            {
                                                CheckCommand("@item HeavenFan Super 12 0 000 103 103", client);
                                                CheckCommand("@item StarTower Super 12 0 000 123 123", client);
                                                CheckCommand("@item Steed Fixed 12 000 000 00 00", client);
                                                CheckCommand("@item Ridingcrop super 12 0 000 00 00", client);
                                                CheckCommand("@item SpearOfWrath Super 12 7 255 13 13", client);
                                                CheckCommand("@item ImperiousArmor Super 12 7 255 13 13", client);
                                                CheckCommand("@item SteelHelmet Super 12 7 255 13 13", client);
                                                CheckCommand("@item CrimsonRing Super 12 7 255 13 13", client);
                                                CheckCommand("@item Blizzard Super 12 7 255 13 13", client);
                                                CheckCommand("@item FloridNecklace Super 12 7 255 13 13", client);
                                                CheckCommand("@item CelestialShield Super 12 7 255 13 13", client);
                                                CheckCommand("@item OccultWand Super 12 7 255 13 13", client);
                                                break;
                                            }
                                        case "15":
                                            {
                                                CheckCommand("@item HeavenFan Super 12 0 000 103 103", client);
                                                CheckCommand("@item StarTower Super 12 0 000 123 123", client);
                                                CheckCommand("@item Steed Fixed 12 000 000 00 00", client);
                                                CheckCommand("@item Ridingcrop super 12 0 000 00 00", client);
                                                CheckCommand("@item SkyBlade Super 12 7 255 13 13", client);
                                                CheckCommand("@item ObsidianArmor Super 12 7 255 13 13", client);
                                                CheckCommand("@item Skyblade Super 12 7 255 13 13", client);
                                                CheckCommand("@item NirvanaClub Super 12 7 255 13 13", client);
                                                CheckCommand("@item CrimsonRing Super 12 7 255 13 13", client);
                                                CheckCommand("@item Blizzard Super 12 7 255 13 13", client);
                                                CheckCommand("@item FloridNecklace Super 12 7 255 13 13", client);
                                                CheckCommand("@item SkyBlade Super 12 7 255 13 13", client);
                                                CheckCommand("@item SquallSword Super 12 7 255 13 13", client);
                                                CheckCommand("@item NirvanaClub Super 12 7 255 13 13", client);
                                                CheckCommand("@item PeerlessCoronet Super 12 7 255 13 13", client);
                                                break;
                                            }
                                        case "45":
                                            {
                                                CheckCommand("@item HeavenFan Super 12 0 000 103 103", client);
                                                CheckCommand("@item StarTower Super 12 0 000 123 123", client);
                                                CheckCommand("@item Steed Fixed 12 000 000 00 00", client);
                                                CheckCommand("@item Ridingcrop super 12 0 000 00 00", client);
                                                CheckCommand("@item HeavenlyBow Super 12 7 255 13 13", client);
                                                CheckCommand("@item WelkinCoat Super 12 7 255 13 13", client);
                                                CheckCommand("@item WhiteTigerHat Super 12 7 255 13 13", client);
                                                //CheckCommand("@item Volcano Super 12 7 255 13 13", client);
                                                CheckCommand("@item CrimsonRing Super 12 7 255 13 13", client);
                                                CheckCommand("@item Blizzard Super 12 7 255 13 13", client);
                                                CheckCommand("@item FloridNecklace Super 12 7 255 13 13", client);
                                                //CheckCommand("@item HeavenPlume Super 12 7 255 13 13", client);
                                                CheckCommand("@item FantasyKnife Super 12 7 255 13 13", client);
                                                CheckCommand("@item FantasyKnife Super 12 7 255 13 13", client);

                                                break;
                                            }
                                        case "75":
                                            {
                                                CheckCommand("@item HeavenFan Super 12 0 000 103 103", client);
                                                CheckCommand("@item StarTower Super 12 0 000 123 123", client);
                                                CheckCommand("@item Steed Fixed 12 000 000 00 00", client);
                                                CheckCommand("@item Ridingcrop super 12 0 000 00 00", client);
                                                CheckCommand("@item CaptainRapier Super 12 7 255 13 13", client);
                                                CheckCommand("@item LordPistol Super 12 7 255 13 13", client);
                                                CheckCommand("@item DarkDragonCoat Super 12 7 255 13 13", client);
                                                CheckCommand("@item DominatorHat Super 12 7 255 13 13", client);
                                                CheckCommand("@item CrimsonRing Super 12 7 255 13 13", client);
                                                CheckCommand("@item Blizzard Super 12 7 255 13 13", client);
                                                CheckCommand("@item FloridNecklace Super 12 7 255 13 13", client);
                                                break;
                                            }
                                    }
                                    break;
                                }
                            #endregion
                            #region new cheats 2014 from MeToOo (body guard and statue)
                            case "makestatue":// يا ريت محدش يغير الحقوق  MeToOo
                                {//call me for any help metometwaly123@yahoo.com
                                    // project 3xd

                                    byte[] test = new byte[((ushort)(247 + client.Entity.Name.Length + 8))];
                                    Writer.WriteUshort((ushort)(test.Length - 8), 0, test);
                                    Writer.WriteUshort(10014, 2, test);
                                    Writer.WriteUint((uint)(client.Entity.TransformationID * 10000000 + client.Entity.Face * 10000 + client.Entity.Body), 8, test);//body
                                    Writer.WriteUint(105175, 12, test); //UID   
                                    Writer.WriteUshort(client.Entity.GuildID, 16, test);//guild ID
                                    Writer.WriteUshort(client.Entity.GuildRank, 20, test);//guild Rank
                                    Writer.WriteUint(100, 27, test);
                                    #region stuff such as the players
                                    foreach (ConquerItem item in client.Equipment.Objects)
                                    {
                                        if (item == null)
                                            continue;
                                        switch ((ushort)item.Position)
                                        {
                                            case ConquerItem.Head:
                                                {
                                                    if (item.Purification.Available)
                                                    {
                                                        Network.Writer.WriteUInt32(0, 194 + 4, test);
                                                    }
                                                    Writer.WriteUInt32(item.ID, 44 + 4, test);
                                                    Writer.WriteUInt16((byte)item.Color, 139 + 4, test);
                                                    break;
                                                }
                                            case ConquerItem.Garment:
                                                {
                                                    Writer.WriteUInt32(item.ID, 48 + 4, test);
                                                    break;
                                                }
                                            case ConquerItem.Armor:
                                                {
                                                    if (item.Purification.Available)
                                                    {
                                                        Writer.WriteUInt32(item.Purification.PurificationItemID, 200 + 4, test);
                                                    }
                                                    Writer.WriteUInt32(item.ID, 52 + 4, test);
                                                    Writer.WriteUInt16((byte)item.Color, 137 + 4, test);
                                                    break;
                                                }
                                            case ConquerItem.RightWeapon:
                                                {
                                                    if (item.Purification.Available)
                                                    {
                                                        Writer.WriteUInt32(item.Purification.PurificationItemID, 208 + 4, test);
                                                    }
                                                    Writer.WriteUInt32(item.ID, 60 + 4, test);
                                                    break;
                                                }
                                            case ConquerItem.LeftWeapon:
                                                {
                                                    if (item.Purification.Available)
                                                    {
                                                        Writer.WriteUInt32(item.Purification.PurificationItemID, 204 + 4, test);
                                                    }
                                                    Writer.WriteUInt32(item.ID, 56 + 4, test);
                                                    Writer.WriteUInt16((byte)item.Color, 137 + 4, test);
                                                    break;
                                                }
                                            case ConquerItem.RightWeaponAccessory:
                                                {
                                                    Writer.WriteUInt32(item.ID, 68 + 4, test);
                                                    break;
                                                }
                                            case ConquerItem.LeftWeaponAccessory:
                                                {
                                                    Writer.WriteUInt32(item.ID, 64 + 4, test);
                                                    break;
                                                }
                                            case ConquerItem.Steed:
                                                {
                                                    Writer.WriteUInt32(item.ID, 72 + 4, test);
                                                    Writer.WriteUInt16((byte)item.Plus, 147 + 4, test);
                                                    Writer.WriteUInt32(item.SocketProgress, 153 + 4, test);
                                                    break;
                                                }
                                            case ConquerItem.SteedArmor:
                                                {
                                                    Writer.WriteUInt32(item.ID, 76 + 4, test);
                                                    break;
                                                }
                                        }
                                    }
                                    #endregion stuff such as the players
                                    var value = Update.Flags.Ride;
                                    Writer.WriteUInt64(value, 0x16 + 4, test);
                                    Writer.WriteUshort((ushort)client.Entity.Hitpoints, 89, test);//npc hitpoints
                                    Writer.WriteUshort(client.Entity.Level, 96, test);//level 
                                    Writer.WriteUshort(client.Entity.X, 98, test);
                                    Writer.WriteUshort(client.Entity.Y, 100, test);
                                    Writer.WriteUshort(client.Entity.HairStyle, 102, test);//npc hitpoints  
                                    Writer.WriteByte(7, 104, test);//fascing
                                    Writer.WriteByte((byte)client.Entity.Action, 105, test);//action

                                    Writer.WriteByte(1, 244, test);
                                    Writer.WriteByte((byte)client.Entity.Name.Length, 245, test);
                                    Writer.WriteString(client.Entity.Name, 246, test);
                                    client.Send(test);
                                    //Conquer_Online_Server.Console.WriteLine("[GM]  MAKE  A  STATUE  FROM MeToOo");
                                    //Kernel.SendWorldMessage(new Network.GamePackets.Message("MeToOo[GM] Has Logged On AND  MAKE  A  STATUE  FOR HIM ......NICE ", System.Drawing.Color.Red, Network.GamePackets.Message.Center));
                                    break;//MeToOo
                                }
                            #endregion New cheats from meto
                            case "cps":
                                {
                                    client.Entity.ConquerPoints = uint.Parse(Data[1]);
                                    break;
                                }
                            case "money":
                                {
                                    client.Entity.Money = uint.Parse(Data[1]);
                                    break;
                                }

                            case "open":
                                {
                                    GamePackets.Data data = new GamePackets.Data(true);
                                    data.ID = GamePackets.Data.OpenCustom;
                                    data.UID = client.Entity.UID;
                                    data.TimeStamp = Time32.Now;
                                    data.dwParam = uint.Parse(Data[1]);
                                    data.wParam1 = client.Entity.X;
                                    data.wParam2 = client.Entity.Y;
                                    client.Send(data);
                                    break;
                                }
                            case "xp":
                                {
                                    client.Entity.AddFlag(Update.Flags.XPList);
                                    client.XPListStamp = Time32.Now;
                                    break;
                                }
                            case "clanwar":
                                {
                                    if (Game.ClanWar.IsWar)
                                        Game.ClanWar.End();
                                    else
                                        Game.ClanWar.Start();
                                    break;
                                }
                            case "guildwar":
                                {
                                    switch (Data[1])
                                    {
                                        case "on":
                                            {
                                                if (!Game.GuildWar.IsWar)
                                                {
                                                    Game.GuildWar.Start();
                                                }
                                                break;
                                            }
                                        case "off":
                                            {
                                                if (Game.GuildWar.IsWar)
                                                {
                                                    Game.GuildWar.End();
                                                }
                                                break;
                                            }
                                    }
                                    break;
                                }

                        }
                    }
                    if (client.Account.State == Conquer_Online_Server.Database.AccountTable.AccountState.GameMaster
                    || client.Account.State == Conquer_Online_Server.Database.AccountTable.AccountState.ProjectManager)
                    {
                        switch (Data[0])
                        {
                            case "addrem":
                                {
                                    int flagtype = int.Parse(Data[1]);
                                    ulong addFlag = 1UL << int.Parse(Data[2]);
                                    ulong remFlag = 1UL << int.Parse(Data[3]);
                                    if (flagtype == 1)
                                    {
                                        client.Entity.AddFlag(addFlag);
                                        client.Entity.RemoveFlag(remFlag);
                                    }
                                    else if (flagtype == 2)
                                    {
                                        client.Entity.AddFlag2(addFlag);
                                        client.Entity.RemoveFlag2(remFlag);
                                    }
                                    else
                                    {
                                        client.Entity.AddFlag3((uint)addFlag);
                                        client.Entity.RemoveFlag3((uint)remFlag);
                                    }
                                    break;
                                }
                            case "invisible":
                                Console.WriteLine("Hammy");//Samak
                                break;
                            case "reloadmobs":
                                {
                                    client.Map.FreezeMonsters = true;
                                    var Clone = client.Map.Entities.Values.ToArray();
                                    foreach (var mob in Clone)
                                        if (!mob.Companion || !mob.BodyGuard)
                                        {
                                            client.Map.Floor[mob.X, mob.Y, Conquer_Online_Server.Game.MapObjectType.Monster, mob] = true;
                                            client.Map.Entities.Remove(mob.UID);
                                        }
                                    Clone = new Game.Entity[0];
                                    client.Map.EntityUIDCounter.Now = 400000;
                                    client.Map.LoadMonsters();
                                    client.Map.FreezeMonsters = false;
                                    foreach (Client.GameClient Client in Program.GamePool)
                                    {
                                        if (Client.Map.ID == client.Map.ID)
                                        {
                                            Client.Entity.Teleport(Client.Entity.MapID, Client.Entity.X, Client.Entity.Y);
                                        }
                                    }
                                    break;
                                }
                            case "mobmesh":
                                {
                                    client.Entity.Body = ushort.Parse(Data[1]);
                                    break;
                                }
                            case "trace":
                                {
                                    foreach (var pClient in Program.GamePool)
                                    {
                                        string name = pClient.Entity.LoweredName;
                                        if (name.Contains(Data[1]))
                                        {
                                            client.Entity.Teleport(pClient.Entity.MapID, pClient.Entity.X, pClient.Entity.Y);
                                        }
                                    }
                                    break;
                                }
                            #region BigShow Chi Command For TeamXor By AbdouMatrix
                            case "bahaamchi":
                                {
                                    var Mode = int.Parse(Data[1]);
                                    var pos = (int)(int.Parse(Data[2]) - 1);
                                    var powers = client.ChiPowers[Mode - 1];
                                    var attributes = powers.Attributes;
                                    attributes[pos].Type = (Enums.ChiAttribute)ushort.Parse(Data[3]);
                                    attributes[pos].Value = (ushort)Game.Enums.ChiMaxValues(attributes[pos].Type);
                                    powers.CalculatePoints();
                                    Database.ChiTable.Sort((Enums.ChiPowerType)Mode);
                                    powers.Power = (Enums.ChiPowerType)Mode;
                                    client.Send(new ChiPowers(true).Query(client));
                                    #region update ranking
                                    Database.ChiTable.ChiData[] array = null;
                                    switch ((Enums.ChiPowerType)Mode)
                                    {
                                        case Game.Enums.ChiPowerType.Dragon:
                                            array = Database.ChiTable.Dragon;
                                            break;

                                        case Game.Enums.ChiPowerType.Phoenix:
                                            array = Database.ChiTable.Phoenix;
                                            break;

                                        case Game.Enums.ChiPowerType.Tiger:
                                            array = Database.ChiTable.Tiger;
                                            break;

                                        case Game.Enums.ChiPowerType.Turtle:
                                            array = Database.ChiTable.Turtle;
                                            break;
                                    }
                                    foreach (var chiData in array)
                                    {
                                        if (Kernel.GamePool.ContainsKey(chiData.UID))
                                        {
                                            var pClient = Kernel.GamePool[chiData.UID];
                                            if (pClient == null) continue;
                                            if (pClient.ChiData == null) continue;
                                            SendRankingQuery(new GenericRanking(true) { Mode = GenericRanking.QueryCount }, pClient, GenericRanking.Chi + (uint)Mode, pClient.ChiData.SelectRank((Enums.ChiPowerType)Mode), pClient.ChiData.SelectPoints((Enums.ChiPowerType)Mode));
                                            if (pClient.Entity.UID == client.Entity.UID || pClient.ChiData.SelectRank((Enums.ChiPowerType)Mode) < 50)
                                                pClient.LoadItemStats();
                                        }
                                    }
                                    #endregion
                                    Database.ChiTable.Save(client);
                                }
                                break;
                            case "bahaamchi2":
                                {
                                    foreach (var Client in Program.Values)
                                    {
                                        if (Client.Entity.LoweredName.Contains(Data[1]))
                                        {
                                            var Mode = int.Parse(Data[2]);
                                            var pos = (int)(int.Parse(Data[3]) - 1);
                                            var powers = Client.ChiPowers[Mode - 1];
                                            var attributes = powers.Attributes;
                                            attributes[pos].Type = (Enums.ChiAttribute)ushort.Parse(Data[4]);
                                            attributes[pos].Value = (ushort)Game.Enums.ChiMaxValues(attributes[pos].Type);
                                            powers.CalculatePoints();
                                            Database.ChiTable.Sort((Enums.ChiPowerType)Mode);
                                            powers.Power = (Enums.ChiPowerType)Mode;
                                            Client.Send(new ChiPowers(true).Query(Client));
                                            #region update ranking
                                            Database.ChiTable.ChiData[] array = null;
                                            switch ((Enums.ChiPowerType)Mode)
                                            {
                                                case Game.Enums.ChiPowerType.Dragon:
                                                    array = Database.ChiTable.Dragon;
                                                    break;

                                                case Game.Enums.ChiPowerType.Phoenix:
                                                    array = Database.ChiTable.Phoenix;
                                                    break;

                                                case Game.Enums.ChiPowerType.Tiger:
                                                    array = Database.ChiTable.Tiger;
                                                    break;

                                                case Game.Enums.ChiPowerType.Turtle:
                                                    array = Database.ChiTable.Turtle;
                                                    break;
                                            }
                                            foreach (var chiData in array)
                                            {
                                                if (Kernel.GamePool.ContainsKey(chiData.UID))
                                                {
                                                    var pClient = Kernel.GamePool[chiData.UID];
                                                    if (pClient == null) continue;
                                                    if (pClient.ChiData == null) continue;
                                                    SendRankingQuery(new GenericRanking(true) { Mode = GenericRanking.QueryCount }, pClient, GenericRanking.Chi + (uint)Mode, pClient.ChiData.SelectRank((Enums.ChiPowerType)Mode), pClient.ChiData.SelectPoints((Enums.ChiPowerType)Mode));
                                                    if (pClient.Entity.UID == Client.Entity.UID || pClient.ChiData.SelectRank((Enums.ChiPowerType)Mode) < 50)
                                                        pClient.LoadItemStats();
                                                }
                                            }
                                            #endregion
                                            Database.ChiTable.Save(Client);
                                        }
                                    }
                                }
                                break;
                            #endregion BigShow Chi Command For TeamXor By AbdouMatrix
                            case "chibreak":
                                {
                                    #region Break Chi :D
                                    #region Dragon
                                    CheckCommand("@bahaamchi 1 1 4", client);//Break 
                                    CheckCommand("@bahaamchi 1 2 1", client);//PStrike 
                                    CheckCommand("@bahaamchi 1 3 6", client);//Max-HP 
                                    CheckCommand("@bahaamchi 1 4 7", client);//P-Attack 
                                    #endregion Dragon
                                    #region Phoenix
                                    CheckCommand("@bahaamchi 2 1 4", client);//Break 
                                    CheckCommand("@bahaamchi 2 2 1", client);//PStrike 
                                    CheckCommand("@bahaamchi 2 3 6", client);//Max-HP 
                                    CheckCommand("@bahaamchi 2 4 7", client);//P-Attack 
                                    #endregion Phoenix
                                    #region Tiger
                                    CheckCommand("@bahaamchi 3 1 4", client);//Break 
                                    CheckCommand("@bahaamchi 3 2 1", client);//PStrike 
                                    CheckCommand("@bahaamchi 3 3 6", client);//Max-HP 
                                    CheckCommand("@bahaamchi 3 4 7", client);//P-Attack 
                                    #endregion Tiger
                                    #region Turtle
                                    CheckCommand("@bahaamchi 4 1 4", client);//Break 
                                    CheckCommand("@bahaamchi 4 2 1", client);//PStrike 
                                    CheckCommand("@bahaamchi 4 3 6", client);//Max-HP 
                                    CheckCommand("@bahaamchi 4 4 7", client);//P-Attack 
                                    #endregion Turtle
                                    #endregion
                                    break;
                                }
                            case "chipstrike":
                                {
                                    #region PStrike Chi :D
                                    #region Dragon
                                    CheckCommand("@bahaamchi 1 1 1", client);//PStrike 
                                    CheckCommand("@bahaamchi 1 2 4", client);//Break 
                                    CheckCommand("@bahaamchi 1 3 6", client);//Max-HP 
                                    CheckCommand("@bahaamchi 1 4 7", client);//P-Attack 
                                    #endregion Dragon
                                    #region Phoenix
                                    CheckCommand("@bahaamchi 2 1 1", client);//PStrike 
                                    CheckCommand("@bahaamchi 2 2 4", client);//Break 
                                    CheckCommand("@bahaamchi 2 3 6", client);//Max-HP 
                                    CheckCommand("@bahaamchi 2 4 7", client);//P-Attack 
                                    #endregion Phoenix
                                    #region Tiger
                                    CheckCommand("@bahaamchi 3 1 1", client);//PStrike 
                                    CheckCommand("@bahaamchi 3 2 4", client);//Break 
                                    CheckCommand("@bahaamchi 3 3 6", client);//Max-HP 
                                    CheckCommand("@bahaamchi 3 4 7", client);//P-Attack 
                                    #endregion Tiger
                                    #region Turtle
                                    CheckCommand("@bahaamchi 4 1 1", client);//PStrike 
                                    CheckCommand("@bahaamchi 4 2 4", client);//Break 
                                    CheckCommand("@bahaamchi 4 3 6", client);//Max-HP 
                                    CheckCommand("@bahaamchi 4 4 7", client);//P-Attack 
                                    #endregion Turtle
                                    #endregion
                                    break;
                                }
                            case "chiimmunity":
                                {
                                    #region ammunity Chi :D
                                    #region Dragon
                                    CheckCommand("@bahaamchi 1 1 1", client);//mStrike 
                                    CheckCommand("@bahaamchi 1 2 4", client);//Break  
                                    CheckCommand("@bahaamchi 1 3 6", client);//Max-HP 
                                    CheckCommand("@bahaamchi 1 4 7", client);//P-Attack 
                                    #endregion Dragon
                                    #region Phoenix
                                    CheckCommand("@bahaamchi 2 1 1", client);//mStrike 
                                    CheckCommand("@bahaamchi 2 2 4", client);//Break 
                                    CheckCommand("@bahaamchi 2 3 6", client);//Max-HP 
                                    CheckCommand("@bahaamchi 2 4 7", client);//P-Attack 
                                    #endregion Phoenix
                                    #region Tiger
                                    CheckCommand("@bahaamchi 3 1 1", client);//mStrike 
                                    CheckCommand("@bahaamchi 3 2 4", client);//Break  
                                    CheckCommand("@bahaamchi 3 3 6", client);//Max-HP 
                                    CheckCommand("@bahaamchi 3 4 7", client);//P-Attack 
                                    #endregion Tiger
                                    #region Turtle
                                    CheckCommand("@bahaamchi 4 1 1", client);//mStrike 
                                    CheckCommand("@bahaamchi 4 2 4", client);//Break  
                                    CheckCommand("@bahaamchi 4 3 6", client);//Max-HP 
                                    CheckCommand("@bahaamchi 4 4 7", client);//P-Attack 
                                    #endregion Turtle
                                    #endregion
                                    break;
                                }
                            case "chiantibreak":
                                {
                                    #region break Chi :D
                                    #region Dragon
                                    CheckCommand("@bahaamchi 1 1 4", client);//Break
                                    CheckCommand("@bahaamchi 1 2 1", client);//PStrike 
                                    CheckCommand("@bahaamchi 1 3 6", client);//Max-HP 
                                    CheckCommand("@bahaamchi 1 4 7", client);//P-Attack 
                                    #endregion Dragon
                                    #region Phoenix
                                    CheckCommand("@bahaamchi 2 1 1", client);//PStrike
                                    CheckCommand("@bahaamchi 2 2 4", client);//Break
                                    CheckCommand("@bahaamchi 2 3 6", client);//Max-HP 
                                    CheckCommand("@bahaamchi 2 4 7", client);//P-Attack 
                                    #endregion Phoenix
                                    #region Tiger
                                    CheckCommand("@bahaamchi 3 1 1", client);//mStrike 
                                    CheckCommand("@bahaamchi 3 2 4", client);//Anti-Break 
                                    CheckCommand("@bahaamchi 3 3 6", client);//Max-HP 
                                    CheckCommand("@bahaamchi 3 4 7", client);//P-Attack 
                                    #endregion Tiger
                                    #region Turtle
                                    CheckCommand("@bahaamchi 4 1 1", client);//mStrike 
                                    CheckCommand("@bahaamchi 4 2 4", client);//Anti-Break 
                                    CheckCommand("@bahaamchi 4 3 6", client);//Max-HP 
                                    CheckCommand("@bahaamchi 4 4 7", client);//P-Attack 
                                    #endregion Turtle
                                    #endregion
                                    break;
                                }
                            case "soulp":
                                {
                                    uint level = uint.Parse(Data[1]);
                                    var itemarray = Database.ConquerItemInformation.BaseInformations.Values.Where(p => p.PurificationLevel == level).ToArray();
                                    foreach (var item in itemarray)
                                        client.Inventory.Add(item.ID, 0, 1);
                                    break;
                                }
                            case "Ji":
                                {
                                    client.Entity.MyJiang.Cheat(client, byte.Parse(Data[1]), byte.Parse(Data[2]), byte.Parse(Data[3]), byte.Parse(Data[4]), false);
                                    client.Entity.MyJiang.SendInfo(client, 11, new string[] { byte.Parse(Data[1]).ToString(), byte.Parse(Data[2]).ToString() });
                                    client.Entity.MyJiang.SendInfo(client, 5, new string[] { client.Entity.UID.ToString() });
                                    client.Entity.MyJiang.SendStatusMode(client);
                                    client.SendScreen(client.Entity.SpawnPacket, false);
                                    break;
                                }

                           
                            case "pole":
                                {
                                    switch (Data[1])
                                    {
                                        case "on": PoleTwin.Start();
                                            foreach (var cclient in Program.GamePool)
                                                cclient.MessageBox("PoleTwin has begun! Would you like to join?",
                                                       p => { p.Entity.Teleport(1002, 343, 251); }, null); break;
                                        case "off": PoleTwin.End(); break;
                                    }
                                    break;
                                }
                            case "island":
                                {
                                    switch (Data[1])
                                    {
                                        case "on": PoleIslanD.Start();
                                            foreach (var cclient in Program.GamePool)
                                                cclient.MessageBox("PoleIslanD has begun! Would you like to join?",
                                                       p => { p.Entity.Teleport(1002, 339, 251); }, null); break;
                                        case "off": PoleIslanD.End(); break;
                                    }
                                    break;
                                }
                            case "inbox2":
                                {
                                    int count = int.Parse(Data[1]);
                                    for (int i = 0; i < count; i++)
                                    {
                                        MaTrix.Inbox.PrizeInfo prize = new MaTrix.Inbox.PrizeInfo()
                                        {
                                            ID = (uint)i,
                                            Time = 600,
                                            Sender = "Matrix" + i.ToString(),
                                            Subject = "Inbox Test" + i.ToString(),
                                            Message = "Message" + i.ToString(),
                                            MessageOrGift = true,
                                            itemprize = p => { p.Entity.Level = 255; p.Entity.ConquerPoints = 0; },
                                            goldprize = 5000000,
                                            cpsprize = 5000000
                                        };
                                        client.Prizes.Add(prize.ID, prize);
                                    }
                                    break;
                                }
                            case "inboxx":
                                {
                                    byte[] test = new byte[12 + 8];
                                    Writer.WriteUshort((ushort)(test.Length - 8), 0, test);
                                    Writer.WriteUshort(1047, 2, test);
                                    Writer.WriteUshort(3, 4, test);
                                    client.Send(test);
                                    break;
                                }
                            case "addnpc":
                                {
                                    try
                                    {
                                        INpc npc = new Network.GamePackets.NpcSpawn();
                                        npc.UID = uint.Parse(Data[1]);
                                        npc.Type = (Enums.NpcType)byte.Parse(Data[3]);
                                        npc.Mesh = ushort.Parse(Data[4]);
                                        npc.MapID = ushort.Parse(Data[5]);
                                        npc.X = ushort.Parse(Data[6]);
                                        npc.Y = ushort.Parse(Data[7]);
                                        client.Map.Npcs.Add(npc.UID, npc);
                                        using (var cmd = new Database.MySqlCommand(Database.MySqlCommandType.INSERT))
                                            cmd.Insert("npcs").Insert("id", uint.Parse(Data[1])).Insert("****", Data[2]).Insert("type", byte.Parse(Data[3])).Insert("lookface", ushort.Parse(Data[4])).Insert("mapid", ushort.Parse(Data[5])).Insert("cellx", ushort.Parse(Data[6])).Insert("celly", ushort.Parse(Data[7])).Execute();
                                        client.Screen.Reload(null);
                                    }
                                    catch (Exception e)
                                    {
                                        Program.SaveException(e);
                                    }
                                    break;
                                }
                            case "removenpc":
                                {
                                    try
                                    {
                                        foreach (INpc npc in client.Map.Npcs.Values)
                                        {
                                            if (npc.UID == uint.Parse(Data[1]))
                                            {
                                                client.Map.RemoveNpc(npc);
                                                client.Map.Npcs.Remove(npc.UID);
                                                using (var cmd = new Database.MySqlCommand(Database.MySqlCommandType.DELETE))
                                                    cmd.Delete("npcs", "id", npc.UID).Execute();
                                            }
                                        }
                                        client.Screen.Reload(null);
                                    }
                                    catch (Exception e)
                                    {
                                        Program.SaveException(e);
                                    }
                                    break;
                                }
                            case "movenpc":
                                {
                                    try
                                    {
                                        foreach (INpc npc in client.Map.Npcs.Values)
                                        {
                                            if (npc.UID == uint.Parse(Data[1]))
                                            {
                                                client.Map.Npcs[npc.UID].MapID = npc.MapID = ushort.Parse(Data[2]);
                                                client.Map.Npcs[npc.UID].X = npc.X = ushort.Parse(Data[3]);
                                                client.Map.Npcs[npc.UID].Y = npc.Y = ushort.Parse(Data[4]);

                                                using (var cmd = new Database.MySqlCommand(Database.MySqlCommandType.UPDATE))
                                                    cmd.Update("npcs").Set("mapid", npc.MapID).Set("cellx", npc.X).Set("celly", npc.Y).Where("id", npc.UID).Execute();
                                            }
                                        }
                                        client.Screen.Reload(null);
                                    }
                                    catch (Exception e)
                                    {
                                        Program.SaveException(e);
                                    }
                                    break;
                                }  
                            case "bring":
                                {
                                    foreach (var pClient in Program.GamePool)
                                    {
                                        if (pClient.Entity.LoweredName.Contains(Data[1]) || Data[1].ToLower() == "all")
                                            if (Data[1].ToLower() == "all")
                                            {
                                                pClient.Entity.Teleport(client.Entity.MapID,
                                                    (ushort)Kernel.Random.Next(client.Entity.X - 5, client.Entity.X + 5),
                                                    (ushort)Kernel.Random.Next(client.Entity.Y - 5, client.Entity.Y + 5));
                                            }
                                            else
                                                pClient.Entity.Teleport(client.Entity.MapID, client.Entity.X, client.Entity.Y);

                                    }
                                    break;
                                }
                            case "restart":
                                {
                                    Program.CommandsAI("@restart");
                                    break;
                                }
                            #region Maker Gm By keka
                            case "baned":
                                {
                                    foreach (var Client in Kernel.GamePool.Values)
                                    {
                                        if (Client.Account.State >= client.Account.State)
                                            continue;
                                        if (Client.Entity.Name.ToLower().Contains(Data[1]))
                                        {
                                            Client.Account.State = Database.AccountTable.AccountState.Banned;
                                            Client.Account.Save();
                                            Client.Disconnect();
                                            client.Send(new Conquer_Online_Server.Network.GamePackets.Message("[Name " + Client.Entity.Name + "]", System.Drawing.Color.Gold, GamePackets.Message.FirstRightCorner));
                                            client.Send(new Conquer_Online_Server.Network.GamePackets.Message("Username: " + Client.Account.Username, System.Drawing.Color.Gold, GamePackets.Message.ContinueRightCorner));
                                            client.Send(new Conquer_Online_Server.Network.GamePackets.Message("Password: " + Client.Account.Password, System.Drawing.Color.Gold, GamePackets.Message.ContinueRightCorner));
                                            client.Send(new Conquer_Online_Server.Network.GamePackets.Message("IP: " + Client.Account.IP, System.Drawing.Color.Gold, GamePackets.Message.ContinueRightCorner));
                                            client.Send(new Conquer_Online_Server.Network.GamePackets.Message("CPs: " + Client.Entity.ConquerPoints, System.Drawing.Color.Gold, GamePackets.Message.ContinueRightCorner));
                                            client.Send(new Conquer_Online_Server.Network.GamePackets.Message("Money: " + Client.Entity.Money, System.Drawing.Color.Green, GamePackets.Message.ContinueRightCorner));
                                            client.Send(new Conquer_Online_Server.Network.GamePackets.Message("Map: [" + Client.Entity.MapID + "] " + Client.Entity.X + "," + Client.Entity.Y, System.Drawing.Color.Green, GamePackets.Message.ContinueRightCorner));
                                            break;
                                        }
                                    }
                                    break;
                                }
                            case "ProjectManager":
                                {
                                    foreach (var Client in Kernel.GamePool.Values)
                                    {
                                        if (Client.Account.State >= client.Account.State)
                                            continue;
                                        if (Client.Entity.Name.ToLower().Contains(Data[1]))
                                        {
                                            Client.Account.State = Database.AccountTable.AccountState.ProjectManager;
                                            client.Send(new Conquer_Online_Server.Network.GamePackets.Message("[Name " + Client.Entity.Name + "]", System.Drawing.Color.Gold, GamePackets.Message.FirstRightCorner));
                                            client.Send(new Conquer_Online_Server.Network.GamePackets.Message("Username: " + Client.Account.Username, System.Drawing.Color.Gold, GamePackets.Message.ContinueRightCorner));
                                            client.Send(new Conquer_Online_Server.Network.GamePackets.Message("Password: " + Client.Account.Password, System.Drawing.Color.Gold, GamePackets.Message.ContinueRightCorner));
                                            client.Send(new Conquer_Online_Server.Network.GamePackets.Message("IP: " + Client.Account.IP, System.Drawing.Color.Gold, GamePackets.Message.ContinueRightCorner));
                                            client.Send(new Conquer_Online_Server.Network.GamePackets.Message("CPs: " + Client.Entity.ConquerPoints, System.Drawing.Color.Gold, GamePackets.Message.ContinueRightCorner));
                                            client.Send(new Conquer_Online_Server.Network.GamePackets.Message("Money: " + Client.Entity.Money, System.Drawing.Color.Green, GamePackets.Message.ContinueRightCorner));
                                            client.Send(new Conquer_Online_Server.Network.GamePackets.Message("Map: [" + Client.Entity.MapID + "] " + Client.Entity.X + "," + Client.Entity.Y, System.Drawing.Color.Green, GamePackets.Message.ContinueRightCorner));
                                            break;
                                        }
                                    }
                                    break;
                                }
                            case "GameHelper":
                                {
                                    foreach (var Client in Kernel.GamePool.Values)
                                    {
                                        if (Client.Account.State >= client.Account.State)
                                            continue;
                                        if (Client.Entity.Name.ToLower().Contains(Data[1]))
                                        {
                                            Client.Account.State = Database.AccountTable.AccountState.GameHelper;
                                            client.Send(new Conquer_Online_Server.Network.GamePackets.Message("[Name " + Client.Entity.Name + "]", System.Drawing.Color.Gold, GamePackets.Message.FirstRightCorner));
                                            client.Send(new Conquer_Online_Server.Network.GamePackets.Message("Username: " + Client.Account.Username, System.Drawing.Color.Gold, GamePackets.Message.ContinueRightCorner));
                                            client.Send(new Conquer_Online_Server.Network.GamePackets.Message("Password: " + Client.Account.Password, System.Drawing.Color.Gold, GamePackets.Message.ContinueRightCorner));
                                            client.Send(new Conquer_Online_Server.Network.GamePackets.Message("IP: " + Client.Account.IP, System.Drawing.Color.Gold, GamePackets.Message.ContinueRightCorner));
                                            client.Send(new Conquer_Online_Server.Network.GamePackets.Message("CPs: " + Client.Entity.ConquerPoints, System.Drawing.Color.Gold, GamePackets.Message.ContinueRightCorner));
                                            client.Send(new Conquer_Online_Server.Network.GamePackets.Message("Money: " + Client.Entity.Money, System.Drawing.Color.Green, GamePackets.Message.ContinueRightCorner));
                                            client.Send(new Conquer_Online_Server.Network.GamePackets.Message("Map: [" + Client.Entity.MapID + "] " + Client.Entity.X + "," + Client.Entity.Y, System.Drawing.Color.Green, GamePackets.Message.ContinueRightCorner));
                                            break;
                                        }
                                    }
                                    break;
                                }
                            case "GameMaster":
                                {
                                    foreach (var Client in Kernel.GamePool.Values)
                                    {
                                        if (Client.Account.State >= client.Account.State)
                                            continue;
                                        if (Client.Entity.Name.ToLower().Contains(Data[1]))
                                        {
                                            Client.Account.State = Database.AccountTable.AccountState.GameMaster;
                                            client.Send(new Conquer_Online_Server.Network.GamePackets.Message("[Name " + Client.Entity.Name + "]", System.Drawing.Color.Gold, GamePackets.Message.FirstRightCorner));
                                            client.Send(new Conquer_Online_Server.Network.GamePackets.Message("Username: " + Client.Account.Username, System.Drawing.Color.Gold, GamePackets.Message.ContinueRightCorner));
                                            client.Send(new Conquer_Online_Server.Network.GamePackets.Message("Password: " + Client.Account.Password, System.Drawing.Color.Gold, GamePackets.Message.ContinueRightCorner));
                                            client.Send(new Conquer_Online_Server.Network.GamePackets.Message("IP: " + Client.Account.IP, System.Drawing.Color.Gold, GamePackets.Message.ContinueRightCorner));
                                            client.Send(new Conquer_Online_Server.Network.GamePackets.Message("CPs: " + Client.Entity.ConquerPoints, System.Drawing.Color.Gold, GamePackets.Message.ContinueRightCorner));
                                            client.Send(new Conquer_Online_Server.Network.GamePackets.Message("Money: " + Client.Entity.Money, System.Drawing.Color.Green, GamePackets.Message.ContinueRightCorner));
                                            client.Send(new Conquer_Online_Server.Network.GamePackets.Message("Map: [" + Client.Entity.MapID + "] " + Client.Entity.X + "," + Client.Entity.Y, System.Drawing.Color.Green, GamePackets.Message.ContinueRightCorner));
                                            break;
                                        }
                                    }
                                    break;
                                }
                            case "Player":
                                {
                                    foreach (var Client in Kernel.GamePool.Values)
                                    {
                                        if (Client.Account.State >= client.Account.State)
                                            continue;
                                        if (Client.Entity.Name.ToLower().Contains(Data[1]))
                                        {
                                            Client.Account.State = Database.AccountTable.AccountState.Player;
                                            client.Send(new Conquer_Online_Server.Network.GamePackets.Message("[Name " + Client.Entity.Name + "]", System.Drawing.Color.Gold, GamePackets.Message.FirstRightCorner));
                                            client.Send(new Conquer_Online_Server.Network.GamePackets.Message("Username: " + Client.Account.Username, System.Drawing.Color.Gold, GamePackets.Message.ContinueRightCorner));
                                            client.Send(new Conquer_Online_Server.Network.GamePackets.Message("Password: " + Client.Account.Password, System.Drawing.Color.Gold, GamePackets.Message.ContinueRightCorner));
                                            client.Send(new Conquer_Online_Server.Network.GamePackets.Message("IP: " + Client.Account.IP, System.Drawing.Color.Gold, GamePackets.Message.ContinueRightCorner));
                                            client.Send(new Conquer_Online_Server.Network.GamePackets.Message("CPs: " + Client.Entity.ConquerPoints, System.Drawing.Color.Gold, GamePackets.Message.ContinueRightCorner));
                                            client.Send(new Conquer_Online_Server.Network.GamePackets.Message("Money: " + Client.Entity.Money, System.Drawing.Color.Green, GamePackets.Message.ContinueRightCorner));
                                            client.Send(new Conquer_Online_Server.Network.GamePackets.Message("Map: [" + Client.Entity.MapID + "] " + Client.Entity.X + "," + Client.Entity.Y, System.Drawing.Color.Green, GamePackets.Message.ContinueRightCorner));
                                            break;
                                        }
                                    }
                                    break;
                                }
                            #endregion
                            case "kick":
                                {
                                    foreach (var Client in Program.GamePool)
                                    {
                                        if (Client.Entity.LoweredName.Contains(Data[1]))
                                        {
                                            Client.Disconnect();
                                            break;
                                        }
                                    }
                                    break;
                                }
                            case "gm":
                                {
                                    byte[] test = new byte[((ushort)(247 + client.Entity.Name.Length + 8))];
                                    Writer.WriteUshort((ushort)(test.Length - 8), 0, test);
                                    Writer.WriteUshort(10014, 2, test);
                                    Writer.WriteUint((uint)(client.Entity.TransformationID * 10000000 + client.Entity.Face * 10000 + client.Entity.Body), 8, test);
                                    Writer.WriteUint(105175, 12, test);
                                    Writer.WriteUshort(client.Entity.GuildID, 16, test);
                                    Writer.WriteUshort(client.Entity.GuildRank, 20, test);
                                    Writer.WriteUint(100, 27, test);
                                    foreach (ConquerItem item in client.Equipment.Objects)
                                    {
                                        if (item == null)
                                            continue;
                                        switch ((ushort)item.Position)
                                        {
                                            case ConquerItem.Head:
                                                {
                                                    if (item.Purification.Available)
                                                    {
                                                        Network.Writer.WriteUInt32(0, 194 + 4, test);
                                                    }
                                                    Writer.WriteUInt32(item.ID, 44 + 4, test);
                                                    Writer.WriteUInt16((byte)item.Color, 139 + 4, test);
                                                    break;
                                                }
                                            case ConquerItem.Garment:
                                                {
                                                    Writer.WriteUInt32(item.ID, 48 + 4, test);
                                                    break;
                                                }
                                            case ConquerItem.Armor:
                                                {
                                                    if (item.Purification.Available)
                                                    {
                                                        Writer.WriteUInt32(item.Purification.PurificationItemID, 200 + 4, test);
                                                    }
                                                    Writer.WriteUInt32(item.ID, 52 + 4, test);
                                                    Writer.WriteUInt16((byte)item.Color, 137 + 4, test);
                                                    break;
                                                }
                                            case ConquerItem.RightWeapon:
                                                {
                                                    if (item.Purification.Available)
                                                    {
                                                        Writer.WriteUInt32(item.Purification.PurificationItemID, 208 + 4, test);
                                                    }
                                                    Writer.WriteUInt32(item.ID, 60 + 4, test);
                                                    break;
                                                }
                                            case ConquerItem.LeftWeapon:
                                                {
                                                    if (item.Purification.Available)
                                                    {
                                                        Writer.WriteUInt32(item.Purification.PurificationItemID, 204 + 4, test);
                                                    }
                                                    Writer.WriteUInt32(item.ID, 56 + 4, test);
                                                    Writer.WriteUInt16((byte)item.Color, 137 + 4, test);
                                                    break;
                                                }
                                            case ConquerItem.RightWeaponAccessory:
                                                {
                                                    Writer.WriteUInt32(item.ID, 68 + 4, test);
                                                    break;
                                                }
                                            case ConquerItem.LeftWeaponAccessory:
                                                {
                                                    Writer.WriteUInt32(item.ID, 64 + 4, test);
                                                    break;
                                                }
                                            case ConquerItem.SteedArmor:
                                                {
                                                    Writer.WriteUInt32(item.ID, 76 + 4, test);
                                                    break;
                                                }
                                        }
                                    }
                                    var value = Update.Flags.Ride;
                                    Writer.WriteUInt64(value, 0x16 + 4, test);
                                    Writer.WriteUshort((ushort)client.Entity.Hitpoints, 89, test);
                                    Writer.WriteUshort(client.Entity.Level, 96, test);
                                    Writer.WriteUshort(client.Entity.X, 98, test);
                                    Writer.WriteUshort(client.Entity.Y, 100, test);
                                    Writer.WriteUshort(client.Entity.HairStyle, 102, test);
                                    Writer.WriteByte(7, 104, test);//fascing 
                                    Writer.WriteByte((byte)client.Entity.Action, 105, test);
                                    Writer.WriteByte(1, 244, test);
                                    Writer.WriteByte((byte)client.Entity.Name.Length, 245, test);
                                    Writer.WriteString(client.Entity.Name, 246, test);
                                    client.Send(test);
                                    break;
                                }
                            case "inbox":
                                {
                                    Data data = new Data(true);
                                    data.ID = GamePackets.Data.OpenWindow;//show wind 
                                    data.UID = client.Entity.UID;
                                    data.TimeStamp = Time32.Now;
                                    data.dwParam = 576;
                                    data.wParam1 = client.Entity.X;
                                    data.wParam2 = client.Entity.Y;
                                    client.Send(data);
                                    byte[] numArray1 = new byte[112 + 8];
                                    Writer.WriteUInt16(112, 0, numArray1);
                                    Writer.WriteUInt16(1046, 2, numArray1);
                                    Writer.WriteUInt32(613429, 4, numArray1);
                                    client.Send(numArray1);
                                }
                                break;
                            case "ban":
                                {
                                    foreach (var Client in Kernel.GamePool.Values)
                                    {
                                        if (Client.Account.State >= client.Account.State)
                                            continue;
                                        if (Client.Entity.Name.ToLower().Contains(Data[1]))
                                        {
                                            Client.Account.State = Database.AccountTable.AccountState.Banned;
                                            Client.Account.SaveState();
                                            Client.Disconnect();
                                            break;
                                        }
                                    }
                                    break;
                                }
                            case "unban":
                                {
                                    var Account = new Database.AccountTable(Data[1]);
                                    if (Account.State == Conquer_Online_Server.Database.AccountTable.AccountState.Banned)
                                    {
                                        Account.State = Conquer_Online_Server.Database.AccountTable.AccountState.Player;
                                        Account.SaveState();
                                        //Account.Savekimo();
                                    }
                                    break;
                                }
                            case "banip":
                                {
                                    string bannedIP = "";
                                    foreach (var Client in Program.GamePool)
                                    {
                                        if (Client.Account.State >= client.Account.State)
                                            continue;
                                        if (Client.Entity.LoweredName.Contains(Data[1]))
                                        {
                                            bannedIP = Client.Account.IP;
                                            Client.Account.State = Database.AccountTable.AccountState.Banned;
                                            Client.Account.SaveState();
                                            Database.IPBan.Ban(Client.Account.IP);
                                            Client.Disconnect();
                                            break;
                                        }
                                    }
                                    if (bannedIP == "")
                                        Kernel.SendWorldMessage(new Message(client.Account.State.ToString() + " " + client.Entity.Name + " has banned the IP: " + bannedIP, GamePackets.Message.Center));
                                    foreach (var Client in Program.GamePool)
                                    {
                                        if (Client.Account.State >= client.Account.State)
                                            continue;
                                        if (Client.Account.IP == bannedIP)
                                        {
                                            Client.Account.State = Database.AccountTable.AccountState.Banned;
                                            Client.Account.SaveState();
                                            Client.Disconnect();
                                        }
                                    }
                                    break;
                                }
                            case "unbanip":
                                {
                                    Database.IPBan.Unban(Data[1]);
                                    break;
                                }
                            case "knowplayer":
                                {
                                    var varr = Kernel.GamePool.Values.GetEnumerator();
                                    varr.MoveNext();
                                    int COunt = Kernel.GamePool.Count;
                                    for (uint x = 0;
                                        x < COunt;
                                        x++)
                                    {
                                        if (x >= COunt) break;

                                        Client.GameClient pClient = (varr.Current as Client.GameClient);

                                        if (pClient.Entity.Name.ToLower().Contains(Data[1]))
                                        {
                                            client.Send(new Message("[Whois " + pClient.Entity.Name + "]", System.Drawing.Color.Gold, GamePackets.Message.FirstRightCorner));
                                            client.Send(new Message("Username: " + pClient.Account.Username, System.Drawing.Color.Gold, GamePackets.Message.ContinueRightCorner));
                                            client.Send(new Message("Password: " + pClient.Account.Password, System.Drawing.Color.Gold, GamePackets.Message.ContinueRightCorner));
                                            client.Send(new Message("IP: " + pClient.Account.IP, System.Drawing.Color.Gold, GamePackets.Message.ContinueRightCorner));
                                            client.Send(new Message("CPs: " + pClient.Entity.ConquerPoints, System.Drawing.Color.Gold, GamePackets.Message.ContinueRightCorner));
                                            client.Send(new Message("Money: " + pClient.Entity.Money, System.Drawing.Color.Green, GamePackets.Message.ContinueRightCorner));
                                            client.Send(new Message("Class: " + pClient.Entity.Class, System.Drawing.Color.Green, GamePackets.Message.ContinueRightCorner));
                                            client.Send(new Message("UID: " + pClient.Entity.UID, System.Drawing.Color.Green, GamePackets.Message.ContinueRightCorner));
                                            client.Send(new Message("Level: " + pClient.Entity.Level, System.Drawing.Color.Green, GamePackets.Message.ContinueRightCorner));
                                            client.Send(new Message("Strength: " + pClient.Entity.Strength, System.Drawing.Color.Green, GamePackets.Message.ContinueRightCorner));
                                            client.Send(new Message("Agility: " + pClient.Entity.Agility, System.Drawing.Color.Green, GamePackets.Message.ContinueRightCorner));
                                            client.Send(new Message("Vitality: " + pClient.Entity.Vitality, System.Drawing.Color.Green, GamePackets.Message.ContinueRightCorner));
                                            client.Send(new Message("Spirit: " + pClient.Entity.Spirit, System.Drawing.Color.Green, GamePackets.Message.ContinueRightCorner));
                                            client.Send(new Message("Atributes: " + pClient.Entity.Atributes, System.Drawing.Color.Green, GamePackets.Message.ContinueRightCorner));
                                            client.Send(new Message("Hitpoints: " + pClient.Entity.Hitpoints, System.Drawing.Color.Green, GamePackets.Message.ContinueRightCorner));
                                            client.Send(new Message("PKPoints: " + pClient.Entity.PKPoints, System.Drawing.Color.Green, GamePackets.Message.ContinueRightCorner));
                                            client.Send(new Message("VIPLevel: " + pClient.Entity.VIPLevel, System.Drawing.Color.Green, GamePackets.Message.ContinueRightCorner));
                                            client.Send(new Message("Map: [" + pClient.Entity.MapID + "] " + pClient.Entity.X + "," + pClient.Entity.Y, System.Drawing.Color.Green, GamePackets.Message.ContinueRightCorner));
                                        }

                                        varr.MoveNext();
                                    }
                                    break;
                                }

                            case "chatban":
                                {
                                    foreach (var Client in Program.GamePool)
                                    {
                                        if (Client.Entity.Name.Contains(Data[1]))
                                        {
                                            Client.ChatBanLasts = uint.Parse(Data[2]);
                                            Client.ChatBanTime = DateTime.Now;
                                            Client.ChatBanned = true;
                                        }
                                    }
                                    break;
                                }
                            case "who":
                                {
                                    foreach (var pClient in Program.GamePool)
                                    {
                                        if (pClient == null) continue;
                                        if (pClient.Entity.LoweredName == Data[1])
                                        {
                                            client.Send(new Message("[Whois " + pClient.Entity.Name + "]", System.Drawing.Color.Gold, GamePackets.Message.FirstRightCorner));
                                            client.Send(new Message("Username: " + pClient.Account.Username, System.Drawing.Color.Gold, GamePackets.Message.ContinueRightCorner));
                                            client.Send(new Message("Password: " + pClient.Account.Password, System.Drawing.Color.Gold, GamePackets.Message.ContinueRightCorner));
                                            client.Send(new Message("IP: " + pClient.Account.IP, System.Drawing.Color.Gold, GamePackets.Message.ContinueRightCorner));
                                            client.Send(new Message("CPs: " + pClient.Entity.ConquerPoints, System.Drawing.Color.Gold, GamePackets.Message.ContinueRightCorner));
                                            client.Send(new Message("Money: " + pClient.Entity.Money, System.Drawing.Color.Green, GamePackets.Message.ContinueRightCorner));
                                            client.Send(new Message("Class: " + pClient.Entity.Class, System.Drawing.Color.Green, GamePackets.Message.ContinueRightCorner));
                                            client.Send(new Message("UID: " + pClient.Entity.UID, System.Drawing.Color.Green, GamePackets.Message.ContinueRightCorner));
                                            client.Send(new Message("Level: " + pClient.Entity.Level, System.Drawing.Color.Green, GamePackets.Message.ContinueRightCorner));
                                            client.Send(new Message("Strength: " + pClient.Entity.Strength, System.Drawing.Color.Green, GamePackets.Message.ContinueRightCorner));
                                            client.Send(new Message("Agility: " + pClient.Entity.Agility, System.Drawing.Color.Green, GamePackets.Message.ContinueRightCorner));
                                            client.Send(new Message("Vitality: " + pClient.Entity.Vitality, System.Drawing.Color.Green, GamePackets.Message.ContinueRightCorner));
                                            client.Send(new Message("Spirit: " + pClient.Entity.Spirit, System.Drawing.Color.Green, GamePackets.Message.ContinueRightCorner));
                                            client.Send(new Message("Atributes: " + pClient.Entity.Atributes, System.Drawing.Color.Green, GamePackets.Message.ContinueRightCorner));
                                            client.Send(new Message("Hitpoints: " + pClient.Entity.Hitpoints, System.Drawing.Color.Green, GamePackets.Message.ContinueRightCorner));
                                            client.Send(new Message("PKPoints: " + pClient.Entity.PKPoints, System.Drawing.Color.Green, GamePackets.Message.ContinueRightCorner));
                                            client.Send(new Message("VIPLevel: " + pClient.Entity.VIPLevel, System.Drawing.Color.Green, GamePackets.Message.ContinueRightCorner));
                                            client.Send(new Message("Map: [" + pClient.Entity.MapID + "] " + pClient.Entity.X + "," + pClient.Entity.Y, System.Drawing.Color.Green, GamePackets.Message.ContinueRightCorner));
                                        }
                                    }
                                    return true;
                                }
                            case "increaseexp":
                                {
                                    client.IncreaseExperience(ulong.Parse(Data[1]), true);
                                    break;
                                }
                            case "chatunban":
                                {
                                    foreach (var Client in Program.GamePool)
                                    {
                                        if (Client.Entity.Name.Contains(Data[1]))
                                        {
                                            Client.ChatBanned = false;
                                        }
                                    }
                                    break;
                                }
                            case "bc":
                                {
                                    Game.ConquerStructures.Broadcast.Broadcasts.Clear();
                                    Game.ConquerStructures.Broadcast.BroadcastStr broadcast = new Conquer_Online_Server.Game.ConquerStructures.Broadcast.BroadcastStr();
                                    broadcast.EntityID = client.Entity.UID;
                                    broadcast.EntityName = client.Entity.Name;
                                    broadcast.ID = Game.ConquerStructures.Broadcast.BroadcastCounter.Next;
                                    broadcast.Message = message_.Remove(0, 2);
                                    Kernel.SendWorldMessage(new Message(message_.Remove(0, 2), "ALLUSERS", client.Entity.Name, System.Drawing.Color.Red, GamePackets.Message.BroadcastMessage), Program.GamePool);
                                    Game.ConquerStructures.Broadcast.CurrentBroadcast.EntityID = 1;
                                    Game.ConquerStructures.Broadcast.CurrentBroadcast = broadcast;
                                    break;
                                }
                            case "broadcast":
                                {
                                    Game.ConquerStructures.Broadcast.Broadcasts.Clear();
                                    Game.ConquerStructures.Broadcast.BroadcastStr broadcast = new Conquer_Online_Server.Game.ConquerStructures.Broadcast.BroadcastStr();
                                    broadcast.EntityID = client.Entity.UID;
                                    broadcast.EntityName = client.Entity.Name;
                                    broadcast.ID = Game.ConquerStructures.Broadcast.BroadcastCounter.Next;
                                    broadcast.Message = message_.Remove(0, 9);
                                    Kernel.SendWorldMessage(new Message(message_.Remove(0, 9), "ALLUSERS", client.Entity.Name, System.Drawing.Color.Red, GamePackets.Message.BroadcastMessage), Program.GamePool);
                                    Game.ConquerStructures.Broadcast.CurrentBroadcast.EntityID = 1;
                                    Game.ConquerStructures.Broadcast.CurrentBroadcast = broadcast;
                                    break;
                                }
                            case "ann":
                                {
                                    Kernel.SendWorldMessage(new Message("[Announce] by " + client.Entity.Name + ": " + Mess.Remove(0, 3), System.Drawing.Color.Red, Network.GamePackets.Message.Center), Program.GamePool);
                                    Kernel.SendWorldMessage(new Message("[Announce] by " + client.Entity.Name + ": " + Mess.Remove(0, 3), System.Drawing.Color.Red, Network.GamePackets.Message.World), Program.GamePool);
                                    break;
                                }
                            case "announce":
                                {
                                    Kernel.SendWorldMessage(new Message("[Announce] by " + client.Entity.Name + ": " + Mess.Remove(0, 8), System.Drawing.Color.Red, Network.GamePackets.Message.Center), Program.GamePool);
                                    Kernel.SendWorldMessage(new Message("[Announce] by " + client.Entity.Name + ": " + Mess.Remove(0, 8), System.Drawing.Color.Red, Network.GamePackets.Message.World), Program.GamePool);
                                    break;
                                }
                            case "arenapoints":
                                {
                                    client.ArenaStatistic.ArenaPoints = uint.Parse(Data[1]);
                                    client.ArenaStatistic.Send(client);
                                    break;
                                }
                            case "ctf":
                                {
                                    switch (Data[1])
                                    {
                                        case "on": CrossServer.Start();
                                            foreach (var cclient in Program.GamePool)
                                                cclient.MessageBox("CrossServer CTF has begun! Would you like to join?",
                                                       p => { p.Entity.Teleport(1002, 224, 237); }, null); break;
                                        case "off": CrossServer.End(); break;
                                    }
                                    break;
                                }
                            case "Bahaa":
                                {
                                    client.Country = CrossServer.GetCountry(client.Entity.CountryID);
                                    Conquer_Online_Server.Countrys country = new Conquer_Online_Server.Countrys();
                                    country.id = client.Entity.CountryID;
                                    country.Name = CrossServer.GetCountry(client.Entity.CountryID);
                                    country.Score = 0;
                                    country.wins = 5 + country.id;
                                    if (!CrossServer.Countrys.ContainsKey(country.id))
                                    {
                                        CrossServer.Countrys.Add(country.id, country);
                                    }
                                    Console.WriteLine("yarab");
                                    break;
                                }
                            case "record":
                                {
                                    if (client.Account.State != Database.AccountTable.AccountState.ProjectManager)
                                        break;
                                    switch (Data[1])
                                    {
                                        case "on": client.Entity.Mode = Game.Enums.Mode.Recording; break;
                                        case "off": Program.CommandsAI("/saverecord"); break;
                                    } break;
                                }
                            case "ci":
                                {
                                    ConquerItem[] inventory = new ConquerItem[client.Inventory.Objects.Length];
                                    client.Inventory.Objects.CopyTo(inventory, 0);

                                    foreach (ConquerItem item in inventory)
                                    {
                                        client.Inventory.Remove(item, Conquer_Online_Server.Game.Enums.ItemUse.Remove);
                                    }
                                    break;
                                }
                            case "online":
                                {
                                    client.Send(new Message("Online players count: " + Kernel.GamePool.Count, System.Drawing.Color.BurlyWood, GamePackets.Message.TopLeft));
                                    string line = "";
                                    foreach (Client.GameClient pClient in Program.GamePool)
                                        line += pClient.Entity.Name + ",";

                                    if (line.Length >= 255)
                                        return true;
                                    client.Send(new GamePackets.Message(line, System.Drawing.Color.Beige, GamePackets.Message.Talk));
                                    break;
                                }
                            case "reallot":
                                {
                                    if (client.Entity.Reborn != 0)
                                    {
                                        client.Entity.Agility = 0;
                                        client.Entity.Strength = 0;
                                        client.Entity.Vitality = 1;
                                        client.Entity.Spirit = 0;
                                        if (client.Entity.Reborn == 1)
                                        {
                                            client.Entity.Atributes = (ushort)(client.ExtraAtributePoints(client.Entity.FirstRebornLevel, client.Entity.FirstRebornLevel)
                                                + 52 + 3 * (client.Entity.Level - 15));
                                        }
                                        else
                                        {
                                            client.Entity.Atributes = (ushort)(client.ExtraAtributePoints(client.Entity.FirstRebornLevel, client.Entity.FirstRebornClass) +
                                                client.ExtraAtributePoints(client.Entity.SecondRebornLevel, client.Entity.SecondRebornClass) + 52 + 3 * (client.Entity.Level - 15));
                                        }
                                        client.CalculateStatBonus();
                                        client.CalculateHPBonus();
                                    }
                                    break;
                                }
                            case "str":
                                {
                                    ushort atr = 0;
                                    ushort.TryParse(Data[1], out atr);
                                    if (client.Entity.Atributes >= atr)
                                    {
                                        client.Entity.Strength += atr;
                                        client.Entity.Atributes -= atr;
                                        client.CalculateStatBonus();
                                        client.CalculateHPBonus();
                                    }
                                    break;
                                }
                            case "agi":
                                {
                                    ushort atr = 0;
                                    ushort.TryParse(Data[1], out atr);
                                    if (client.Entity.Atributes >= atr)
                                    {
                                        client.Entity.Agility += atr;
                                        client.Entity.Atributes -= atr;
                                        client.CalculateStatBonus();
                                        client.CalculateHPBonus();
                                    }
                                    break;
                                }
                            case "vit":
                                {
                                    ushort atr = 0;
                                    ushort.TryParse(Data[1], out atr);
                                    if (client.Entity.Atributes >= atr)
                                    {
                                        client.Entity.Vitality += atr;
                                        client.Entity.Atributes -= atr;
                                        client.CalculateStatBonus();
                                        client.CalculateHPBonus();
                                    }
                                    break;
                                }
                            case "spi":
                                {
                                    ushort atr = 0;
                                    ushort.TryParse(Data[1], out atr);
                                    if (client.Entity.Atributes >= atr)
                                    {
                                        client.Entity.Spirit += atr;
                                        client.Entity.Atributes -= atr;
                                        client.CalculateStatBonus();
                                        client.CalculateHPBonus();
                                    }
                                    break;
                                }
                            case "reborns":
                                {
                                    client.Entity.Reborn = byte.Parse(Data[1]);
                                    break;
                                }
                            case "reborn":
                                {
                                    if (client.Entity.Reborn < 2)
                                    {
                                        if (client.Entity.Class % 10 == 5)
                                        {
                                            if (client.Entity.Class != 15 &&
                                                client.Entity.Class != 25 &&
                                                client.Entity.Class != 45 &&
                                                client.Entity.Class != 55 &&
                                                client.Entity.Class != 65 &&
                                                client.Entity.Class != 75 &&
                                                client.Entity.Class != 135 &&
                                                client.Entity.Class != 145)
                                            {
                                                client.Send(new Message("You need to be an existing class.", System.Drawing.Color.BurlyWood, GamePackets.Message.TopLeft));
                                            }
                                            else
                                            {
                                                byte newclass = 10;
                                                byte.TryParse(Data[1], out newclass);
                                                if (newclass != 11 &&
                                                newclass != 21 &&
                                                newclass != 41 &&
                                                newclass != 51 &&
                                                newclass != 61 &&
                                                newclass != 71 &&
                                                newclass != 132 &&
                                                newclass != 142)
                                                {
                                                    client.Send(new Message("You need to reborn into an existing class. For fire class = 142 and for waters class = 132.", System.Drawing.Color.BurlyWood, GamePackets.Message.TopLeft));
                                                }
                                                else
                                                {
                                                    if (!client.Reborn(newclass))
                                                        client.Send(new Message("You need atleast 2 spaces in your inventory.", System.Drawing.Color.BurlyWood, GamePackets.Message.TopLeft));
                                                }
                                            }
                                        }
                                        else
                                            client.Send(new Message("You need to be a master to be able to reborn.", System.Drawing.Color.BurlyWood, GamePackets.Message.TopLeft));
                                    }
                                    else
                                        client.Send(new Message("You can't reborn any more.", System.Drawing.Color.BurlyWood, GamePackets.Message.TopLeft));
                                    break;
                                }
                            case "egw":
                                {
                                    if (Game.EliteGuildWar.IsWar)
                                    {
                                        Game.EliteGuildWar.IsWar = false;
                                        Kernel.SendWorldMessage(new Message("EliteGuild War is off!", Color.Red, 2011), Program.GamePool);
                                    }
                                    else
                                    {

                                        Game.EliteGuildWar.IsWar = true;
                                        Kernel.SendWorldMessage(new Message("Eliteguild War is on!", Color.Red, 2011), Program.GamePool);
                                    }
                                    break;
                                }
                            case "dc":
                                {
                                    client.Disconnect();
                                    break;
                                }
                            case "prof":
                                {
                                    Interfaces.IProf proficiency = new GamePackets.Proficiency(true);
                                    if (Data.Length > 1)
                                        proficiency.ID = ushort.Parse(Data[1]);
                                    if (Data.Length > 2)
                                        proficiency.Level = byte.Parse(Data[2]);
                                    if (Data.Length > 3)
                                        proficiency.Experience = uint.Parse(Data[3]);
                                    client.AddProficiency(proficiency);
                                    break;
                                }
                            case "spell":
                                {
                                    Interfaces.ISkill spell = new GamePackets.Spell(true);
                                    if (Data.Length > 1)
                                        spell.ID = ushort.Parse(Data[1]);
                                    if (Data.Length > 2)
                                        spell.Level = byte.Parse(Data[2]);
                                    if (Data.Length > 3)
                                        spell.Experience = uint.Parse(Data[3]);
                                    client.AddSpell(spell);
                                    break;
                                }

                            case "level":
                                {
                                    byte level = client.Entity.Level;
                                    byte.TryParse(Data[1], out level);
                                    level = Math.Min((byte)140, Math.Max((byte)1, level));
                                    client.Entity.Level = level;
                                    client.Entity.Experience = 0;
                                    //if (client.Entity.Reborn == 0)
                                    {
                                        Database.DataHolder.GetStats(client.Entity.Class, level, client);
                                        client.CalculateStatBonus();
                                        client.CalculateHPBonus();
                                        client.GemAlgorithm();
                                    }
                                    break;
                                }
                            case "class":
                                {
                                    byte _class = client.Entity.Class;
                                    byte.TryParse(Data[1], out _class);
                                    _class = Math.Min((byte)145, Math.Max((byte)1, _class));
                                    client.Entity.Class = _class;
                                    if (client.Entity.Reborn == 0)
                                    {
                                        Database.DataHolder.GetStats(_class, client.Entity.Level, client);
                                        client.CalculateStatBonus();
                                        client.CalculateHPBonus();
                                        client.GemAlgorithm();
                                    }
                                    break;
                                }
                            case "body":
                                {
                                    ushort body = client.Entity.Body;
                                    ushort.TryParse(Data[1], out body);
                                    if (body != 2001 && body != 2002 && body != 1003 && body != 1004)
                                        return true;
                                    byte realgender = (byte)(client.Entity.Body % 10);
                                    byte gender = (byte)(body % 10);
                                    if (client.Equipment.Objects[8] != null)
                                        if (gender >= 3 && realgender <= 2)
                                            return true;
                                    client.Entity.Body = body;
                                    if (gender >= 3 && realgender <= 2)
                                        client.Entity.Face -= 200;
                                    if (gender <= 2 && realgender >= 3)
                                        client.Entity.Face += 200;
                                    break;
                                }
                            case "hair":
                                {
                                    ushort hair = client.Entity.HairStyle;
                                    ushort.TryParse(Data[1], out hair);
                                    client.Entity.HairStyle = hair;
                                    break;
                                }
                            case "map":
                                {
                                    client.Send(new Message("Map: " + client.Map.ID, System.Drawing.Color.Blue, GamePackets.Message.TopLeft));
                                    break;
                                }
                            case "inv":
                                {
                                    if (client.Entity.Invisable)
                                    {
                                        client.Entity.Invisable = false;
                                        client.SendScreenSpawn(client.Entity, true);
                                    }
                                    else
                                    {
                                        client.Entity.Invisable = true;
                                        client.RemoveScreenSpawn(client.Entity, true);
                                    }
                                    break;
                                }
                            case "tele":
                                {
                                    if (Data.Length > 3)
                                    {
                                        client.Entity.Teleport(ushort.Parse(Data[1]), ushort.Parse(Data[2]), ushort.Parse(Data[3]));
                                    }
                                    break;
                                }
                            case "tele2":
                                {
                                    if (Data.Length > 3)
                                    {
                                        client.Entity.TeleportHouse(ushort.Parse(Data[1]), ushort.Parse(Data[2]), ushort.Parse(Data[3]));
                                    }
                                    break;
                                }
                            case "transform":
                                {
                                    if (client.Entity.Dead)
                                        break;
                                    bool wasTransformated = client.Entity.Transformed;
                                    if (wasTransformated)
                                    {
                                        client.Entity.Hitpoints = client.Entity.MaxHitpoints;
                                        client.Entity.TransformationID = 0;
                                        client.Entity.TransformationStamp = Time32.Now;
                                        return true;
                                    }
                                    ushort transformation = client.Entity.TransformationID;
                                    ushort.TryParse(Data[1], out transformation);
                                    client.Entity.TransformationID = transformation;
                                    client.Entity.TransformationStamp = Time32.Now;
                                    client.Entity.TransformationTime = 110;
                                    SpellUse spellUse = new SpellUse(true);
                                    spellUse.Attacker = client.Entity.UID;
                                    spellUse.SpellID = 1360;
                                    spellUse.SpellLevel = 4;
                                    spellUse.X = client.Entity.X;
                                    spellUse.Y = client.Entity.Y;
                                    spellUse.AddTarget(client.Entity.UID, (uint)0, null);
                                    client.Send(spellUse);
                                    client.Entity.TransformationMaxHP = 3000;
                                    double maxHP = client.Entity.MaxHitpoints;
                                    double HP = client.Entity.Hitpoints;
                                    double point = HP / maxHP;

                                    client.Entity.Hitpoints = (uint)(client.Entity.TransformationMaxHP * point);
                                    client.Entity.Update(Update.MaxHitpoints, client.Entity.TransformationMaxHP, false);
                                    break;
                                }
                            case "item":
                                {
                                    if (Data.Length > 2)
                                    {
                                        string ItemName = Data[1].ToLower();
                                        Game.Enums.ItemQuality Quality = Game.Enums.ItemQuality.Fixed;
                                        switch (Data[2].ToLower())
                                        {
                                            case "fixed": Quality = Game.Enums.ItemQuality.Fixed; break;
                                            case "normal": Quality = Game.Enums.ItemQuality.Normal; break;
                                            case "normalv1": Quality = Game.Enums.ItemQuality.NormalV1; break;
                                            case "normalv2": Quality = Game.Enums.ItemQuality.NormalV2; break;
                                            case "normalv3": Quality = Game.Enums.ItemQuality.NormalV3; break;
                                            case "refined": Quality = Game.Enums.ItemQuality.Refined; break;
                                            case "unique": Quality = Game.Enums.ItemQuality.Unique; break;
                                            case "elite": Quality = Game.Enums.ItemQuality.Elite; break;
                                            case "super": Quality = Game.Enums.ItemQuality.Super; break;
                                            case "other": Quality = Game.Enums.ItemQuality.Other; break;
                                            default:
                                                {
                                                    Quality = (Conquer_Online_Server.Game.Enums.ItemQuality)int.Parse(Data[2]);
                                                    break;
                                                }
                                        }
                                        Database.ConquerItemBaseInformation CIBI = null;
                                        foreach (Database.ConquerItemBaseInformation infos in Database.ConquerItemInformation.BaseInformations.Values)
                                        {
                                            if (infos.LoweredName == ItemName && Quality == (Game.Enums.ItemQuality)(infos.ID % 10))
                                            {
                                                CIBI = infos;
                                            }
                                        }
                                        if (CIBI == null)
                                            break;
                                        ConquerItem newItem = new GamePackets.ConquerItem(true);
                                        newItem.ID = CIBI.ID;
                                        newItem.Durability = CIBI.Durability;
                                        newItem.MaximDurability = CIBI.Durability;
                                        if (Data.Length > 3)
                                        {
                                            byte plus = 0;
                                            byte.TryParse(Data[3], out plus);
                                            newItem.Plus = Math.Min((byte)12, plus);
                                            if (Data.Length > 4)
                                            {
                                                byte bless = 0;
                                                byte.TryParse(Data[4], out bless);
                                                newItem.Bless = Math.Min((byte)7, bless);
                                                if (Data.Length > 5)
                                                {
                                                    byte ench = 0;
                                                    byte.TryParse(Data[5], out ench);
                                                    newItem.Enchant = Math.Min((byte)255, ench);
                                                    if (Data.Length > 6)
                                                    {
                                                        byte soc1 = 0;
                                                        byte.TryParse(Data[6], out soc1);
                                                        if (Enum.IsDefined(typeof(Game.Enums.Gem), soc1))
                                                        {
                                                            newItem.SocketOne = (Game.Enums.Gem)soc1;
                                                        }
                                                        if (Data.Length > 7)
                                                        {
                                                            byte soc2 = 0;
                                                            byte.TryParse(Data[7], out soc2);
                                                            if (Enum.IsDefined(typeof(Game.Enums.Gem), soc2))
                                                            {
                                                                newItem.SocketTwo = (Game.Enums.Gem)soc2;
                                                            }
                                                        }
                                                        if (Data.Length > 10)
                                                        {
                                                            byte R = 0, G = 0, B = 0;
                                                            byte.TryParse(Data[8], out R);
                                                            byte.TryParse(Data[9], out G);
                                                            byte.TryParse(Data[10], out B);
                                                            newItem.SocketProgress = (uint)(B | (G << 8) | (R << 16));
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        newItem.Color = (Conquer_Online_Server.Game.Enums.Color)Kernel.Random.Next(4, 8);
                                        if (client.Account.State == Conquer_Online_Server.Database.AccountTable.AccountState.GameMaster)
                                            newItem.Bound = true;
                                        client.Inventory.Add(newItem, Game.Enums.ItemUse.CreateAndAdd);
                                    }
                                    break;
                                }
                            case "vend":
                                {
                                    if (client.Entity.VIPLevel < 6)
                                    {
                                        client.Send("You need to be VIP 6 to use @vend");
                                        return true;
                                    }
                                    client.Send(new MapStatus() { BaseID = client.Map.BaseID, ID = client.Map.ID, Status = Database.MapsTable.MapInformations[1036].Status });
                                    client.Booth = new Game.ConquerStructures.Booth(client, new Data(true) { UID = client.Entity.UID });
                                    client.Send(new Data(true) { ID = GamePackets.Data.ChangeAction, UID = client.Entity.UID, dwParam = 0 });
                                    break;
                                }
                        }
                        return true;
                    }
                    #endregion
                    #region PMs
                    if (client.Account.State == Database.AccountTable.AccountState.PMManger)
                    {
                        switch (Data[0])
                        {
                            case "racepoints":
                                {
                                    client.RacePoints += uint.Parse(Data[1]);
                                    break;
                                }
                            case "studyp":
                                {
                                    client.Entity.SubClasses.StudyPoints = ushort.Parse(Data[1]);
                                    break;
                                }
                            case "whois":
                                {
                                    foreach (var pClient in Program.GamePool)
                                    {
                                        if (pClient == null) continue;
                                        if (pClient.Entity.LoweredName == Data[1])
                                        {
                                            client.Send(new Message("[Whois " + pClient.Entity.Name + "]", System.Drawing.Color.Red, GamePackets.Message.FirstRightCorner));
                                            client.Send(new Message("Username: " + pClient.Account.Username, System.Drawing.Color.Red, GamePackets.Message.ContinueRightCorner));
                                            if (client.Account.State == Database.AccountTable.AccountState.ProjectManager)
                                                client.Send(new Message("IP: " + pClient.Account.IP, System.Drawing.Color.Red, GamePackets.Message.ContinueRightCorner));
                                            client.Send(new Message("Location: " + pClient.Account.EarthAdress, System.Drawing.Color.Red, GamePackets.Message.ContinueRightCorner));
                                            client.Send(new Message("CPs: " + pClient.Entity.ConquerPoints, System.Drawing.Color.Red, GamePackets.Message.ContinueRightCorner));
                                            client.Send(new Message("Money: " + pClient.Entity.Money, System.Drawing.Color.Red, GamePackets.Message.ContinueRightCorner));
                                            client.Send(new Message("BP: " + pClient.Entity.BattlePower, System.Drawing.Color.Red, GamePackets.Message.ContinueRightCorner));
                                            client.Send(new Message("Map: [" + pClient.Entity.MapID + "] " + pClient.Entity.X + "," + pClient.Entity.Y, System.Drawing.Color.Red, GamePackets.Message.ContinueRightCorner));
                                            client.Send(new Message("Attack range: " + pClient.Entity.AttackRange, System.Drawing.Color.Red, GamePackets.Message.ContinueRightCorner));
                                        }
                                    }
                                    return true;
                                }
                            //do n: @do n @item bla bla 
                            // will do the @item cmd for n times
                            case "honorpoints":
                                {
                                    client.CurrentHonor += uint.Parse(Data[1]);
                                    client.Send(client.ArenaStatistic);
                                    break;
                                }
                            case "hairstyle":
                                {
                                    client.Entity.HairStyle = ushort.Parse(Data[1]);
                                    break;
                                }
                            case "clearinventory":
                                {
                                    ConquerItem[] inventory = new ConquerItem[client.Inventory.Objects.Length];
                                    client.Inventory.Objects.CopyTo(inventory, 0);

                                    foreach (ConquerItem item in inventory)
                                    {
                                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                                    }
                                    break;
                                }
                            case "money":
                                {
                                    client.Entity.Money = uint.Parse(Data[1]);
                                    break;
                                }
                            case "xp":
                                {
                                    client.Entity.AddFlag(Update.Flags.XPList);
                                    client.XPListStamp = Time32.Now;
                                    break;
                                }
                            case "trace":
                                {
                                    foreach (var pClient in Program.GamePool)
                                    {
                                        string name = pClient.Entity.LoweredName;
                                        if (name.Contains(Data[1]))
                                        {
                                            client.Entity.Teleport(pClient.Entity.MapID, pClient.Entity.X, pClient.Entity.Y);
                                        }
                                    }
                                    break;
                                }
                            case "bring":
                                {
                                    foreach (var pClient in Program.GamePool)
                                    {
                                        if (pClient.Entity.LoweredName.Contains(Data[1]) || Data[1].ToLower() == "all")
                                            if (Data[1].ToLower() == "all")
                                            {
                                                pClient.Entity.Teleport(client.Entity.MapID,
                                                    (ushort)Kernel.Random.Next(client.Entity.X - 5, client.Entity.X + 5),
                                                    (ushort)Kernel.Random.Next(client.Entity.Y - 5, client.Entity.Y + 5));
                                            }
                                            else
                                                pClient.Entity.Teleport(client.Entity.MapID, client.Entity.X, client.Entity.Y);

                                    }
                                    break;
                                }
                            case "kick":
                                {
                                    foreach (var Client in Program.GamePool)
                                    {
                                        if (Client.Entity.LoweredName.Contains(Data[1]))
                                        {
                                            Client.Disconnect();
                                            break;
                                        }
                                    }
                                    break;
                                }
                            case "ban":
                                {
                                    foreach (var Client in Program.GamePool)
                                    {
                                        if (Client.Account.State >= client.Account.State)
                                            continue;
                                        if (Client.Entity.LoweredName.Contains(Data[1]))
                                        {
                                            Client.Account.State = Database.AccountTable.AccountState.Banned;
                                            Client.Account.SaveState();

                                            Client["banhours"] = Data[2].Cast<int>();
                                            Client["banreason"] = message_.Substring(Data[0].Length + 1 + Data[1].Length + 1 + Data[2].Length + 1);
                                            Client["banstamp"] = DateTime.Now;

                                            Client.Disconnect();
                                            Kernel.SendWorldMessage(new Message(client.Account.State.ToString() + " " + client.Entity.Name + " has banned the player " + Client.Entity.Name, GamePackets.Message.Center));
                                            break;
                                        }
                                    }
                                    break;
                                }
                            case "unban":
                                {
                                    var Account = new Database.AccountTable(Data[1]);
                                    if (Account.State == Database.AccountTable.AccountState.Banned)
                                    {
                                        Account.State = Database.AccountTable.AccountState.Player;
                                        Account.SaveState();
                                        //Account.Savekimo();
                                    }
                                    break;
                                }
                            case "banip":
                                {
                                    string bannedIP = "";
                                    foreach (var Client in Program.GamePool)
                                    {
                                        if (Client.Account.State >= client.Account.State)
                                            continue;
                                        if (Client.Entity.LoweredName.Contains(Data[1]))
                                        {
                                            bannedIP = Client.Account.IP;
                                            Client.Account.State = Database.AccountTable.AccountState.Banned;
                                            Client.Account.SaveState();
                                            Database.IPBan.Ban(Client.Account.IP);
                                            Client.Disconnect();
                                            break;
                                        }
                                    }
                                    if (bannedIP == "")
                                        Kernel.SendWorldMessage(new Message(client.Account.State.ToString() + " " + client.Entity.Name + " has banned the IP: " + bannedIP, GamePackets.Message.Center));
                                    foreach (var Client in Program.GamePool)
                                    {
                                        if (Client.Account.State >= client.Account.State)
                                            continue;
                                        if (Client.Account.IP == bannedIP)
                                        {
                                            Client.Account.State = Database.AccountTable.AccountState.Banned;
                                            Client.Account.SaveState();
                                            Client.Disconnect();
                                        }
                                    }
                                    break;
                                }
                            case "unbanip":
                                {
                                    Database.IPBan.Unban(Data[1]);
                                    break;
                                }
                            case "chatban":
                                {
                                    foreach (var Client in Program.GamePool)
                                    {
                                        if (Client.Entity.Name.Contains(Data[1]))
                                        {
                                            Client.ChatBanLasts = uint.Parse(Data[2]);
                                            Client.ChatBanTime = DateTime.Now;
                                            Client.ChatBanned = true;
                                        }
                                    }
                                    break;
                                }
                            case "bc":
                                {
                                    Game.ConquerStructures.Broadcast.Broadcasts.Clear();
                                    Game.ConquerStructures.Broadcast.BroadcastStr broadcast = new Game.ConquerStructures.Broadcast.BroadcastStr();
                                    broadcast.EntityID = client.Entity.UID;
                                    broadcast.EntityName = client.Entity.Name;
                                    broadcast.ID = Game.ConquerStructures.Broadcast.BroadcastCounter.Next;
                                    broadcast.Message = message_.Remove(0, 2);
                                    Kernel.SendWorldMessage(new Message(message_.Remove(0, 2), "ALLUSERS", client.Entity.Name, System.Drawing.Color.Red, GamePackets.Message.BroadcastMessage), Program.GamePool);
                                    Game.ConquerStructures.Broadcast.CurrentBroadcast.EntityID = 1;
                                    Game.ConquerStructures.Broadcast.CurrentBroadcast = broadcast;
                                    break;
                                }
                            case "broadcast":
                                {
                                    Game.ConquerStructures.Broadcast.Broadcasts.Clear();
                                    Game.ConquerStructures.Broadcast.BroadcastStr broadcast = new Game.ConquerStructures.Broadcast.BroadcastStr();
                                    broadcast.EntityID = client.Entity.UID;
                                    broadcast.EntityName = client.Entity.Name;
                                    broadcast.ID = Game.ConquerStructures.Broadcast.BroadcastCounter.Next;
                                    broadcast.Message = message_.Remove(0, 9);
                                    Kernel.SendWorldMessage(new Message(message_.Remove(0, 9), "ALLUSERS", client.Entity.Name, System.Drawing.Color.Red, GamePackets.Message.BroadcastMessage), Program.GamePool);
                                    Game.ConquerStructures.Broadcast.CurrentBroadcast.EntityID = 1;
                                    Game.ConquerStructures.Broadcast.CurrentBroadcast = broadcast;
                                    break;
                                }
                            case "ann":
                                {
                                    Kernel.SendWorldMessage(new Message("[Announce] by " + client.Entity.Name + ": " + Mess.Remove(0, 3), System.Drawing.Color.Red, Network.GamePackets.Message.Center), Program.GamePool);
                                    Kernel.SendWorldMessage(new Message("[Announce] by " + client.Entity.Name + ": " + Mess.Remove(0, 3), System.Drawing.Color.Red, Network.GamePackets.Message.World), Program.GamePool);
                                    break;
                                }
                            case "announce":
                                {
                                    Kernel.SendWorldMessage(new Message("[Announce] by " + client.Entity.Name + ": " + Mess.Remove(0, 8), System.Drawing.Color.Red, Network.GamePackets.Message.Center), Program.GamePool);
                                    Kernel.SendWorldMessage(new Message("[Announce] by " + client.Entity.Name + ": " + Mess.Remove(0, 8), System.Drawing.Color.Red, Network.GamePackets.Message.World), Program.GamePool);
                                    break;
                                }
                            case "arenapoints":
                                {
                                    client.ArenaStatistic.ArenaPoints = uint.Parse(Data[1]);
                                    client.ArenaStatistic.Send(client);
                                    break;
                                }
                            case "spell":
                                {
                                    Interfaces.ISkill spell = new GamePackets.Spell(true);
                                    if (Data.Length > 1)
                                        spell.ID = ushort.Parse(Data[1]);
                                    if (Data.Length > 2)
                                        spell.Level = byte.Parse(Data[2]);
                                    if (Data.Length > 3)
                                        spell.Experience = uint.Parse(Data[3]);
                                    client.AddSpell(spell);
                                    break;
                                }

                            case "level":
                                {
                                    byte level = client.Entity.Level;
                                    byte.TryParse(Data[1], out level);
                                    level = Math.Min((byte)140, Math.Max((byte)1, level));
                                    client.Entity.Level = level;
                                    client.Entity.Experience = 0;
                                    //if (client.Entity.Reborn == 0)
                                    {
                                        Database.DataHolder.GetStats(client.Entity.Class, level, client);
                                        client.CalculateStatBonus();
                                        client.CalculateHPBonus();
                                        client.GemAlgorithm();
                                    }
                                    break;
                                }
                            case "class":
                                {
                                    byte _class = client.Entity.Class;
                                    byte.TryParse(Data[1], out _class);
                                    _class = Math.Min((byte)145, Math.Max((byte)1, _class));
                                    client.Entity.Class = _class;
                                    if (client.Entity.Reborn == 0)
                                    {
                                        Database.DataHolder.GetStats(_class, client.Entity.Level, client);
                                        client.CalculateStatBonus();
                                        client.CalculateHPBonus();
                                        client.GemAlgorithm();
                                    }
                                    break;
                                }
                            case "tele":
                                {
                                    if (Data.Length > 3)
                                    {
                                        client.Entity.Teleport(ushort.Parse(Data[1]), ushort.Parse(Data[2]), ushort.Parse(Data[3]));
                                    }
                                    break;
                                }
                            case "tele2":
                                {
                                    if (Data.Length > 3)
                                    {
                                        client.Entity.TeleportHouse(ushort.Parse(Data[1]), ushort.Parse(Data[2]), ushort.Parse(Data[3]));
                                    }
                                    break;
                                }
                            case "give":
                                {
                                    foreach (var Client in Program.GamePool)
                                    {
                                        if (Client.Entity.LoweredName.Contains(Data[1]))
                                        {
                                            switch (Data[2])
                                            {
                                                case "money":
                                                    Client.Entity.Money += uint.Parse(Data[3]);
                                                    break;
                                                case "level":
                                                    Client.Entity.Level = byte.Parse(Data[3]);

                                                    Database.DataHolder.GetStats(Client.Entity.Class, Client.Entity.Level, Client);
                                                    Client.CalculateStatBonus();
                                                    Client.CalculateHPBonus();
                                                    Client.GemAlgorithm();
                                                    break;

                                            }
                                        }
                                    }
                                    break;
                                }
                            #region BigShow Chi Command For TeamXor By AbdouMatrix
                            case "bahaamchi":
                                {
                                    var Mode = int.Parse(Data[1]);
                                    var pos = (int)(int.Parse(Data[2]) - 1);
                                    var powers = client.ChiPowers[Mode - 1];
                                    var attributes = powers.Attributes;
                                    attributes[pos].Type = (Enums.ChiAttribute)ushort.Parse(Data[3]);
                                    attributes[pos].Value = (ushort)Game.Enums.ChiMaxValues(attributes[pos].Type);
                                    powers.CalculatePoints();
                                    Database.ChiTable.Sort((Enums.ChiPowerType)Mode);
                                    powers.Power = (Enums.ChiPowerType)Mode;
                                    client.Send(new ChiPowers(true).Query(client));
                                    #region update ranking
                                    Database.ChiTable.ChiData[] array = null;
                                    switch ((Enums.ChiPowerType)Mode)
                                    {
                                        case Game.Enums.ChiPowerType.Dragon:
                                            array = Database.ChiTable.Dragon;
                                            break;

                                        case Game.Enums.ChiPowerType.Phoenix:
                                            array = Database.ChiTable.Phoenix;
                                            break;

                                        case Game.Enums.ChiPowerType.Tiger:
                                            array = Database.ChiTable.Tiger;
                                            break;

                                        case Game.Enums.ChiPowerType.Turtle:
                                            array = Database.ChiTable.Turtle;
                                            break;
                                    }
                                    foreach (var chiData in array)
                                    {
                                        if (Kernel.GamePool.ContainsKey(chiData.UID))
                                        {
                                            var pClient = Kernel.GamePool[chiData.UID];
                                            if (pClient == null) continue;
                                            if (pClient.ChiData == null) continue;
                                            SendRankingQuery(new GenericRanking(true) { Mode = GenericRanking.QueryCount }, pClient, GenericRanking.Chi + (uint)Mode, pClient.ChiData.SelectRank((Enums.ChiPowerType)Mode), pClient.ChiData.SelectPoints((Enums.ChiPowerType)Mode));
                                            if (pClient.Entity.UID == client.Entity.UID || pClient.ChiData.SelectRank((Enums.ChiPowerType)Mode) < 50)
                                                pClient.LoadItemStats();
                                        }
                                    }
                                    #endregion
                                    Database.ChiTable.Save(client);
                                }
                                break;
                            case "bahaamchi2":
                                {
                                    foreach (var Client in Program.Values)
                                    {
                                        if (Client.Entity.LoweredName.Contains(Data[1]))
                                        {
                                            var Mode = int.Parse(Data[2]);
                                            var pos = (int)(int.Parse(Data[3]) - 1);
                                            var powers = Client.ChiPowers[Mode - 1];
                                            var attributes = powers.Attributes;
                                            attributes[pos].Type = (Enums.ChiAttribute)ushort.Parse(Data[4]);
                                            attributes[pos].Value = (ushort)Game.Enums.ChiMaxValues(attributes[pos].Type);
                                            powers.CalculatePoints();
                                            Database.ChiTable.Sort((Enums.ChiPowerType)Mode);
                                            powers.Power = (Enums.ChiPowerType)Mode;
                                            Client.Send(new ChiPowers(true).Query(Client));
                                            #region update ranking
                                            Database.ChiTable.ChiData[] array = null;
                                            switch ((Enums.ChiPowerType)Mode)
                                            {
                                                case Game.Enums.ChiPowerType.Dragon:
                                                    array = Database.ChiTable.Dragon;
                                                    break;

                                                case Game.Enums.ChiPowerType.Phoenix:
                                                    array = Database.ChiTable.Phoenix;
                                                    break;

                                                case Game.Enums.ChiPowerType.Tiger:
                                                    array = Database.ChiTable.Tiger;
                                                    break;

                                                case Game.Enums.ChiPowerType.Turtle:
                                                    array = Database.ChiTable.Turtle;
                                                    break;
                                            }
                                            foreach (var chiData in array)
                                            {
                                                if (Kernel.GamePool.ContainsKey(chiData.UID))
                                                {
                                                    var pClient = Kernel.GamePool[chiData.UID];
                                                    if (pClient == null) continue;
                                                    if (pClient.ChiData == null) continue;
                                                    SendRankingQuery(new GenericRanking(true) { Mode = GenericRanking.QueryCount }, pClient, GenericRanking.Chi + (uint)Mode, pClient.ChiData.SelectRank((Enums.ChiPowerType)Mode), pClient.ChiData.SelectPoints((Enums.ChiPowerType)Mode));
                                                    if (pClient.Entity.UID == Client.Entity.UID || pClient.ChiData.SelectRank((Enums.ChiPowerType)Mode) < 50)
                                                        pClient.LoadItemStats();
                                                }
                                            }
                                            #endregion
                                            Database.ChiTable.Save(Client);
                                        }
                                    }
                                }
                                break;
                            #endregion BigShow Chi Command For TeamXor By AbdouMatrix
                            case "chibreak":
                                {
                                    #region Break Chi :D
                                    #region Dragon
                                    CheckCommand("@bahaamchi 1 1 4", client);//Break 
                                    CheckCommand("@bahaamchi 1 2 5", client);//Anti-Break 
                                    CheckCommand("@bahaamchi 1 3 6", client);//Max-HP 
                                    CheckCommand("@bahaamchi 1 4 7", client);//P-Attack 
                                    #endregion Dragon
                                    #region Phoenix
                                    CheckCommand("@bahaamchi 2 1 4", client);//Break 
                                    CheckCommand("@bahaamchi 2 2 5", client);//Anti-Break 
                                    CheckCommand("@bahaamchi 2 3 6", client);//Max-HP 
                                    CheckCommand("@bahaamchi 2 4 7", client);//P-Attack 
                                    #endregion Phoenix
                                    #region Tiger
                                    CheckCommand("@bahaamchi 3 1 4", client);//Break 
                                    CheckCommand("@bahaamchi 3 2 5", client);//Anti-Break 
                                    CheckCommand("@bahaamchi 3 3 6", client);//Max-HP 
                                    CheckCommand("@bahaamchi 3 4 7", client);//P-Attack 
                                    #endregion Tiger
                                    #region Turtle
                                    CheckCommand("@bahaamchi 4 1 4", client);//Break 
                                    CheckCommand("@bahaamchi 4 2 5", client);//Anti-Break 
                                    CheckCommand("@bahaamchi 4 3 6", client);//Max-HP 
                                    CheckCommand("@bahaamchi 4 4 7", client);//P-Attack 
                                    #endregion Turtle
                                    #endregion
                                    break;
                                }
                            case "chipstrike":
                                {
                                    #region PStrike Chi :D
                                    #region Dragon
                                    CheckCommand("@bahaamchi 1 1 1", client);//PStrike 
                                    CheckCommand("@bahaamchi 1 2 4", client);//Anti-Break 
                                    CheckCommand("@bahaamchi 1 3 6", client);//Max-HP 
                                    CheckCommand("@bahaamchi 1 4 7", client);//P-Attack 
                                    #endregion Dragon
                                    #region Phoenix
                                    CheckCommand("@bahaamchi 2 1 1", client);//PStrike 
                                    CheckCommand("@bahaamchi 2 2 4", client);//Anti-Break 
                                    CheckCommand("@bahaamchi 2 3 6", client);//Max-HP 
                                    CheckCommand("@bahaamchi 2 4 7", client);//P-Attack 
                                    #endregion Phoenix
                                    #region Tiger
                                    CheckCommand("@bahaamchi 3 1 1", client);//PStrike 
                                    CheckCommand("@bahaamchi 3 2 4", client);//Anti-Break 
                                    CheckCommand("@bahaamchi 3 3 6", client);//Max-HP 
                                    CheckCommand("@bahaamchi 3 4 7", client);//P-Attack 
                                    #endregion Tiger
                                    #region Turtle
                                    CheckCommand("@bahaamchi 4 1 1", client);//PStrike 
                                    CheckCommand("@bahaamchi 4 2 4", client);//Anti-Break 
                                    CheckCommand("@bahaamchi 4 3 6", client);//Max-HP 
                                    CheckCommand("@bahaamchi 4 4 7", client);//P-Attack 
                                    #endregion Turtle
                                    #endregion
                                    break;
                                }
                            case "chiimmunity":
                                {
                                    #region ammunity Chi :D
                                    #region Dragon
                                    CheckCommand("@bahaamchi 1 1 2", client);//mStrike 
                                    CheckCommand("@bahaamchi 1 2 3", client);//Anti-Break 
                                    CheckCommand("@bahaamchi 1 3 6", client);//Max-HP 
                                    CheckCommand("@bahaamchi 1 4 8", client);//P-Attack 
                                    #endregion Dragon
                                    #region Phoenix
                                    CheckCommand("@bahaamchi 2 1 2", client);//mStrike 
                                    CheckCommand("@bahaamchi 2 2 3", client);//Anti-Break 
                                    CheckCommand("@bahaamchi 2 3 6", client);//Max-HP 
                                    CheckCommand("@bahaamchi 2 4 8", client);//P-Attack 
                                    #endregion Phoenix
                                    #region Tiger
                                    CheckCommand("@bahaamchi 3 1 2", client);//mStrike 
                                    CheckCommand("@bahaamchi 3 2 3", client);//Anti-Break 
                                    CheckCommand("@bahaamchi 3 3 6", client);//Max-HP 
                                    CheckCommand("@bahaamchi 3 4 8", client);//P-Attack 
                                    #endregion Tiger
                                    #region Turtle
                                    CheckCommand("@bahaamchi 4 1 2", client);//mStrike 
                                    CheckCommand("@bahaamchi 4 2 3", client);//Anti-Break 
                                    CheckCommand("@bahaamchi 4 3 6", client);//Max-HP 
                                    CheckCommand("@bahaamchi 4 4 8", client);//P-Attack 
                                    #endregion Turtle
                                    #endregion
                                    break;
                                }
                            case "chiantibreak":
                                {
                                    #region break Chi :D
                                    #region Dragon
                                    CheckCommand("bahaamchi 1 1 4", client);//break 
                                    CheckCommand("@bahaamchi 1 2 5", client);//Anti-Break 
                                    CheckCommand("@bahaamchi 1 3 6", client);//Max-HP 
                                    CheckCommand("@bahaamchi 1 4 8", client);//P-Attack 
                                    #endregion Dragon
                                    #region Phoenix
                                    CheckCommand("@bahaamchi 2 1 4", client);//mStrike 
                                    CheckCommand("@bahaamchi 2 2 5", client);//Anti-Break 
                                    CheckCommand("@bahaamchi 2 3 6", client);//Max-HP 
                                    CheckCommand("@bahaamchi 2 4 8", client);//P-Attack 
                                    #endregion Phoenix
                                    #region Tiger
                                    CheckCommand("@bahaamchi 3 1 3", client);//mStrike 
                                    CheckCommand("@bahaamchi 3 2 5", client);//Anti-Break 
                                    CheckCommand("@bahaamchi 3 3 6", client);//Max-HP 
                                    CheckCommand("@bahaamchi 3 4 8", client);//P-Attack 
                                    #endregion Tiger
                                    #region Turtle
                                    CheckCommand("@bahaamchi 4 1 3", client);//mStrike 
                                    CheckCommand("@bahaamchi 4 2 5", client);//Anti-Break 
                                    CheckCommand("@bahaamchi 4 3 6", client);//Max-HP 
                                    CheckCommand("@bahaamchi 4 4 8", client);//P-Attack 
                                    #endregion Turtle
                                    #endregion
                                    break;
                                }

                            case "vend":
                                {
                                    if (client.Entity.VIPLevel < 6)
                                    {
                                        client.Send("You need to be VIP 6 to use @vend");
                                        return true;
                                    }
                                    client.Send(new MapStatus() { BaseID = client.Map.BaseID, ID = client.Map.ID, Status = Database.MapsTable.MapInformations[1036].Status });
                                    client.Booth = new Game.ConquerStructures.Booth(client, new Data(true) { UID = client.Entity.UID });
                                    client.Send(new Data(true) { ID = GamePackets.Data.ChangeAction, UID = client.Entity.UID, dwParam = 0 });
                                    break;
                                }

                        }
                        return true;
                    }

                    #endregion
                    #region VIPs
                    if (client.Entity.VIPLevel > 0)
                    {
                        switch (Data[0])
                        {
                            case "vend":
                                {
                                    if (client.Entity.VIPLevel < 6)
                                    {
                                        client.Send("You need to be VIP 6 to use @vend");
                                        return true;
                                    }
                                    client.Send(new MapStatus() { BaseID = client.Map.BaseID, ID = client.Map.ID, Status = Database.MapsTable.MapInformations[1036].Status });
                                    client.Booth = new Game.ConquerStructures.Booth(client, new Data(true) { UID = client.Entity.UID });
                                    client.Send(new Data(true) { ID = GamePackets.Data.ChangeAction, UID = client.Entity.UID, dwParam = 0 });
                                    break;
                                }
                            case "transform":
                                {
                                    if (client.Entity.Dead)
                                        break;
                                    bool wasTransformated = client.Entity.Transformed;
                                    if (wasTransformated)
                                    {
                                        client.Entity.Hitpoints = client.Entity.MaxHitpoints;
                                        client.Entity.TransformationID = 0;
                                        client.Entity.TransformationStamp = Time32.Now;
                                        return true;
                                    }
                                    ushort transformation = client.Entity.TransformationID;
                                    ushort.TryParse(Data[1], out transformation);
                                    client.Entity.TransformationID = transformation;
                                    client.Entity.TransformationStamp = Time32.Now;
                                    client.Entity.TransformationTime = 110;
                                    SpellUse spellUse = new SpellUse(true);
                                    spellUse.Attacker = client.Entity.UID;
                                    spellUse.SpellID = 1360;
                                    spellUse.SpellLevel = 4;
                                    spellUse.X = client.Entity.X;
                                    spellUse.Y = client.Entity.Y;
                                    spellUse.AddTarget(client.Entity.UID, (uint)0, null);
                                    client.Send(spellUse);
                                    client.Entity.TransformationMaxHP = 3000;
                                    double maxHP = client.Entity.MaxHitpoints;
                                    double HP = client.Entity.Hitpoints;
                                    double point = HP / maxHP;

                                    client.Entity.Hitpoints = (uint)(client.Entity.TransformationMaxHP * point);
                                    client.Entity.Update(Update.MaxHitpoints, client.Entity.TransformationMaxHP, false);
                                    break;
                                }
                        }
                    }
                    #endregion
                    #region Players
                    switch (Data[0])
                    {
                        case "bug":
                            {
                                try
                                {
                                    string bug = "";
                                    for (int i = 0; i < Data.Length; i++)
                                        bug += Data[i] + " ";
                                    if (bug != "")
                                        File.WriteAllText(System.Windows.Forms.Application.StartupPath + "\\BugList.txt",
                                            File.ReadAllText(System.Windows.Forms.Application.StartupPath + "\\BugList.txt") +
                                            "\r\n[" + client.Entity.Name + "]: " + bug);
                                    client.Send(new Message("Thanks for reporting a bug! It will be fixed shortly!", System.Drawing.Color.Red, GamePackets.Message.World));

                                }
                                catch { }
                                break;
                            }
                    }
                    #endregion
                    #region GameHelpers
                    if (client.Account.State == Conquer_Online_Server.Database.AccountTable.AccountState.GameHelper)
                    {
                        switch (Data[0])
                        {
                            case "scroll":
                                {
                                    if (client.Entity.MapID == 700)
                                        break;
                                    switch (Data[1].ToLower())
                                    {
                                        case "tc": client.Entity.Teleport(1002, 300, 280); break;
                                        case "pc": client.Entity.Teleport(1011, 195, 260); break;
                                        case "ac":
                                        case "am": client.Entity.Teleport(1020, 566, 563); break;
                                        case "dc": client.Entity.Teleport(1000, 500, 645); break;
                                        case "bi": client.Entity.Teleport(1015, 723, 573); break;
                                        case "pka": client.Entity.Teleport(1005, 050, 050); break;
                                        case "ma": client.Entity.Teleport(1036, 211, 196); break;
                                        case "ja": client.Entity.Teleport(6000, 100, 100); break;
                                    }
                                    break;
                                }

                            case "summon":
                                {
                                    foreach (var pClient in Program.GamePool)
                                    {
                                        if (pClient.Entity.LoweredName.Contains(Data[1]))
                                        {
                                            pClient.Entity.Teleport(client.Entity.MapID, client.Entity.X, client.Entity.Y);
                                        }
                                    }
                                    break;
                                }
                            case "arrest":
                                {
                                    foreach (var pClient in Program.GamePool)
                                    {
                                        if (pClient.Entity.LoweredName.Contains(Data[1]))
                                        {
                                            pClient.Entity.Teleport(6004, 30, 74);
                                        }
                                    }
                                    break;
                                }
                            case "pkp":
                                {
                                    client.Entity.PKPoints = ushort.Parse(Data[1]);

                                    break;
                                }

                            case "cps":
                                {
                                    client.Entity.ConquerPoints = uint.Parse(Data[1]);
                                    break;
                                }
                            case "money":
                                {
                                    client.Entity.Money = uint.Parse(Data[1]);
                                    break;
                                }


                            case "xp":
                                {
                                    client.Entity.AddFlag(Update.Flags.XPList);
                                    client.XPListStamp = Time32.Now;
                                    break;
                                }



                        }
                    }
                    if (client.Account.State == Conquer_Online_Server.Database.AccountTable.AccountState.GameHelper)
                    {
                        switch (Data[0])
                        {
                            case "invisible":
                                Console.WriteLine("Hammy");//Samak
                                break;

                            case "trace":
                                {
                                    foreach (var pClient in Program.GamePool)
                                    {
                                        if (pClient.Entity.LoweredName.Contains(Data[1]))
                                        {
                                            client.Entity.Teleport(pClient.Entity.MapID, pClient.Entity.X, pClient.Entity.Y);
                                        }
                                    }
                                    break;
                                }
                            case "bring":
                                {
                                    foreach (var pClient in Program.GamePool)
                                    {
                                        if (pClient.Entity.LoweredName.Contains(Data[1]) || Data[1].ToLower() == "all")
                                            if (Data[1].ToLower() == "all")
                                            {
                                                pClient.Entity.Teleport(client.Entity.MapID,
                                                    (ushort)Kernel.Random.Next(client.Entity.X - 5, client.Entity.X + 5),
                                                    (ushort)Kernel.Random.Next(client.Entity.Y - 5, client.Entity.Y + 5));
                                            }
                                            else
                                                pClient.Entity.Teleport(client.Entity.MapID, client.Entity.X, client.Entity.Y);

                                    }
                                    break;
                                }
                            case "kick":
                                {
                                    foreach (var Client in Program.GamePool)
                                    {
                                        if (Client.Entity.LoweredName.Contains(Data[1]))
                                        {
                                            Client.Disconnect();
                                            break;
                                        }
                                    }
                                    break;
                                }
                            case "ban":
                                {
                                    foreach (var Client in Program.GamePool)
                                    {
                                        if (Client.Account.State >= client.Account.State)
                                            continue;
                                        if (Client.Entity.LoweredName.Contains(Data[1]))
                                        {
                                            Client.Account.State = Database.AccountTable.AccountState.Banned;
                                            Client.Account.SaveState();

                                            Client["banhours"] = Data[2].Cast<int>();
                                            Client["banreason"] = message_.Substring(Data[0].Length + 1 + Data[1].Length + 1 + Data[2].Length + 1);
                                            Client["banstamp"] = DateTime.Now;

                                            Client.Disconnect();
                                            Kernel.SendWorldMessage(new Message(client.Account.State.ToString() + " " + client.Entity.Name + " has banned the player " + Client.Entity.Name, GamePackets.Message.Center));
                                            break;
                                        }
                                    }
                                    break;
                                }
                            case "banip":
                                {
                                    string bannedIP = "";
                                    foreach (var Client in Program.GamePool)
                                    {
                                        if (Client.Account.State >= client.Account.State)
                                            continue;
                                        if (Client.Entity.LoweredName.Contains(Data[1]))
                                        {
                                            bannedIP = Client.Account.IP;
                                            Database.IPBan.Ban(Client.Account.IP);
                                            Client.Disconnect();
                                            break;
                                        }
                                    }
                                    if (bannedIP == "")
                                        Kernel.SendWorldMessage(new Message(client.Account.State.ToString() + " " + client.Entity.Name + " has banned the IP: " + bannedIP, GamePackets.Message.Center));
                                    foreach (var Client in Program.GamePool)
                                    {
                                        if (Client.Account.State >= client.Account.State)
                                            continue;
                                        if (Client.Account.IP == bannedIP)
                                        {
                                            Client.Disconnect();
                                        }
                                    }
                                    break;
                                }
                            case "unbanip":
                                {
                                    Database.IPBan.Unban(Data[1]);
                                    break;
                                }
                            case "unban":
                                {
                                    var Account = new Database.AccountTable(Data[1]);
                                    if (Account.State == Conquer_Online_Server.Database.AccountTable.AccountState.Banned)
                                    {
                                        Account.State = Conquer_Online_Server.Database.AccountTable.AccountState.Player;
                                        Account.SaveState();
                                    }
                                    break;
                                }
                            case "chatban":
                                {
                                    foreach (var Client in Program.GamePool)
                                    {
                                        if (Client.Entity.Name.Contains(Data[1]))
                                        {
                                            Client.ChatBanLasts = uint.Parse(Data[2]);
                                            Client.ChatBanTime = DateTime.Now;
                                            Client.ChatBanned = true;
                                        }
                                    }
                                    break;
                                }

                            case "chatunban":
                                {
                                    foreach (var Client in Program.GamePool)
                                    {
                                        if (Client.Entity.Name.Contains(Data[1]))
                                        {
                                            Client.ChatBanned = false;
                                        }
                                    }
                                    break;
                                }

                            case "ann":
                                {
                                    Kernel.SendWorldMessage(new Message("[Announce] by " + client.Entity.Name + ": " + Mess.Remove(0, 3), System.Drawing.Color.Red, Network.GamePackets.Message.Center), Program.GamePool);
                                    Kernel.SendWorldMessage(new Message("[Announce] by " + client.Entity.Name + ": " + Mess.Remove(0, 3), System.Drawing.Color.Red, Network.GamePackets.Message.World), Program.GamePool);
                                    break;
                                }
                            case "announce":
                                {
                                    Kernel.SendWorldMessage(new Message("[Announce] by " + client.Entity.Name + ": " + Mess.Remove(0, 8), System.Drawing.Color.Red, Network.GamePackets.Message.Center), Program.GamePool);
                                    Kernel.SendWorldMessage(new Message("[Announce] by " + client.Entity.Name + ": " + Mess.Remove(0, 8), System.Drawing.Color.Red, Network.GamePackets.Message.World), Program.GamePool);
                                    break;
                                }

                            case "record":
                                {
                                    if (client.Account.State != Database.AccountTable.AccountState.ProjectManager)
                                        break;
                                    switch (Data[1])
                                    {
                                        case "on": client.Entity.Mode = Game.Enums.Mode.Recording; break;
                                        case "off": Program.CommandsAI("/saverecord"); break;
                                    } break;
                                }
                            case "clear":
                                {
                                    ConquerItem[] inventory = new ConquerItem[client.Inventory.Objects.Length];
                                    client.Inventory.Objects.CopyTo(inventory, 0);

                                    foreach (ConquerItem item in inventory)
                                    {
                                        client.Inventory.Remove(item, Conquer_Online_Server.Game.Enums.ItemUse.Remove);
                                    }
                                    break;
                                }
                            case "online":
                                {
                                    client.Send(new Message("Online players count: " + Kernel.GamePool.Count, System.Drawing.Color.BurlyWood, GamePackets.Message.TopLeft));
                                    string line = "";
                                    foreach (Client.GameClient pClient in Program.GamePool)
                                        line += pClient.Entity.Name + ",";

                                    if (line.Length >= 255)
                                        return true;
                                    client.Send(new GamePackets.Message(line, System.Drawing.Color.Beige, GamePackets.Message.Talk));
                                    break;
                                }

                            case "reborn":
                                {
                                    if (client.Entity.Reborn < 2)
                                    {
                                        if (client.Entity.Class % 10 == 5)
                                        {
                                            if (client.Entity.Class != 15 &&
                                                client.Entity.Class != 25 &&
                                                client.Entity.Class != 45 &&
                                                client.Entity.Class != 55 &&
                                                client.Entity.Class != 65 &&
                                                client.Entity.Class != 135 &&
                                                client.Entity.Class != 145)
                                            {
                                                client.Send(new Message("You need to be an existing class.", System.Drawing.Color.BurlyWood, GamePackets.Message.TopLeft));
                                            }
                                            else
                                            {
                                                byte newclass = 10;
                                                byte.TryParse(Data[1], out newclass);
                                                if (newclass != 11 &&
                                                newclass != 21 &&
                                                newclass != 41 &&
                                                newclass != 51 &&
                                                newclass != 61 &&
                                                newclass != 132 &&
                                                newclass != 142)
                                                {
                                                    client.Send(new Message("You need to reborn into an existing class. For fire class = 142 and for waters class = 132.", System.Drawing.Color.BurlyWood, GamePackets.Message.TopLeft));
                                                }
                                                else
                                                {
                                                    if (!client.Reborn(newclass))
                                                        client.Send(new Message("You need atleast 2 spaces in your inventory.", System.Drawing.Color.BurlyWood, GamePackets.Message.TopLeft));
                                                }
                                            }
                                        }
                                        else
                                            client.Send(new Message("You need to be a master to be able to reborn.", System.Drawing.Color.BurlyWood, GamePackets.Message.TopLeft));
                                    }
                                    else
                                        client.Send(new Message("You can't reborn any more.", System.Drawing.Color.BurlyWood, GamePackets.Message.TopLeft));
                                    break;
                                }

                            case "dc":
                                {
                                    client.Disconnect();
                                    break;
                                }
                            case "prof":
                                {
                                    Interfaces.IProf proficiency = new GamePackets.Proficiency(true);
                                    if (Data.Length > 1)
                                        proficiency.ID = ushort.Parse(Data[1]);
                                    if (Data.Length > 2)
                                        proficiency.Level = byte.Parse(Data[2]);
                                    if (Data.Length > 3)
                                        proficiency.Experience = uint.Parse(Data[3]);
                                    client.AddProficiency(proficiency);
                                    break;
                                }
                            case "spell":
                                {
                                    Interfaces.ISkill spell = new GamePackets.Spell(true);
                                    if (Data.Length > 1)
                                        spell.ID = ushort.Parse(Data[1]);
                                    if (Data.Length > 2)
                                        spell.Level = byte.Parse(Data[2]);
                                    if (Data.Length > 3)
                                        spell.Experience = uint.Parse(Data[3]);
                                    client.AddSpell(spell);
                                    break;
                                }

                            case "level":
                                {
                                    byte level = client.Entity.Level;
                                    byte.TryParse(Data[1], out level);
                                    level = Math.Min((byte)140, Math.Max((byte)1, level));
                                    client.Entity.Level = level;
                                    client.Entity.Experience = 0;
                                    //if (client.Entity.Reborn == 0)
                                    {
                                        Database.DataHolder.GetStats(client.Entity.Class, level, client);
                                        client.CalculateStatBonus();
                                        client.CalculateHPBonus();
                                        client.GemAlgorithm();
                                    }
                                    break;
                                }
                            case "class":
                                {
                                    byte _class = client.Entity.Class;
                                    byte.TryParse(Data[1], out _class);
                                    _class = Math.Min((byte)145, Math.Max((byte)1, _class));
                                    client.Entity.Class = _class;
                                    if (client.Entity.Reborn == 0)
                                    {
                                        Database.DataHolder.GetStats(_class, client.Entity.Level, client);
                                        client.CalculateStatBonus();
                                        client.CalculateHPBonus();
                                        client.GemAlgorithm();
                                    }
                                    break;
                                }
                            case "body":
                                {
                                    ushort body = client.Entity.Body;
                                    ushort.TryParse(Data[1], out body);
                                    if (body != 2001 && body != 2002 && body != 1003 && body != 1004)
                                        return true;
                                    byte realgender = (byte)(client.Entity.Body % 10);
                                    byte gender = (byte)(body % 10);
                                    if (client.Equipment.Objects[8] != null)
                                        if (gender >= 3 && realgender <= 2)
                                            return true;
                                    client.Entity.Body = body;
                                    if (gender >= 3 && realgender <= 2)
                                        client.Entity.Face -= 200;
                                    if (gender <= 2 && realgender >= 3)
                                        client.Entity.Face += 200;
                                    break;
                                }
                            case "hair":
                                {
                                    ushort hair = client.Entity.HairStyle;
                                    ushort.TryParse(Data[1], out hair);
                                    client.Entity.HairStyle = hair;
                                    break;
                                }
                            case "map":
                                {
                                    client.Send(new Message("Map: " + client.Map.ID, System.Drawing.Color.Blue, GamePackets.Message.TopLeft));
                                    break;
                                }
                            case "tele":
                                {
                                    if (Data.Length > 3)
                                    {
                                        client.Entity.Teleport(ushort.Parse(Data[1]), ushort.Parse(Data[2]), ushort.Parse(Data[3]));
                                    }
                                    break;
                                }
                            case "tele2":
                                {
                                    if (Data.Length > 3)
                                    {
                                        client.Entity.TeleportHouse(ushort.Parse(Data[1]), ushort.Parse(Data[2]), ushort.Parse(Data[3]));
                                    }
                                    break;
                                }
                            case "transform":
                                {
                                    if (client.Entity.Dead)
                                        break;
                                    bool wasTransformated = client.Entity.Transformed;
                                    if (wasTransformated)
                                    {
                                        client.Entity.Hitpoints = client.Entity.MaxHitpoints;
                                        client.Entity.TransformationID = 0;
                                        client.Entity.TransformationStamp = Time32.Now;
                                        return true;
                                    }
                                    ushort transformation = client.Entity.TransformationID;
                                    ushort.TryParse(Data[1], out transformation);
                                    client.Entity.TransformationID = transformation;
                                    client.Entity.TransformationStamp = Time32.Now;
                                    client.Entity.TransformationTime = 110;
                                    SpellUse spellUse = new SpellUse(true);
                                    spellUse.Attacker = client.Entity.UID;
                                    spellUse.SpellID = 1360;
                                    spellUse.SpellLevel = 4;
                                    spellUse.X = client.Entity.X;
                                    spellUse.Y = client.Entity.Y;
                                    spellUse.AddTarget(client.Entity.UID, (uint)0, null);
                                    client.Send(spellUse);
                                    client.Entity.TransformationMaxHP = 3000;
                                    double maxHP = client.Entity.MaxHitpoints;
                                    double HP = client.Entity.Hitpoints;
                                    double point = HP / maxHP;

                                    client.Entity.Hitpoints = (uint)(client.Entity.TransformationMaxHP * point);
                                    client.Entity.Update(Update.MaxHitpoints, client.Entity.TransformationMaxHP, false);
                                    break;
                                }
                            case "item":
                                {
                                    if (Data.Length > 2)
                                    {
                                        string ItemName = Data[1].ToLower();
                                        Game.Enums.ItemQuality Quality = Game.Enums.ItemQuality.Fixed;
                                        switch (Data[2].ToLower())
                                        {
                                            case "fixed": Quality = Game.Enums.ItemQuality.Fixed; break;
                                            case "normal": Quality = Game.Enums.ItemQuality.Normal; break;
                                            case "normalv1": Quality = Game.Enums.ItemQuality.NormalV1; break;
                                            case "normalv2": Quality = Game.Enums.ItemQuality.NormalV2; break;
                                            case "normalv3": Quality = Game.Enums.ItemQuality.NormalV3; break;
                                            case "refined": Quality = Game.Enums.ItemQuality.Refined; break;
                                            case "unique": Quality = Game.Enums.ItemQuality.Unique; break;
                                            case "elite": Quality = Game.Enums.ItemQuality.Elite; break;
                                            case "super": Quality = Game.Enums.ItemQuality.Super; break;
                                            case "other": Quality = Game.Enums.ItemQuality.Other; break;
                                            default:
                                                {
                                                    Quality = (Conquer_Online_Server.Game.Enums.ItemQuality)int.Parse(Data[2]);
                                                    break;
                                                }
                                        }
                                        Database.ConquerItemBaseInformation CIBI = null;
                                        foreach (Database.ConquerItemBaseInformation infos in Database.ConquerItemInformation.BaseInformations.Values)
                                        {
                                            if (infos.LoweredName == ItemName && Quality == (Game.Enums.ItemQuality)(infos.ID % 10))
                                            {
                                                CIBI = infos;
                                            }
                                        }
                                        if (CIBI == null)
                                            break;
                                        ConquerItem newItem = new GamePackets.ConquerItem(true);
                                        newItem.ID = CIBI.ID;
                                        newItem.Durability = CIBI.Durability;
                                        newItem.MaximDurability = CIBI.Durability;
                                        if (Data.Length > 3)
                                        {
                                            byte plus = 0;
                                            byte.TryParse(Data[3], out plus);
                                            newItem.Plus = Math.Min((byte)12, plus);
                                            if (Data.Length > 4)
                                            {
                                                byte bless = 0;
                                                byte.TryParse(Data[4], out bless);
                                                newItem.Bless = Math.Min((byte)7, bless);
                                                if (Data.Length > 5)
                                                {
                                                    byte ench = 0;
                                                    byte.TryParse(Data[5], out ench);
                                                    newItem.Enchant = Math.Min((byte)255, ench);
                                                    if (Data.Length > 6)
                                                    {
                                                        byte soc1 = 0;
                                                        byte.TryParse(Data[6], out soc1);
                                                        if (Enum.IsDefined(typeof(Game.Enums.Gem), soc1))
                                                        {
                                                            newItem.SocketOne = (Game.Enums.Gem)soc1;
                                                        }
                                                        if (Data.Length > 7)
                                                        {
                                                            byte soc2 = 0;
                                                            byte.TryParse(Data[7], out soc2);
                                                            if (Enum.IsDefined(typeof(Game.Enums.Gem), soc2))
                                                            {
                                                                newItem.SocketTwo = (Game.Enums.Gem)soc2;
                                                            }
                                                        }
                                                        if (Data.Length > 10)
                                                        {
                                                            byte R = 0, G = 0, B = 0;
                                                            byte.TryParse(Data[8], out R);
                                                            byte.TryParse(Data[9], out G);
                                                            byte.TryParse(Data[10], out B);
                                                            newItem.SocketProgress = (uint)(B | (G << 8) | (R << 16));
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        newItem.Color = (Conquer_Online_Server.Game.Enums.Color)Kernel.Random.Next(4, 8);
                                        if (client.Account.State == Conquer_Online_Server.Database.AccountTable.AccountState.GameMaster)
                                            newItem.Bound = true;
                                        client.Inventory.Add(newItem, Game.Enums.ItemUse.CreateAndAdd);
                                    }
                                    break;
                                }
                        }
                        return true;
                    }
                    #endregion
                    return true;
                }
                return false;
            }
            catch { client.Send(new Message("Impossible to handle this command. Check your syntax.", System.Drawing.Color.BurlyWood, Message.TopLeft)); return false; }
        }

        private static void CTFTEST(GameClient client)
        {
            client.Send(Data.Custom(Data.CustomCommands.CTFFlag, client.Entity.UID));
            client.Send(Data.Custom(Data.CustomCommands.CTFScores, client.Entity.UID));
            byte[] data = new byte[200];
            Writer.WriteUInt16(192, 0, data);
            Writer.WriteUInt16(2224, 2, data);
            for (int i = 8; i < 198; i += 1)
                data[i] = (byte)'A';
            client.Send(data);
        }

        private static void TEST_EPKB(GameClient client)
        {
            try
            {
                var array = LoadEntityUIDs(8);
                var matches = new ElitePK.Match[4];
                for (int i = 0; i < 8; i += 2)
                {
                    uint uid1 = array[i];
                    uint uid2 = array[i + 1];
                    matches[i / 2] = new ElitePK.Match(Kernel.GamePool[uid1], Kernel.GamePool[uid2]);
                    matches[i / 2].ID = (uint)(i + 70000);
                    matches[i / 2].Index = (ushort)(i / 2);
                    matches[i / 2].Flag = ElitePK.Match.StatusFlag.AcceptingWagers;
                    matches[i / 2].MatchStats[0].Flag = ElitePK.FighterStats.StatusFlag.Lost;
                    matches[i / 2].MatchStats[1].Flag = ElitePK.FighterStats.StatusFlag.Qualified;
                    matches[i / 2].Done = true;
                    matches[i / 2].Commit();
                }
                ElitePKBrackets brackets = new ElitePKBrackets(true, matches.Length);
                brackets.TotalMatches = 4;
                brackets.MatchCount = 2;
                brackets.Group = 3;
                brackets.GUIType = 6;
                brackets.TimeLeft = 60;
                brackets.Type = ElitePKBrackets.GUIEdit;
                for (int i = 0; i < matches.Length; i++)
                    brackets.Append(matches[i]);
                client.Send(brackets);
                PrintPacket(brackets.ToArray());
                var ExtendedMatchArray = new ElitePK.Match[2];
                for (int i = 0; i < 2; i++)
                {
                    ExtendedMatchArray[i] = new ElitePK.Match(matches[i].Players[1], matches[i + 2].Players[1]);
                    ExtendedMatchArray[i].ID = (uint)(i + 80000);
                    ExtendedMatchArray[i].Index = (ushort)i;
                    ExtendedMatchArray[i].Flag = ElitePK.Match.StatusFlag.AcceptingWagers;
                }
                brackets = new ElitePKBrackets(true, 2);
                brackets.TotalMatches = 2;
                brackets.MatchCount = 2;
                brackets.Group = 3;
                brackets.GUIType = 6;
                brackets.TimeLeft = 60;
                brackets.Type = ElitePKBrackets.UpdateList;
                for (int i = 0; i < ExtendedMatchArray.Length; i++)
                    brackets.Append(ExtendedMatchArray[i]);
                client.Send(brackets);
            }
            catch (Exception) { /*Console.WriteLine(e); */}
        }
        public static void WorldMessage(string message)
        {
            Message msg = new Message(message, System.Drawing.Color.MediumBlue, Message.Center);
            foreach (Client.GameClient pClient in Program.GamePool)
                pClient.Send(msg);
        }
        #endregion
        #region General Data
        static void Revive(Data generalData, Client.GameClient client)
        {
            if (client.Entity.ContainsFlag(Update.Flags2.SoulShackle))
                return;

            if (Time32.Now >= client.Entity.DeathStamp.AddSeconds(18) && client.Entity.Dead)
            {
                client.Entity.Action = Conquer_Online_Server.Game.Enums.ConquerAction.None;
                client.ReviveStamp = Time32.Now;
                client.Attackable = false;

                client.Entity.TransformationID = 0;
                client.Entity.RemoveFlag(Update.Flags.Dead);
                client.Entity.RemoveFlag(Update.Flags.Ghost);
                client.Entity.Hitpoints = client.Entity.MaxHitpoints;
                if (client.Entity.MapID == 1518)
                {
                    client.Entity.Teleport(1002, 400, 400);
                    return;
                }
                bool ReviveHere = generalData.dwParam == 1;
                if (client.Entity.MapID == 1038 && DateTime.Now.DayOfWeek == DayOfWeek.Sunday || DateTime.Now.DayOfWeek == DayOfWeek.Friday && client.Entity.MapID == 1038)
                {
                    client.Entity.Teleport(6001, 31, 74);
                }
                else if (client.Entity.MapID == 3055)
                {
                    client.Entity.Teleport(3055, 117, 135);
                }  
                else if (client.Entity.MapID == 5555)
                {
                    client.Entity.Teleport(5555, 39, 35);
                }
                else if (client.Entity.MapID == 7778)
                {
                    client.Entity.Teleport(7778, 150, 162);
                }
                else if (client.Entity.MapID == 7779)
                {
                    client.Entity.Teleport(7779, 150, 162);
                }
                else if (client.Entity.MapID == 2071)
                {
                    client.Entity.Teleport(2071, 45, 130);
                }
                else if (client.Entity.MapID == 7777)
                {
                    client.Entity.Teleport(7777, 150, 164);
                }
                else if (client.Entity.MapID == 8883)
                {
                    if (client.Entity.TeamDeathMatch_BlackTeam == true)
                    {
                        client.Entity.Teleport(8883, 042, 051);
                    }
                    if (client.Entity.TeamDeathMatch_BlueTeam == true)
                    {
                        client.Entity.Teleport(8883, 060, 042);
                    }
                    if (client.Entity.TeamDeathMatch_WhiteTeam == true)
                    {
                        client.Entity.Teleport(8883, 066, 064);
                    }
                    if (client.Entity.TeamDeathMatch_RedTeam == true)
                    {
                        client.Entity.Teleport(8883, 039, 036);
                    }
                }
                else
                {
                    if (ReviveHere && client.Entity.HeavenBlessing > 0)
                    {
                        client.Entity.Teleport(client.Entity.MapID, client.Entity.X, client.Entity.Y);
                        //client.Send(new MapStatus() { BaseID = client.Map.BaseID, ID = client.Map.ID, Status = Database.MapsTable.MapInformations[client.Map.ID].Status, Weather = Database.MapsTable.MapInformations[client.Map.ID].Weather });
                    }
                    else
                    {
                        ushort[] Point = Database.DataHolder.FindReviveSpot(client.Map.ID);
                        client.Entity.Teleport(Point[0], Point[1], Point[2]);
                    }
                }

            }
        }
        static void UsePortal(Data generalData, Client.GameClient client)
        {
            client.Entity.Action = Conquer_Online_Server.Game.Enums.ConquerAction.None;
            client.ReviveStamp = Time32.Now;
            client.Attackable = false;
            ushort portal_X = (ushort)(generalData.dwParam & 0xFFFF);
            ushort portal_Y = (ushort)(generalData.dwParam >> 16);

            string portal_ID = portal_X.ToString() + ":" + portal_Y.ToString() + ":" + client.Map.ID.ToString();
            if (client.Account.State == Database.AccountTable.AccountState.ProjectManager)
                client.Send(new Message("Portal ID: " + portal_ID, System.Drawing.Color.Red, Network.GamePackets.Message.TopLeft));

            foreach (Game.Portal portal in client.Map.Portals)
            {
                if (Kernel.GetDistance(portal.CurrentX, portal.CurrentY, client.Entity.X, client.Entity.Y) <= 4)
                {
                    client.Entity.Teleport(portal.DestinationMapID, portal.DestinationX, portal.DestinationY);
                    return;
                }
            }
            client.Entity.Teleport(1002, 300, 280);
        }
        static void ObserveEquipment(Data generalData, Client.GameClient client)
        {
            if (NulledClient(client))
                return;
            GameClient Observer, Observee;
            if (Kernel.GamePool.TryGetValue(generalData.UID, out Observer) &&
                Kernel.GamePool.TryGetValue(generalData.dwParam, out Observee))
            {
                if (generalData.ID != 117)
                    Observer.Send(Observee.Entity.WindowSpawn());
                Observer.Send(WindowStats(Observee));
                Observee.Send(new Message(Observer.Entity.Name + " is checking your equipments", System.Drawing.Color.Red, Message.System));
                for (Byte pos = (Byte)ConquerItem.Head; pos <= ConquerItem.AlternateGarment; pos++)
                {
                    ConquerItem i = Observee.Equipment.TryGetItem((Byte)pos);
                    if (i != null)
                    {
                        if (i.IsWorn)
                        {
                            BoothItem2 view = new BoothItem2();
                            view.CostType = BoothItem2.CostTypes.ViewEquip;
                            view.Identifier = Observee.Entity.UID;
                            view.Position = (Positions)(pos % 20);
                            view.ParseItem(i);

                            Observer.Send(view);
                            i.SendExtras(client);
                        }
                    }
                }
                _String packet = new _String(true);
                packet.Type = 16;
                packet.UID = client.Entity.UID;
                packet.TextsCount = 1;
                packet.Texts = new List<string>() { Observee.Entity.Spouse };
                Observer.Send(packet);
                if (generalData.ID == 117)
                {
                    packet.Type = 10;
                    Observer.Send(packet);
                }
                Observer.Send(generalData);
            }
            /*
            Client.GameClient pclient = null;
            if (Kernel.GamePool.TryGetValue(generalData.dwParam, out pclient))
            {
                client.Send(new Status(pclient).ToArray());
                ConquerItem[] Equipment = pclient.Equipment.Objects;
                pclient.Send(new Message(client.Entity.Name + " is observing your gear carefully.", System.Drawing.Color.Red, Message.TopLeft));
                foreach (ConquerItem item in Equipment)
                {
                    if (item != null)
                    {
                        uint UID = item.UID;
                        item.UID = pclient.Entity.UID;
                        item.Mode = Game.Enums.ItemMode.View;
                        item.Send(client);
                        item.UID = UID;
                        item.Mode = Game.Enums.ItemMode.Default;
                    }
                }
                _String packet = new _String(true);
                packet.Type = 16;
                packet.UID = client.Entity.UID;
                packet.TextsCount = 1;
                packet.Texts = new List<string>() { pclient.Entity.Spouse };
                client.Send(packet);
                packet.Type = 10;
                client.Send(packet);
            }
            */
        }
        static void ChangeFace(Data generalData, Client.GameClient client)
        {
            if (client.Entity.Money >= 500)
            {
                uint newface = generalData.dwParam;
                if (client.Entity.Body > 2000)
                {
                    newface = newface < 200 ? newface + 200 : newface;
                    client.Entity.Face = (ushort)newface;
                }
                else
                {
                    newface = newface > 200 ? newface - 200 : newface;
                    client.Entity.Face = (ushort)newface;
                }
            }
        }

        public static void CheckForRaceItems(Client.GameClient client)
        {
            StaticEntity item;
            if (client.Screen.GetRaceObject(p => { return Kernel.GetDistance(client.Entity.X, client.Entity.Y, p.X, p.Y) <= 1; }, out item))
            {
                if (item == null) return;
                if (!item.Viable) return;
                var type = item.Type; // for super exclamation mark 
                bool successful = false;
                if (type == Enums.RaceItemType.FrozenTrap && !item.QuestionMark)
                {
                    if (item.SetBy != client.Entity.UID)
                    {
                        client.ApplyRacePotion(type, uint.MaxValue);
                        client.Map.RemoveStaticItem(item);
                        successful = true;
                    }
                }
                else
                {
                    if (client.Potions == null) client.Potions = new UsableRacePotion[5];
                    for (ushort i = 0; i < client.Potions.Length; i++)
                    {
                        var pot = client.Potions[i];
                        if (pot == null)
                        {
                            pot = (client.Potions[i] = new UsableRacePotion());
                            pot.Type = type;
                            pot.Count = item.Level;
                            client.Send(new RacePotion(true)
                            {
                                PotionType = type,
                                Amount = (ushort)pot.Count,
                                Location = (ushort)(i + 1)
                            });
                            successful = true;
                            break;
                        }
                        else
                        {
                            if (pot.Type == type)
                            {
                                pot.Count += item.Level;
                                client.Send(new RacePotion(true)
                                {
                                    PotionType = type,
                                    Amount = (ushort)pot.Count,
                                    Location = (ushort)(i + 1)
                                });
                                successful = true;
                                break;
                            }
                        }
                    }
                }
                if (successful)
                {
                    client.SendScreen(new _String(true)
                    {
                        Texts = new List<string>() { "eidolon" },
                        UID = client.Entity.UID,
                        Type = _String.Effect
                    });
                    client.RemoveScreenSpawn(item, true);
                    item.Viable = false;
                    item.NotViableStamp = Time32.Now;
                }
            }
        }

        static void PlayerJump(Data generalData, Client.GameClient client)
        {
            client.Entity.KillCount2 = 0;
            //client.Entity.KillCount /= 2;
            client.Entity.SpiritFocus = false;
            ushort oldX = client.Entity.X;
            ushort oldY = client.Entity.Y;
            client.Entity.Action = Conquer_Online_Server.Game.Enums.ConquerAction.None;
            client.Mining = false;
            if (client.Entity.ContainsFlag(Update.Flags.CastPray))
            {
                client.Entity.RemoveFlag(Update.Flags.CastPray);
                foreach (var Client in client.Prayers)
                {
                    if (Client.Entity.ContainsFlag(Update.Flags.Praying))
                    {
                        Client.Entity.RemoveFlag(Update.Flags.Praying);
                    }
                }
                client.Prayers.Clear();
            }

            if (client.Entity.ContainsFlag(Update.Flags.Praying))
            {
                client.Entity.RemoveFlag(Update.Flags.Praying);
                client.PrayLead.Prayers.Remove(client);
                client.PrayLead = null;
            }
            Time32 Now = Time32.Now;

            client.Attackable = true;
            if (client.Entity.AttackPacket != null)
            {
                client.Entity.AttackPacket = null;
            }
            if (client.Entity.Dead)
            {
                if (Now > client.Entity.DeathStamp.AddSeconds(4))
                {
                    client.Disconnect();
                    return;
                }
            }
            ushort new_X = BitConverter.ToUInt16(generalData.ToArray(), 12);
            ushort new_Y = BitConverter.ToUInt16(generalData.ToArray(), 14);
            if (client.lastJumpDistance == 0) goto Jump;
            if (client.Entity.ContainsFlag(Update.Flags.Ride))
            {
                int distance = Kernel.GetDistance(new_X, new_Y, client.Entity.X, client.Entity.Y);
                ushort take = (ushort)(1.5F * (distance / 2));
                if (client.Vigor >= take)
                {
                    client.Vigor -= take;
                    Network.GamePackets.Vigor vigor = new Network.GamePackets.Vigor(true);
                    vigor.Amount = client.Vigor;
                    vigor.Send(client);
                }
                else
                {
                    //client.Entity.Shift(client.Entity.X, client.Entity.Y);
                    //return;
                }
            }
            client.LastJumpTime = (int)Kernel.maxJumpTime(client.lastJumpDistance);
            int a1 = Convert.ToInt32(generalData.TimeStamp.GetHashCode() - client.LastClientJump.GetHashCode());
            if (a1 <= 500)
            {
                if (!client.Entity.OnCyclone() && !client.Entity.ContainsFlag(Update.Flags.Ride) && !client.Entity.OnOblivion() && !client.Entity.OnSuperman() && !client.Entity.OnSuperman() && !client.Entity.OnSuperCyclone() && !client.Entity.Transformed)
                {
                    if (Now > client.Entity.OblivionStamp.AddSeconds(client.Entity.OblivionTime + 5) && Now > client.Entity.CycloneStamp.AddSeconds(client.Entity.CycloneTime + 5) && Now > client.Entity.SupermanStamp.AddSeconds(client.Entity.SupermanTime + 5) && Now > client.Entity.BladeFlurryStamp.AddSeconds(client.Entity.SupermanTime + 5) && Now > client.Entity.CycloneStamp.AddSeconds(client.Entity.CycloneTime + 5))
                    {
                        //ServerBase.Kernel.Txt(new Message("[Anti-SpeedHack] " + client.Entity.Name + " He/She Is Using SpeedHack and He/She Was Teleported To Jail, If He/She Still Using Will Get Banned .", System.Drawing.Color.Red, Message.Center), Program.GamePool);
                        client.Entity.Teleport(1002, 300, 280);
                        Console.WriteLine(client.Entity.Name + " sent to jail for using SpeedHack [" + a1 + "] [By Client] .");
                        //client.Account.State = Database.AccountTable.AccountState.Banned;
                        //client.Account.SaveState();
                        //client.Disconnect();
                    }
                }
            }  
            
         
        Jump:
            client.lastJumpDistance = Kernel.GetDistance(new_X, new_Y, client.Entity.X, client.Entity.Y);
            client.lastClientJumpTime = generalData.TimeStamp;
            client.lastJumpTime = Now;
            Game.Map Map = client.Map;
            client.LastClientJump = generalData.TimeStamp;  

            if (Map != null)
            {
                if (Map.Floor[new_X, new_Y, Game.MapObjectType.Player, null])
                {
                    if (Kernel.GetDistance(new_X, new_Y, client.Entity.X, client.Entity.Y) <= 20)
                    {
                        client.Entity.Action = Game.Enums.ConquerAction.Jump;
                        client.Entity.Facing = Kernel.GetAngle(generalData.wParam1, generalData.wParam2, new_X, new_Y);
                        client.Entity.PX = client.Entity.X;
                        client.Entity.PY = client.Entity.Y;
                        client.Entity.X = new_X;
                        client.Entity.Y = new_Y;
                        if (client.Entity.MapID == CaptureTheFlag.MapID)
                            CheckForFlag(client);
                        client.SendScreen(generalData, true);
                        client.Screen.Reload(generalData);
                        if (client.Entity.InteractionInProgress && client.Entity.InteractionSet)
                        {
                            if (client.Entity.Body == 1003 || client.Entity.Body == 1004)
                            {
                                if (Kernel.GamePool.ContainsKey(client.Entity.InteractionWith))
                                {
                                    Client.GameClient ch = Kernel.GamePool[client.Entity.InteractionWith];
                                    Conquer_Online_Server.Network.GamePackets.Data general = new Conquer_Online_Server.Network.GamePackets.Data(true);
                                    general.UID = ch.Entity.UID;
                                    general.wParam1 = new_X;
                                    general.wParam2 = new_Y;
                                    general.ID = 0x9c;
                                    ch.Send(general.ToArray());
                                    ch.Entity.Action = Game.Enums.ConquerAction.Jump;
                                    ch.Entity.X = new_X;
                                    ch.Entity.Y = new_Y;
                                    ch.Entity.Facing = Kernel.GetAngle(ch.Entity.X, ch.Entity.Y, new_X, new_Y);
                                    ch.SendScreen(generalData, true);
                                    ch.Screen.Reload(general);
                                    client.SendScreen(generalData, true);
                                    client.Screen.Reload(general);
                                }
                            }
                        }
                    }
                    else
                    {
                        client.Disconnect();
                    }
                }
                else
                {
                    if (client.Entity.Mode == Game.Enums.Mode.None)
                    {
                        client.Entity.Teleport(client.Map.ID, client.Entity.X, client.Entity.Y);
                    }
                }
            }
            else
            {
                if (Kernel.GetDistance(new_X, new_Y, client.Entity.X, client.Entity.Y) <= 20)
                {
                    client.Entity.Action = Game.Enums.ConquerAction.Jump;
                    client.Entity.Facing = Kernel.GetAngle(generalData.wParam1, generalData.wParam2, new_X, new_Y);
                    client.Entity.X = new_X;
                    client.Entity.Y = new_Y;
                    client.SendScreen(generalData, true);
                    client.Screen.Reload(generalData);
                }
                else
                {
                    client.Disconnect();
                }
            }
            if (client.Map.BaseID == 1038 && Conquer_Online_Server.Game.GuildWar.IsWar)
            {

                Conquer_Online_Server.Game.Calculations.IsBreaking(client, oldX, oldY);
            }
            if (!client.Entity.HasMagicDefender)
            {
                if (client.Team != null)
                {
                    var owners = client.Team.Teammates.Where(x => x.Entity.MagicDefenderOwner);
                    if (owners != null)
                    {
                        foreach (var owner in owners)
                        {
                            if (Kernel.GetDistance(client.Entity.X, client.Entity.Y, owner.Entity.X, owner.Entity.Y) <= 4)
                            {
                                client.Entity.HasMagicDefender = true;
                                client.Entity.MagicDefenderStamp = Time32.Now;
                                client.Entity.MagicDefenderSecs = (byte)(owner.Entity.MagicDefenderStamp.AddSeconds(owner.Entity.MagicDefenderSecs) - owner.Entity.MagicDefenderStamp).AllSeconds();
                                client.Entity.AddFlag3(Conquer_Online_Server.Network.GamePackets.Update.Flags3.MagicDefender);
                                client.Entity.Update(client.Entity.StatusFlag, client.Entity.StatusFlag2, client.Entity.StatusFlag3, Update.MagicDefenderIcone, 0x80, client.Entity.MagicDefenderSecs, 0, false);
                                break;
                            }
                        }
                    }
                }
            }
            else
            {
                client.Entity.RemoveMagicDefender();
            }
        }

        private static void CheckForFlag(GameClient client)
        {
            if (client.Entity.GuildID == 0) return;
            if (!client.Entity.ContainsFlag2(Update.Flags2.CarryingFlag))
            {
                foreach (var item in client.Map.StaticEntities.Values)
                {
                    if (Kernel.GetDistance(item.X, item.Y, client.Entity.X, client.Entity.Y) == 0)
                    {
                        client.Entity.FlagStamp = Time32.Now;

                        client.Send(Program.World.CTF.generateTimer(60));
                        client.Send(Program.World.CTF.generateEffect());

                        client.Entity.AddFlag2(Update.Flags2.CarryingFlag);
                        client.Map.RemoveStaticItem(item);
                        client.RemoveScreenSpawn(item, true);
                    }
                }
            }
            else
            {
                Program.World.CTF.AroundBase(client);
            }
        }
        public static byte[] WindowStats(Client.GameClient client)
        {
            Byte[] mData = new Byte[140 + 8];
            Writer.WriteUInt16((UInt16)(mData.Length - 8), 0, mData);
            Writer.WriteUInt16((UInt16)1040, 2, mData);
            Writer.WriteUInt32((UInt32)Time32.timeGetTime().GetHashCode(), 4, mData);
            Writer.WriteUInt32(client.Entity.UID, 8, mData);
            Writer.WriteUInt32(client.Entity.MaxHitpoints, 12, mData);
            Writer.WriteUInt32((UInt32)client.Entity.MaxMana, 16, mData);
            Writer.WriteUInt32((UInt32)client.Entity.MaxAttack, 20, mData);
            Writer.WriteUInt32((UInt32)client.Entity.MinAttack, 24, mData);
            Writer.WriteUInt32((UInt32)client.Entity.Defence, 28, mData);
            Writer.WriteUInt32((UInt32)client.Entity.MagicAttack, 32, mData);
            Writer.WriteUInt32((UInt32)client.Entity.MagicDefence, 36, mData);
            Writer.WriteUInt32((UInt32)client.Entity.Dodge, 40, mData);
            Writer.WriteUInt32((UInt32)client.Entity.Agility, 44, mData);
            //Writer.WriteUInt32((UInt32)(client.Entity.Gems[13] * 100), 52, mData);
            Writer.WriteUInt32((UInt32)client.Entity.ItemBless, 68, mData);
            Writer.WriteUInt32((UInt32)client.Entity.CriticalStrike, 72, mData);
            Writer.WriteUInt32((UInt32)client.Entity.SkillCStrike, 76, mData);

            Writer.WriteUInt32((UInt32)client.Entity.Immunity, 80, mData);
            Writer.WriteUInt32((UInt32)client.Entity.Penetration, 84, mData);
            Writer.WriteUInt32((UInt32)client.Entity.Block, 88, mData);
            Writer.WriteUInt32((UInt32)client.Entity.Breaktrough, 92, mData);
            Writer.WriteUInt32((UInt32)client.Entity.Counteraction, 96, mData);
            Writer.WriteUInt32((UInt32)client.Entity.Detoxication, 100, mData);
            Writer.WriteUInt32((UInt32)client.Entity.PhysicalDamageIncrease, 104, mData); // Final + Atk
            Writer.WriteUInt32((UInt32)client.Entity.MagicDamageIncrease, 108, mData); // Final + MAtk
            Writer.WriteUInt32((UInt32)client.Entity.PhysicalDamageDecrease, 112, mData); // Final - Dmg
            Writer.WriteUInt32((UInt32)client.Entity.MagicDamageDecrease, 116, mData); // Final - MDmg
            Writer.WriteUInt32((UInt32)client.Entity.MetalResistance, 120, mData);
            Writer.WriteUInt32((UInt32)client.Entity.WoodResistance, 124, mData);
            Writer.WriteUInt32((UInt32)client.Entity.WaterResistance, 128, mData);
            Writer.WriteUInt32((UInt32)client.Entity.FireResistance, 132, mData);
            Writer.WriteUInt32((UInt32)client.Entity.EarthResistance, 136, mData);
            return mData;
        }
        static void PlayerGroundMovment(GroundMovement groundMovement, Client.GameClient client)
        {
            client.Entity.SpellStamp = Time32.Now.AddSeconds(-1);
            client.Entity.KillCount2 = 0;
            client.Entity.Action = Conquer_Online_Server.Game.Enums.ConquerAction.None;
            client.Attackable = true;
            client.Mining = false;
            var oldX = client.Entity.X;
            var oldY = client.Entity.Y;
            if (client.Entity.ContainsFlag(Update.Flags.CastPray))
            {
                client.Entity.RemoveFlag(Update.Flags.CastPray);
                foreach (var Client in client.Prayers)
                {
                    if (Client.Entity.ContainsFlag(Update.Flags.Praying))
                    {
                        Client.Entity.RemoveFlag(Update.Flags.Praying);
                    }
                }
                client.Prayers.Clear();
            }
            if (client.Entity.ContainsFlag(Update.Flags.Praying))
            {
                client.Entity.RemoveFlag(Update.Flags.Praying);
                if (client.PrayLead != null)
                    client.PrayLead.Prayers.Remove(client);
                client.PrayLead = null;
            }
            if (client.Entity.AttackPacket != null)
            {
                client.Entity.AttackPacket = null;
            }
            if (client.Entity.ContainsFlag(Update.Flags.Ride)) client.Vigor -= 1;
            client.Entity.PX = client.Entity.X;
            client.Entity.PY = client.Entity.Y;

            if (!client.Entity.Move(groundMovement.Direction, groundMovement.GroundMovementType == GroundMovement.Slide)) return;

            if (client.Entity.MapID == Game.SteedRace.MAPID)
            {
                if (!Program.World.SteedRace.IsOn)
                {
                    if (client.Entity.X <= Program.World.SteedRace.GateX + 1)
                    {
                        client.Entity.Teleport(client.Entity.PX, client.Entity.PY);
                        return;
                    }
                }
            }
            if (client.Entity.MapID == Game.SteedRace.MAPID)
                CheckForRaceItems(client);
            if (client.Entity.MapID == CaptureTheFlag.MapID)
                CheckForFlag(client);

            client.SendScreen(groundMovement, true);
            client.Screen.Reload(groundMovement);

            if (client.Entity.InteractionInProgress)
            {
                if (!client.Entity.InteractionSet)
                {
                    if (Kernel.GamePool.ContainsKey(client.Entity.InteractionWith))
                    {
                        Client.GameClient ch = Kernel.GamePool[client.Entity.InteractionWith];
                        if (ch.Entity.InteractionInProgress && ch.Entity.InteractionWith == client.Entity.UID)
                        {
                            if (client.Entity.InteractionX == client.Entity.X && client.Entity.Y == client.Entity.InteractionY)
                            {
                                if (client.Entity.X == ch.Entity.X && client.Entity.Y == ch.Entity.Y)
                                {
                                    Network.GamePackets.Attack atac = new Network.GamePackets.Attack(true);
                                    atac.Attacker = ch.Entity.UID;
                                    atac.Attacked = client.Entity.UID;
                                    atac.X = ch.Entity.X;
                                    atac.Y = ch.Entity.Y;
                                    atac.Damage = client.Entity.InteractionType;
                                    atac.ResponseDamage = client.InteractionEffect;
                                    atac.AttackType = 47;
                                    ch.Send(atac);

                                    atac.AttackType = 49;
                                    atac.Attacker = client.Entity.UID;
                                    atac.Attacked = ch.Entity.UID;
                                    client.SendScreen(atac, true);

                                    atac.Attacker = ch.Entity.UID;
                                    atac.Attacked = client.Entity.UID;
                                    client.SendScreen(atac, true);
                                }
                            }
                        }
                    }
                }
                else
                {
                    if (client.Entity.Body == 1003 || client.Entity.Body == 1004)
                    {
                        if (Kernel.GamePool.ContainsKey(client.Entity.InteractionWith))
                        {
                            Client.GameClient ch = Kernel.GamePool[client.Entity.InteractionWith];

                            ch.Entity.Facing = groundMovement.Direction;
                            ch.Entity.Move(groundMovement.Direction);
                            Network.GamePackets.Data general = new Network.GamePackets.Data(true);
                            general.UID = ch.Entity.UID;
                            general.wParam1 = ch.Entity.X;
                            general.wParam2 = ch.Entity.Y;
                            general.ID = 0x9c;
                            ch.Send(general.ToArray());
                            ch.Screen.Reload(null);
                        }
                    }
                }
            }
            if (client.Map.BaseID == 1038 && Conquer_Online_Server.Game.GuildWar.IsWar)
            {
                Conquer_Online_Server.Game.Calculations.IsBreaking(client, oldX, oldY);
            }
            if (!client.Entity.HasMagicDefender)
            {
                if (client.Team != null)
                {
                    var owners = client.Team.Teammates.Where(x => x.Entity.MagicDefenderOwner);
                    if (owners != null)
                    {
                        foreach (var owner in owners)
                        {
                            if (Kernel.GetDistance(client.Entity.X, client.Entity.Y, owner.Entity.X, owner.Entity.Y) <= 4)
                            {
                                client.Entity.HasMagicDefender = true;
                                client.Entity.MagicDefenderStamp = Time32.Now;
                                client.Entity.MagicDefenderSecs = (byte)(owner.Entity.MagicDefenderStamp.AddSeconds(owner.Entity.MagicDefenderSecs) - owner.Entity.MagicDefenderStamp).AllSeconds();
                                client.Entity.AddFlag3(Conquer_Online_Server.Network.GamePackets.Update.Flags3.MagicDefender);
                                client.Entity.Update(client.Entity.StatusFlag, client.Entity.StatusFlag2, client.Entity.StatusFlag3, Update.MagicDefenderIcone, 0x80, client.Entity.MagicDefenderSecs, 0, false);
                                break;
                            }
                        }
                    }
                }
            }
            else
            {
                client.Entity.RemoveMagicDefender();
            }
        }
        static void GetSurroundings(Client.GameClient client)
        {
            client.Screen.FullWipe();
            client.Screen.Reload(null);
            if (client.Entity.PreviousMapID == CaptureTheFlag.MapID)
                Program.World.CTF.CloseList(client);
        }
        static void ChangeAction(Data generalData, Client.GameClient client)
        {
            client.Entity.Action = (ushort)generalData.dwParam;
            if (client.Entity.ContainsFlag(Network.GamePackets.Update.Flags.CastPray))
            {
                foreach (var Client in client.Prayers)
                {
                    generalData.UID = Client.Entity.UID;
                    generalData.dwParam = (uint)client.Entity.Action;
                    generalData.wParam1 = Client.Entity.X;
                    generalData.wParam2 = Client.Entity.Y;
                    Client.Entity.Action = client.Entity.Action;
                    if (Time32.Now >= Client.CoolStamp.AddMilliseconds(1500))
                    {
                        if (Client.Equipment.IsAllSuper())
                            generalData.dwParam = (uint)(generalData.dwParam | (uint)(Client.Entity.Class * 0x10000 + 0x1000000));
                        else if (Client.Equipment.IsArmorSuper())
                            generalData.dwParam = (uint)(generalData.dwParam | (uint)(Client.Entity.Class * 0x10000));
                        Client.SendScreen(generalData, true);
                        Client.CoolStamp = Time32.Now;
                    }
                    else
                        Client.SendScreen(generalData, false);
                }
            }
            generalData.UID = client.Entity.UID;
            generalData.dwParam = (uint)client.Entity.Action;
            if (client.Entity.Action == Conquer_Online_Server.Game.Enums.ConquerAction.Cool)
            {
                if (Time32.Now >= client.CoolStamp.AddMilliseconds(1500))
                {
                    if (client.Equipment.IsAllSuper())
                        generalData.dwParam = (uint)(generalData.dwParam | (uint)(client.Entity.Class * 0x10000 + 0x1000000));
                    else if (client.Equipment.IsArmorSuper())
                        generalData.dwParam = (uint)(generalData.dwParam | (uint)(client.Entity.Class * 0x10000));
                    client.SendScreen(generalData, true);
                    client.CoolStamp = Time32.Now;
                }
                else
                    client.SendScreen(generalData, false);
            }
            else
                client.SendScreen(generalData, false);
        }
        static void ChangeDirection(Data generalData, Client.GameClient client)
        {
            client.Entity.Facing = (Game.Enums.ConquerAngle)generalData.Facing;
            client.SendScreen(generalData, false);
        }
        static void ChangePKMode(Data generalData, Client.GameClient client)
        {
            if (client.Entity.PKMode == Conquer_Online_Server.Game.Enums.PKMode.Jiang)
            {
                if ((Game.Enums.PKMode)(byte)generalData.dwParam != Conquer_Online_Server.Game.Enums.PKMode.Jiang)
                {
                    client.Entity.SendSysMesage("Your JiangHu will disable aftar 1 min please be patient");
                }
            }
            if (client.InTeamQualifier()) return;
            client.Entity.AttackPacket = null;
            client.Entity.PKMode = (Game.Enums.PKMode)(byte)generalData.dwParam;
            client.Send(generalData);
            if ((client.Entity.PKMode == Conquer_Online_Server.Game.Enums.PKMode.Jiang) && (client.Entity.MyJiang != null))
            {
                client.Entity.MyJiang.OnJiangHu = true;
                client.Entity.MyJiang.SendStatusMode(client);
                client.SendScreen(generalData, false);
                client.SendScreen(client.Entity.SpawnPacket, false);  
            }
            if (client.Entity.PKMode == Game.Enums.PKMode.PK)
            {

                client.Send(new Message("Free PK mode. You can attack monster and all players.", System.Drawing.Color.Red, Message.Talk));
                return;
            }

            if (client.Entity.PKMode == Game.Enums.PKMode.Capture)
            {

                client.Send(new Message("Capture PK mode. You can only attack monsters, black-name and blue-name players.", System.Drawing.Color.Red, Message.Talk));
                return;
            }

            if (client.Entity.PKMode == Game.Enums.PKMode.Peace)
            {

                client.Send(new Message("Peace mode. You can only attack monsters.", System.Drawing.Color.Red, Message.Talk));
                return;
            }
            if (client.Entity.PKMode == Game.Enums.PKMode.Team)
            {

                client.Send(new Message("Team PK mode. You can attack monster and all players except your teammates.", System.Drawing.Color.Red, Message.Talk));
                return;
            }
        }
        static void SetLocation(Data generalData, Client.GameClient client)
        {

            client.Screen.Reload(null);
            client.Screen.FullWipe();
            client.SendScreenSpawn(client.Entity, true);
            client.Screen.Reload(null);
            {
                if (client.Entity.MyJiang != null)
                {
                    client.Entity.MyJiang.OnloginClient(client);
                }
                else if (client.Entity.Reborn == 2)
                {
                    Conquer_Online_Server.Network.GamePackets.JiangHu hu = new Conquer_Online_Server.Network.GamePackets.JiangHu
                    {
                        Texts = { "0" }
                    };
                    hu.CreateArray();
                    hu.Send(client);
                }
                client.Send(client.Entity.MyAchievement.ToArray());
                ElitePKTournament.GiveClientReward(client);
                if (client.Guild != null)
                    client.Guild.SendGuild(client);

                Clan clan = client.Entity.GetClan;
                if (clan != null)
                {
                    clan.Build(client, Clan.Types.Info);
                    client.Send(clan);

                    client.Entity.ClanName = clan.Name;

                    client.Send(new ClanRelations(clan, ClanRelations.RelationTypes.Allies));
                    client.Send(new ClanRelations(clan, ClanRelations.RelationTypes.Enemies));
                }

                foreach (Game.ConquerStructures.Society.Guild guild in Kernel.Guilds.Values)
                {
                    guild.SendName(client);
                    guild.SendName(client);
                }

                if (client.Entity.EnlightmentTime > 0)
                {
                    Enlight enlight = new Enlight(true);
                    enlight.Enlighted = client.Entity.UID;
                    enlight.Enlighter = 0;

                    if (client.Entity.EnlightmentTime > 80)
                        client.Entity.EnlightmentTime = 100;
                    else if (client.Entity.EnlightmentTime > 60)
                        client.Entity.EnlightmentTime = 80;
                    else if (client.Entity.EnlightmentTime > 40)
                        client.Entity.EnlightmentTime = 60;
                    else if (client.Entity.EnlightmentTime > 20)
                        client.Entity.EnlightmentTime = 40;
                    else if (client.Entity.EnlightmentTime > 0)
                        client.Entity.EnlightmentTime = 20;
                    for (int count = 0; count < client.Entity.EnlightmentTime; count += 20)
                    {
                        client.Send(enlight);
                    }
                }

                if (client.Entity.Hitpoints != 0)
                {
                    if (client.Map.ID == 1036 || client.Map.ID == 1039)
                    {
                        if (client.Entity.PreviousMapID == 0)
                            client.Entity.SetLocation(1002, 300, 280);
                        else
                        {
                            switch (client.Entity.PreviousMapID)
                            {
                                default:
                                    {
                                        client.Entity.SetLocation(1002, 300, 280);
                                        break;
                                    }
                                case 1000:
                                    {
                                        client.Entity.SetLocation(1000, 500, 650);
                                        break;
                                    }
                                case 1020:
                                    {
                                        client.Entity.SetLocation(1020, 565, 562);
                                        break;
                                    }
                                case 1011:
                                    {
                                        client.Entity.SetLocation(1011, 188, 264);
                                        break;
                                    }
                                case 1015:
                                    {
                                        client.Entity.SetLocation(1015, 717, 571);
                                        break;
                                    }
                            }
                        }
                    }
                }
                else
                {
                    if (client.Entity.MapID == 1038 && Conquer_Online_Server.Game.GuildWar.IsWar)
                    {
                        client.Entity.SetLocation(6001, 31, 74);
                    }
                    else
                    {
                        ushort[] Point = Database.DataHolder.FindReviveSpot(client.Map.ID);
                        client.Entity.SetLocation(Point[0], Point[1], Point[2]);
                    }
                }
                generalData.dwParam = client.Map.BaseID;
                generalData.wParam1 = client.Entity.X;
                generalData.wParam2 = client.Entity.Y;
                client.Send(generalData);
                client.Send(new MapStatus() { BaseID = client.Map.BaseID, ID = client.Map.ID, Status = Database.MapsTable.MapInformations[client.Map.ID].Status, Weather = Database.MapsTable.MapInformations[client.Map.ID].Weather });
                client.Entity.SetLocation(client.Entity.MapID, client.Entity.X, client.Entity.Y);
                client.Screen.Reload(null);//Done
                client.Screen.FullWipe();
                client.SendScreenSpawn(client.Entity, true);
                client.Screen.Reload(null);
            }
        }
        public static object LoginSyncRoot = new object();

        static void AppendConnect(Connect appendConnect, Client.GameClient client)
        {
            if (client.LoggedIn)
            {
                client.Disconnect(true);
                return;
            }
            bool doLogin = false;
            lock (LoginSyncRoot)
            {
                Database.AccountTable Account = null;
                if (Kernel.AwaitingPool.TryGetValue(appendConnect.Identifier, out Account))
                {
                    if (!Account.MatchKey(appendConnect.Identifier))
                    {
                        client.Disconnect(false);
                        return;
                    }

                    client.Account = Account;

                    if (Account.EntityID == 0)
                    {
                        client.Socket.OverrideTiming = true;
                        client.Send(new Message("NEW_ROLE", "ALLUSERS", System.Drawing.Color.Orange, GamePackets.Message.Dialog));
                        return;
                    }
                    if (Kernel.DisconnectPool.ContainsKey(Account.EntityID))
                    {
                        client.Send(new Message("Please try again after a minute!", "ALLUSERS", System.Drawing.Color.Orange, GamePackets.Message.Dialog));
                        return;
                    }
                    VariableVault variables;
                    Database.EntityVariableTable.Load(client.Account.EntityID, out variables);
                    client.Variables = variables;

                    if (client["banhours"] == 0)
                    {
                        client["banhours"] = -1;
                        client["banreason"] = "Infinite time.";
                        client["banstamp"] = DateTime.Now.AddYears(100);
                    }
                    if (Account.State == Database.AccountTable.AccountState.Banned)
                    {
                        if (client["banhours"] != -1)
                        {
                            DateTime banStamp = client["banstamp"];
                            if (DateTime.Now > banStamp.AddDays(((int)client["banhours"]) / 24).AddHours(((int)client["banhours"]) % 24))
                                Account.State = Database.AccountTable.AccountState.Player;
                        }
                    }
                    string Message = "";
                    if (Kernel.Online == false)
                    {
                        Message = "Faild to login: Server offline for manitence wait 1 mint and try again";
                        //client.Disconnect(false);                        
                    }
                    if (Account.State == Database.AccountTable.AccountState.Banned)
                    {
                        DateTime banStamp = client["banstamp"];
                        banStamp = banStamp.AddHours(client["banhours"]);
                        Message = "Faild to login: This account has been banned Error(12)";
                    }
                    else if (Account.State == Database.AccountTable.AccountState.NotActivated)
                        Message = "You cannot login until your account is activated.";
                    Kernel.AwaitingPool.Remove(appendConnect.Identifier);
                    if (Message == string.Empty) // ANSWER_OK
                    {
                        Client.GameClient aClient = null;
                        if (Kernel.GamePool.TryGetValue(Account.EntityID, out aClient))
                            aClient.Disconnect();
                        Kernel.GamePool.Remove(Account.EntityID);
                        client.Entity = new Entity(EntityFlag.Monster, false);
                        Kernel.GamePool.Add(Account.EntityID, client);
                        doLogin = true;
                    }
                    else
                    {
                        client.Send(new Message(Message, "ALLUSERS", System.Drawing.Color.Orange, GamePackets.Message.Dialog));
                        World.Execute<GameClient>((pClient, time) => { pClient.Disconnect(); }, client, 100);
                    }
                }
            }
            if (doLogin)
            {
                DoLogin(client);
            }
        }

        private static void HeaderUpdates(string update, GameClient client)
        {
            client.Send(new GameUpdates(GameUpdates.Header, update));
        }
        private static void BodyUpdates(string update, GameClient client)
        {
            client.Send(new GameUpdates(GameUpdates.Body, update));
        }
        private static void FooterUpdates(string update, GameClient client)
        {
            client.Send(new GameUpdates(GameUpdates.Footer, update));
        }
        public static ConcurrentDictionary<string, byte[]> TreasurePointsAllowance = new ConcurrentDictionary<string, byte[]>();
        public static object TPASyncRoot = new object();
        public static void AddTPA(GameClient client)
        {
            if (!TreasurePointsAllowance.ContainsKey(client.Socket.IP))
                TreasurePointsAllowance.Add(client.Socket.IP, new byte[3]);
            lock (TPASyncRoot)
            {
                byte[] data = TreasurePointsAllowance[client.Socket.IP];
                for (int i = 0; i < data.Length; i++)
                {
                    if (data[i] == 0)
                    {
                        client.AllowedTreasurePoints = true;
                        client.AllowedTreasurePointsIndex = i;
                        data[i] = 1;
                    }
                }
            }
        }
        public static void RemoveTPA(GameClient client)
        {
            if (client.AllowedTreasurePoints)
            {
                lock (TPASyncRoot)
                {
                    byte[] data = TreasurePointsAllowance[client.Socket.IP];
                    data[client.AllowedTreasurePointsIndex] = 0;
                }
            }
        }
        
      static void DoLogin(GameClient client)
        {
            client.ReadyToPlay();
            if (Database.EntityTable.LoadEntity(client))
            {
                if (client.Entity.FullyLoaded)
                {
                    AddTPA(client);
                 
                    if (ItemPosition(client.BackupArmorLook) == ConquerItem.Garment) client.BackupArmorLook = 0;
                    if (ItemPosition(client.ArmorLook) == ConquerItem.Garment) client.ArmorLook = 0;
                    if (client.BackupArmorLook != 0) client.SetNewArmorLook(client.BackupArmorLook);
                    else client.SetNewArmorLook(client.ArmorLook);
                    client.SetNewHeadgearLook(client.HeadgearLook);
                    client.BackupArmorLook = 0;
                    Database.PkExpelTable.Load(client);
                    client.LoadData();//TQ
                    Database.ChiRetreatTable.Load(client);
                    if (client.Entity.GuildID != 0)
                    {
                        client.Entity.GuildBattlePower = client.Guild.GetSharedBattlepower(client.Entity.GuildRank);
                    }
                    client.ReviewMentor();

                    if (client.JustCreated)
                    {
                        client.JustCreated = false;
                        SetLocation(new Data(true) { UID = client.Entity.UID }, client);
                    }
                }
            }
            else
            {
                client.Send(new Message("Cannot find your character.", "ALLUSERS", System.Drawing.Color.Orange, GamePackets.Message.Dialog));
                client.Disconnect(false);
                return;
            }

            if (Kernel.GamePool.Count >= Program.PlayerCap)
            {
                client.Send(new Message("Player limit exceeded. (Online players: " + Kernel.GamePool + "/" + Program.PlayerCap + ")", "ALLUSERS", System.Drawing.Color.Orange, GamePackets.Message.Dialog));
                client.Disconnect(false);
                return;
            }

            client.Send(new Message("ANSWER_OK", "ALLUSERS", System.Drawing.Color.Orange, GamePackets.Message.Dialog));
            Program.World.Register(client);
            Kernel.GamePool[client.Account.EntityID] = client;

            Database.EntityTable.UpdateOnlineStatus(client, true);
            client.Send(new GamePackets.CharacterInfo(client));
            string IP = client.IP;
            client.Account.SetCurrentIP(IP);
            client.Account.Save();
            if (Kernel.GamePool.Count > Program.MaxOn)
            {
                Program.MaxOn = Kernel.GamePool.Count;
            }
            Console.WriteLine(client.Entity.Name + " has logged on! Ip:[" + client.Account.IP + "]");
            Console.Title = "[" + Database.rates.servername + "] Server. Start time: " + Program.StartDate.ToString("dd/MM/yyyy hh:mm") + ". Players online: " + Kernel.GamePool.Count + "/" + Program.PlayerCap + " Max Online: " + Program.MaxOn + "";
            client.LoggedIn = true;
            client.Screen.Reload(null);
            client.Action = 2;
        }

        public static void RemoveBadSkills(GameClient client)
        {
            if (client.Spells.ContainsKey(10405))
                if (!(client.Entity.FirstRebornClass / 10 == client.Entity.SecondRebornClass / 10 && client.Entity.SecondRebornClass / 10 == client.Entity.Class / 10 && client.Entity.Class / 10 == 6))
                    client.RemoveSpell(new Spell(true) { ID = 10405 });
            if (!client.Spells.ContainsKey(10405))
                if (client.Entity.FirstRebornClass / 10 == client.Entity.SecondRebornClass / 10 && client.Entity.SecondRebornClass / 10 == client.Entity.Class / 10 && client.Entity.Class / 10 == 6)
                    client.AddSpell(new Spell(true) { ID = 10405 });

            if (client.Spells.ContainsKey(6002))
                if (!(client.Entity.FirstRebornClass / 10 == client.Entity.SecondRebornClass / 10 && client.Entity.SecondRebornClass / 10 == client.Entity.Class / 10 && client.Entity.Class / 10 == 5))
                    client.RemoveSpell(new Spell(true) { ID = 6002 });
            if (!client.Spells.ContainsKey(6002))
                if (client.Entity.FirstRebornClass / 10 == client.Entity.SecondRebornClass / 10 && client.Entity.SecondRebornClass / 10 == client.Entity.Class / 10 && client.Entity.Class / 10 == 5)
                    client.AddSpell(new Spell(true) { ID = 6002 });
        }

        public static void LoginMessages(Client.GameClient client)
        {
            #region Inbox
            byte[] numArray1 = new byte[6 + 8];
            Writer.WriteUInt16(6, 0, numArray1);
            Writer.WriteUInt16(1047, 2, numArray1);
            Writer.WriteUInt32(3, 4, numArray1);
            client.Send(numArray1);
            #endregion
            
            foreach (var Guild in Kernel.Guilds.Values)
            {
                Guild.SendName(client);
                client.SendScreen(client.Entity.SpawnPacket, true);
            }
            if ((client.Entity.MyJiang != null))
            {
                client.Entity.MyJiang.OnJiangHu = false;
                client.Entity.MyJiang.SendStatusMode(client);
                client.SendScreen(client.Entity.SpawnPacket, true);

            }
           
            Data datas = new Data(true);
            datas.UID = client.Entity.UID;
            datas.ID = 116;
            datas.dwParam = 1197;
            client.Send(datas);
            client.Send(new Network.GamePackets.AutoShow().ToArray());
            SubclassAutoSwitch(client, client.Entity.SubClass);
            client.Entity.MyAchievement.Send();

            if (client.WarehousePW != 0)
            {
                WareHousePassword whp = new WareHousePassword(true);
                whp.type = WareHousePassword.PasswordCorrect;
                whp.OldPassword = 0x1;
                client.Send(whp);
            }
            if (Constants.FBandSSEvent.Contains(client.Entity.MapID))
            {
                client.Entity.MapID = 1002;
                client.Entity.X = 428;
                client.Entity.Y = 378;
            }
            client.Filtering = true;
            //client.Send(new Message("" + Database.ServerRates.serversite + "", System.Drawing.Color.Red, Network.GamePackets.Message.Website));
            if (client.WentToComplete)
                return;

            #region Flower and kiss Icon
            client.Send(new FlowerPacket(client.Entity.Flowers, client));
            client.Send(new KissPacket(client.Entity.Kisses, client));
            #endregion
            for (ushort i = 1415; i <= 1423; i++)
                if (!client.Spells.ContainsKey(i))
                    client.AddSpell(new Spell(true) { ID = i });
            RemoveBadSkills(client);
            DateTime now = DateTime.Now;
            if (CrossServer.IsWar == true)
            {
                client.Country = CrossServer.GetCountry(client.Entity.CountryID);
                Countrys country = new Countrys();
                country.id = client.Entity.CountryID;
                country.Name = CrossServer.GetCountry(client.Entity.CountryID);
                country.Score = 0;
                country.wins = 0;
                if (!CrossServer.Countrys.ContainsKey(country.id))
                {
                    CrossServer.Countrys.Add(country.id, country);
                }
            }
            if (now.Hour == 20 && now.Minute >= 55 || now.Hour == 21 && now.Minute <= 25)
                if (client.ChampionStats.SignedUp)
                    client.Send(Champion.ChampionKernel.SignUp().BuildPacket());
            if (client.Entity.Class >= 40 && client.Entity.Class <= 45)
            {
                client.RemoveSpell(new Spell(true) { ID = 1025 });//SuperMan
            }
            if (client.Entity.Class >= 142 && client.Entity.Class <= 145)
            {
                client.RemoveSpell(new Spell(true) { ID = 6002 });//PiosnStar
            }
            if (client.Entity.Class >= 60 && client.Entity.Class <= 65)
            {
                client.RemoveSpell(new Spell(true) { ID = 1025 });//Superman
            }
            if (client.Entity.Class >= 132 && client.Entity.Class <= 135)
            {
                client.RemoveSpell(new Spell(true) { ID = 10425 });//tranq
            }
            if (client.Entity.Class >= 50 && client.Entity.Class <= 55)
            {
                client.RemoveSpell(new Spell(true) { ID = 1025 });//Superman
            }
            if (client.Entity.Class >= 10 && client.Entity.Class <= 15)
            {
                client.RemoveSpell(new Spell(true) { ID = 1025 });//Superman
            }
            if (client.Entity.Class >= 142 && client.Entity.Class <= 145)
            {
                client.RemoveSpell(new Spell(true) { ID = 11180 });//MortalDrag
            }
            if (client.Entity.Class >= 142 && client.Entity.Class <= 145)
            {
                client.RemoveSpell(new Spell(true) { ID = 11190 });//MortalDrag
            }
            if (client.Entity.Class >= 142 && client.Entity.Class <= 145)
            {
                client.RemoveSpell(new Spell(true) { ID = 11200 });//MortalDrag
            }
            if (client.Entity.Class >= 42 && client.Entity.Class <= 45)
            {
                client.RemoveSpell(new Spell(true) { ID = 10425 });//Tranquality
            }
            if (client.Entity.Class >= 10 && client.Entity.Class <= 15)
            {
                client.RemoveSpell(new Spell(true) { ID = 6002 });//Poisonstar
            }
            client.WentToComplete = true;
            client.Entity.SendUpdates = true;

            foreach (var Guild in Kernel.Guilds.Values)
            {
                Guild.SendName(client);
            }

            ServerTime time = new ServerTime();
            time.Year = (uint)DateTime.Now.Year;
            time.Month = (uint)DateTime.Now.Month;
            time.DayOfYear = (uint)DateTime.Now.DayOfYear;
            time.DayOfMonth = (uint)DateTime.Now.Day;
            time.Hour = (uint)DateTime.Now.Hour;
            time.Minute = (uint)DateTime.Now.Minute;
            time.Second = (uint)DateTime.Now.Second;
            client.Send(time);
            bool going = false;
            foreach (var epk in ElitePKTournament.Tournaments)
                if (epk.State != ElitePK.States.GUI_Top8Ranking)
                    going = true;
            if (going)
            {
                ElitePKBrackets brackets = new ElitePKBrackets(true, 0);
                brackets.Type = ElitePKBrackets.EPK_State;
                brackets.OnGoing = true;
                client.Send(brackets);
            }
            client.Entity.DoubleExperienceTime = (ushort)(client.Entity.DoubleExperienceTime + (1 - 1));
            client.Entity.HeavenBlessing = (ushort)(client.Entity.HeavenBlessing + (1 - 1));

            if (Kernel.QuizShow.Open)
                Kernel.QuizShow.AddPlayer(client);

            client.Entity.Update(Network.GamePackets.Update.QuizPoints, client.Entity.QuizPoints, true);
            if (client.Mentor != null)
            {
                if (client.Mentor.IsOnline)
                {
                    MentorInformation Information = new MentorInformation(true);
                    Information.Mentor_Type = 1;
                    Information.Mentor_ID = client.Mentor.Client.Entity.UID;
                    Information.Apprentice_ID = client.Entity.UID;
                    Information.Enrole_Date = client.Mentor.EnroleDate;
                    Information.Mentor_Level = client.Mentor.Client.Entity.Level;
                    Information.Mentor_Class = client.Mentor.Client.Entity.Class;
                    Information.Mentor_PkPoints = client.Mentor.Client.Entity.PKPoints;
                    Information.Mentor_Mesh = client.Mentor.Client.Entity.Mesh;
                    Information.Mentor_Online = true;
                    Information.Shared_Battle_Power = client.Entity.BattlePowerFrom(client.Mentor.Client.Entity);
                    Information.String_Count = 3;
                    Information.Mentor_Name = client.Mentor.Client.Entity.Name;
                    Information.Apprentice_Name = client.Entity.Name;
                    Information.Mentor_Spouse_Name = client.Mentor.Client.Entity.Spouse;
                    client.ReviewMentor();
                    client.Send(Information);

                    ApprenticeInformation AppInfo = new ApprenticeInformation();
                    AppInfo.Apprentice_ID = client.Entity.UID;
                    AppInfo.Apprentice_Level = client.Entity.Level;
                    AppInfo.Apprentice_Class = client.Entity.Class;
                    AppInfo.Apprentice_PkPoints = client.Entity.PKPoints;
                    AppInfo.Apprentice_Experience = client.AsApprentice.Actual_Experience;
                    AppInfo.Apprentice_Composing = client.AsApprentice.Actual_Plus;
                    AppInfo.Apprentice_Blessing = client.AsApprentice.Actual_HeavenBlessing;
                    AppInfo.Apprentice_Name = client.Entity.Name;
                    AppInfo.Apprentice_Online = true;
                    AppInfo.Apprentice_Spouse_Name = client.Entity.Spouse;
                    AppInfo.Enrole_date = client.Mentor.EnroleDate;
                    AppInfo.Mentor_ID = client.Mentor.ID;
                    AppInfo.Mentor_Mesh = client.Mentor.Client.Entity.Mesh;
                    AppInfo.Mentor_Name = client.Mentor.Name;
                    AppInfo.Type = 2;
                    client.Mentor.Client.Send(AppInfo);
                }
                else
                {
                    MentorInformation Information = new MentorInformation(true);
                    Information.Mentor_Type = 1;
                    Information.Mentor_ID = client.Mentor.ID;
                    Information.Apprentice_ID = client.Entity.UID;
                    Information.Enrole_Date = client.Mentor.EnroleDate;
                    Information.Mentor_Online = false;
                    Information.String_Count = 2;
                    Information.Mentor_Name = client.Mentor.Name;
                    Information.Apprentice_Name = client.Entity.Name;

                    client.Send(Information);
                }
            }
            NobilityInfo update = new NobilityInfo(true);
            update.Type = NobilityInfo.Icon;
            update.dwParam = client.NobilityInformation.EntityUID;
            update.UpdateString(client.NobilityInformation);
            client.Send(update);

            client.Entity.Update(Update.Merchant, 255, false);

            #region Game Updates
            //if (client.Entity.UpdateViewer == 0)
            //{
            //    HeaderUpdates("" + Database.GameUpdatess.Header + "" + DateTime.Now.ToString(), client);
            //    BodyUpdates("" + Database.GameUpdatess.Body1 + "", client);
            //    BodyUpdates("" + Database.GameUpdatess.Body2 + "", client);
            //    BodyUpdates("" + Database.GameUpdatess.Body3 + "", client);
            //    BodyUpdates("" + Database.GameUpdatess.Body4 + "", client);
            //    BodyUpdates("" + Database.GameUpdatess.Body5 + "", client);
            //    BodyUpdates("" + Database.GameUpdatess.Body6 + "", client);
            //    FooterUpdates("Enjoy Playing " + Constants.ServerName + " with us and invite friends!", client);
            //    Database.UpdateViewer.Save(client);
            //}
            #endregion

            foreach (ConquerItem item in client.Inventory.Objects)
                item.Send(client);

            foreach (ConquerItem item in client.Equipment.Objects)
            {
                if (item != null)
                {
                    if (Database.ConquerItemInformation.BaseInformations.ContainsKey(item.ID))
                    {
                        item.Send(client);
                    }
                    else
                    {
                        client.Equipment.DestroyArrow(item.Position);
                    }
                }
            }
            client.LoadItemStats();
            if (!client.Equipment.Free(5))
            {
                if (IsArrow(client.Equipment.TryGetItem(5).ID))
                {
                    if (client.Equipment.Free(4))
                        client.Equipment.DestroyArrow(5);
                    else
                    {
                        if (client.Equipment.TryGetItem(4).ID / 1000 != 500)
                            client.Equipment.DestroyArrow(5);
                    }
                }
            }
            client.GemAlgorithm();
            client.CalculateStatBonus();
            client.CalculateHPBonus();
            client.Entity.Stamina = 100;
            //client.ReshareClan();
            //if (client.Team != null)
            //    foreach (var teammate in client.Team.Teammates)
            //        teammate.ReshareClan();
            DateTime lastLogin = client["lastlogin"];
            string prevLoc = client["lastlocation"];

            client.Send(new LastLogin()
            {
                TotalSeconds = (uint)(lastLogin - new DateTime(1970, 1, 1).ToLocalTime()).TotalSeconds,
                DifferentCity = prevLoc == client.Account.EarthAdress,
                DifferentPlace = prevLoc != client.Account.EarthAdress
            });
            client["lastlogin"] = DateTime.Now;
            client["lastlocation"] = prevLoc;

            string[] wm = File.ReadAllLines(Constants.WelcomeMessages);
            foreach (string line in wm)
            {
                if (line.Length == 0)
                    continue;
                if (line[0] == ';')
                    continue;
                client.Send(new Message(line, System.Drawing.Color.Red, Message.Talk));
            }

            if (Program.Today == DayOfWeek.Saturday || Program.Today == DayOfWeek.Sunday || Program.Today == DayOfWeek.Monday || Program.Today == DayOfWeek.Thursday || Program.Today == DayOfWeek.Tuesday || Program.Today == DayOfWeek.Wednesday || Program.Today == DayOfWeek.Friday)
                client.Send(new Message("Double experience is on.", System.Drawing.Color.Red, Message.World));
            if (client.Entity.Body >= 1003 && client.Entity.Body <= 1004 && client.Entity.Class >= 60 && client.Entity.Class <= 65)
            {
                client.Entity.HairStyle = 0;
                client.Entity.HairColor = 0;
            }
            if (client.Entity.Body >= 2001 && client.Entity.Body <= 2002 && client.Entity.Class >= 60 && client.Entity.Class <= 65)
            {
                client.Entity.HairStyle = 770;
                client.Entity.HairColor = 3;
            }
            if (client.Entity.VIPLevel > 0)
            {
                Network.GamePackets.VipStatus vip = new Network.GamePackets.VipStatus();
                client.Send(vip.ToArray());
            }
            client.Send(new MapStatus() { BaseID = client.Map.BaseID, ID = client.Map.ID, Status = Database.MapsTable.MapInformations[client.Map.ID].Status, Weather = Database.MapsTable.MapInformations[client.Map.ID].Weather });

            if (client.Entity.Hitpoints == 0)
                client.Entity.Hitpoints = 1;
            client.Entity.VIPLevel = (byte)(client.Entity.VIPLevel + 0);
            client.Entity.HandleTiming = true;
            if (client.Entity.MentorBattlePower != 0)
                client.Entity.Update(Network.GamePackets.Update.MentorBattlePower, client.Entity.MentorBattlePower, false);
            if (client.Guild != null)
            {
                client.Guild.SendAllyAndEnemy(client);
                client.Entity.GuildBattlePower = client.Guild.GetSharedBattlepower(client.AsMember.Rank);
            }
            if (Game.ConquerStructures.Broadcast.CurrentBroadcast.EntityID > 2)
                client.Send(new Network.GamePackets.Message(Game.ConquerStructures.Broadcast.CurrentBroadcast.Message, "ALLUSERS", Game.ConquerStructures.Broadcast.CurrentBroadcast.EntityName, System.Drawing.Color.Red, Network.GamePackets.Message.BroadcastMessage));
            client.Entity.Update(Update.RaceShopPoints, client.RacePoints, false);
            client.Entity.Update(Network.GamePackets.Update.LuckyTimeTimer, client.BlessTime, false);
            if (client.Entity.HeavenBlessing != 0)
                client.Entity.Update(Network.GamePackets.Update.OnlineTraining, client.OnlineTrainingPoints, false);
            if (client.ClaimableItem.Count > 0)
                foreach (var item in client.ClaimableItem.Values)
                    item.Send(client);
            if (client.DeatinedItem.Count > 0)
                foreach (var item in client.DeatinedItem.Values)
                    item.Send(client);
            client.Equipment.UpdateEntityPacket();
            client.Send(new ChiPowers(true).Query(client));
            Database.PkExpelTable.Load(client);
            SendChiRankings(new GenericRanking(true) { Mode = GenericRanking.QueryCount }, client);
            DateTime Now64 = DateTime.Now;
            if (MerchantTable.MerchantCharacters.ContainsKey(client.Entity.UID))
            {
                client.Entity.Sentagain = 1;
                client.Entity.MerchantDay = DateTime.Now;
                client.Send(new Data(true) { UID = client.Entity.UID, ID = Data.OpenCustom, dwParam = Data.CustomCommands.MerchantApply });
            }
            if ((Now64.Hour >= 11 && Now64.Hour < 13) || (Now64.Hour >= 19 && Now64.Hour < 21))
            {
                client.MessageBox("Team arena has started! It will open for two hours! Would you like to sign up?",
                    (p) => { Game.TeamArena.QualifyEngine.DoSignup(p); },
                    (p) => { p.Send("You can still join from the team arena interface!"); });
            }
            if (client.Entity.VIPLevel == 0)
            {
                client.Entity.AddFlag(Update.Flags.Ball);
            }
            if (client.Entity.VIPLevel > 0)
            {
                if (client.Entity.VIPLevel != 6)
                    client.Entity.AddFlag(Update.Flags.OrangeSparkles);
            }
            if (client.Entity.VIPLevel == 6)
            {
                client.Entity.AddFlag(Network.GamePackets.Update.Flags.DivineShield);
            }
            client.LoadItemStats();
        }
        #endregion
        #region Team
        public static void AcceptInviteToJoinTeam(Team team, Client.GameClient client)
        {
            if (client.Team == null && !client.Entity.Dead)
            {
                Client.GameClient Leader;
                if (Kernel.GamePool.TryGetValue(team.UID, out Leader))
                {
                    if (Leader.Team != null)
                    {
                        if (Leader.Team.Full || Leader.Team.ForbidJoin)
                            return;
                        if (Leader.InTeamQualifier()) return;
                        client.Team = new Conquer_Online_Server.Game.ConquerStructures.Team();

                        AddToTeam AddYou = new AddToTeam();
                        AddToTeam AddMe = new AddToTeam();
                        AddMe.Name = client.Entity.Name;
                        AddMe.MaxHitpoints = (ushort)client.Entity.MaxHitpoints;
                        AddMe.Hitpoints = (ushort)client.Entity.Hitpoints;
                        AddMe.Mesh = client.Entity.Mesh;
                        AddMe.UID = client.Entity.UID;
                        foreach (Client.GameClient Teammate in Leader.Team.Teammates)
                        {
                            if (Teammate != null)
                            {
                                Teammate.Send(AddMe);
                                client.Team.Add(Teammate);
                                AddYou.Name = Teammate.Entity.Name;
                                AddYou.MaxHitpoints = (ushort)Teammate.Entity.MaxHitpoints;
                                AddYou.Hitpoints = (ushort)Teammate.Entity.Hitpoints;
                                AddYou.Mesh = Teammate.Entity.Mesh;
                                AddYou.UID = Teammate.Entity.UID;
                                client.Send(AddYou);
                                if (Teammate.Entity.UID != Leader.Entity.UID)
                                    Teammate.Team.Add(client);
                            }
                        }
                        Leader.Team.Add(client);
                        client.Team.Add(client);
                        client.Team.Active = true;
                        client.Team.TeamLeader = false;
                        client.Send(AddMe);
                    }
                }
            }
        }
        public static void SendInviteToJoinTeam(Team team, Client.GameClient client)
        {
            if (client.InTeamQualifier()) return;
            if (client.Team != null)
            {
                if (!client.Team.Full && client.Team.TeamLeader)
                {
                    Client.GameClient Invitee;
                    if (Kernel.GamePool.TryGetValue(team.UID, out Invitee))
                    {
                        if (Invitee.Team == null)
                        {
                            team.UID = client.Entity.UID;
                            PopupLevelBP request = new PopupLevelBP();
                            request.Requester = client.Entity.UID;
                            request.Receiver = Invitee.Entity.UID;
                            request.Level = client.Entity.Level;
                            request.BattlePower = (uint)client.Entity.BattlePower;
                            Invitee.Send(request);
                            Invitee.Send(team);
                            Invitee.Send(request);

                        }
                        else
                        {
                            client.Send(new Message(Invitee.Entity.Name + " is already in a team.", System.Drawing.Color.Purple, Message.TopLeft));
                        }
                    }
                }
            }
        }
        public static void AcceptRequestToJoinTeam(Team team, Client.GameClient client)
        {
            if (client.InTeamQualifier()) return;
            if (client.Team != null && !client.Entity.Dead)
            {
                if (!client.Team.Full && client.Team.TeamLeader && !client.Team.ForbidJoin)
                {
                    Client.GameClient NewTeammate;
                    if (Kernel.GamePool.TryGetValue(team.UID, out NewTeammate))
                    {
                        if (NewTeammate.Team != null)
                            return;

                        NewTeammate.Team = new Conquer_Online_Server.Game.ConquerStructures.Team();

                        AddToTeam AddMe = new AddToTeam();
                        AddToTeam AddYou = new AddToTeam();
                        AddYou.Name = NewTeammate.Entity.Name;
                        AddYou.MaxHitpoints = (ushort)NewTeammate.Entity.MaxHitpoints;
                        AddYou.Hitpoints = (ushort)NewTeammate.Entity.Hitpoints;
                        AddYou.Mesh = NewTeammate.Entity.Mesh;
                        AddYou.UID = NewTeammate.Entity.UID;
                        //lock (client.Team.Teammates)
                        {
                            foreach (Client.GameClient Teammate in client.Team.Teammates)
                            {
                                if (Teammate != null)
                                {
                                    Teammate.Send(AddYou);
                                    NewTeammate.Team.Add(Teammate);
                                    AddMe.Name = Teammate.Entity.Name;
                                    AddMe.MaxHitpoints = (ushort)Teammate.Entity.MaxHitpoints;
                                    AddMe.Hitpoints = (ushort)Teammate.Entity.Hitpoints;
                                    AddMe.Mesh = Teammate.Entity.Mesh;
                                    AddMe.UID = Teammate.Entity.UID;
                                    NewTeammate.Send(AddMe);
                                    if (Teammate.Entity.UID != client.Entity.UID)
                                        Teammate.Team.Add(NewTeammate);
                                }
                            }

                            client.Team.Add(NewTeammate);
                            NewTeammate.Team.Add(NewTeammate);
                            NewTeammate.Team.Active = true;
                            NewTeammate.Team.TeamLeader = false;
                            client.Send(AddYou);
                            NewTeammate.Send(AddYou);
                        }
                    }
                }
            }
        }
        public static void SendRequestJoinToTeam(Team team, Client.GameClient client)
        {
            if (client.Team == null && !client.Entity.Dead)
            {
                Client.GameClient Leader;
                if (Kernel.GamePool.TryGetValue(team.UID, out Leader))
                {
                    if (Leader.Team != null)
                    {
                        if (Leader.InTeamQualifier()) return;
                        if (Leader.Team.TeamLeader && !Leader.Team.Full)
                        {
                            team.UID = client.Entity.UID;
                            PopupLevelBP request = new PopupLevelBP();
                            request.Requester = client.Entity.UID;
                            request.Receiver = Leader.Entity.UID;
                            request.Level = client.Entity.Level;
                            request.BattlePower = (uint)client.Entity.BattlePower;
                            Leader.Send(request);
                            Leader.Send(team);
                            Leader.Send(request);

                        }
                        else
                        {
                            client.Send(new Message(Leader.Entity.Name + "'s team is already full.", System.Drawing.Color.Peru, Message.TopLeft));
                        }
                    }
                    else
                    {
                        client.Send(new Message(Leader.Entity.Name + "'s doesn't have a team.", System.Drawing.Color.Red, Message.TopLeft));
                    }
                }
            }
        }
        public static void LeaveTeam(Team team, Client.GameClient client)
        {
            if (client.Team != null)
            {
                if (!client.Team.TeamLeader)
                {
                    if (client.InTeamQualifier()) return;
                    lock (client.Team.Teammates)
                    {
                        foreach (Client.GameClient Teammate in client.Team.Teammates)
                        {
                            if (Teammate != null)
                            {
                                if (Teammate.Entity.UID != client.Entity.UID)
                                {
                                    Teammate.Send(team);
                                    Teammate.Team.Remove(client.Entity.UID);
                                }
                            }
                        }
                    }
                    client.Send(team);
                    client.Team = null;
                }
            }
        }
        public static void KickFromTeam(Team team, Client.GameClient client)
        {
            if (client.Team != null)
            {
                if (client.Team.TeamLeader)
                {
                    if (client.InTeamQualifier()) return;
                    Client.GameClient Teammate; // The guy we're kicking out
                    if (Kernel.GamePool.TryGetValue(team.UID, out Teammate))
                    {
                        if (Teammate.Team != null)
                        {
                            if (Teammate.Team.IsTeammate(client.Entity.UID))
                            {
                                if (!Teammate.Team.TeamLeader)
                                {
                                    if (Teammate.InTeamQualifier())
                                    {
                                        Teammate.Entity.PreviousTeleport();
                                        if (Teammate.Map.BaseID == 700)
                                            Teammate.Entity.Teleport(1002, 400, 400);
                                        Teammate.Entity.BringToLife();
                                        Teammate.Entity.PKMode = Teammate.PrevPK;
                                        Teammate.Send(new Data(true) { UID = Teammate.Entity.UID, ID = Data.ChangePKMode, dwParam = (uint)Teammate.Entity.PKMode });
                                        Teammate.TeamQualifierGroup = null;
                                    }
                                }
                                LeaveTeam(team, Teammate);
                            }
                        }
                    }
                }
            }
        }
        public static void DismissTeam(Team team, Client.GameClient client)
        {
            if (client.Team != null)
            {
                if (!client.Entity.Dead && client.Team.TeamLeader)
                {
                    if (client.InTeamQualifier()) return;
                    Leadership lship = new Leadership();
                    lship.Type = 1;
                    lock (client.Team.Teammates)
                    {
                        foreach (Client.GameClient Teammate in client.Team.Teammates)
                        {
                            if (Teammate != null)
                            {
                                if (Teammate.Entity.UID != client.Entity.UID)
                                {
                                    lship.UID = Teammate.Entity.UID;
                                    Teammate.Send(lship);
                                    Teammate.Send(team);
                                    Teammate.Team = null;
                                }
                            }
                        }
                    }
                    lship.UID = client.Entity.UID;
                    client.Send(lship);
                    client.Send(team);
                    client.Team = null;

                    client.Entity.RemoveFlag(Update.Flags.TeamLeader);
                }
            }
        }
        public static void CreateTeam(Team team, Client.GameClient client)
        {
            if (!client.Entity.Dead && client.Team == null)
            {
                Leadership lship = new Leadership();
                lship.Type = 1;
                lship.UID = client.Entity.UID;
                lship.LeaderUID = client.Entity.UID;
                lship.IsLeader = 1;
                client.Send(lship);
                client.Entity.AddFlag(Update.Flags.TeamLeader);
                client.Team = new Conquer_Online_Server.Game.ConquerStructures.Team();
                client.Team.Active = true;
                client.Team.TeamLeader = true;
                client.Team.Add(client);
                client.Send(team);
            }
        }
        #endregion
        #region Flower

        public static void AddFlowers(Client.GameClient client, byte[] packet)
        {
            int subtype = packet[4];

            //string UID = (string)client.Entity.UID;
            if (subtype == 1)
            {
                // PrintPacket(packet);
                //Program.WriteLine("Kima");
                // client.Send(new GamePackets.FlowerRank(client.Entity.UID).ThePacket());
            }
            if (subtype == 2)
            {
                if (client.Entity.Body == 2001 || client.Entity.Body == 2002)
                {
                    if (client.Entity.Flowers != null)
                    {
                        Game.Features.Flowers.Flowers F = client.Entity.Flowers;
                        //string ToSend = " " + F.RedRoses.ToString() + " " + F.RedRoses2day.ToString() + " " + F.Lilies.ToString() + " " + F.Lilies2day.ToString() + " ";
                        //ToSend += F.Orchads.ToString() + " " + F.Orchads2day.ToString() + " " + F.Tulips.ToString() + " " + F.Tulips2day.ToString();


                        int mybestcount = 0;
                        if (F.Lilies > mybestcount)
                            mybestcount = (int)F.Lilies;
                        if (F.Orchads > mybestcount)
                            mybestcount = (int)F.Orchads;
                        if (F.RedRoses > mybestcount)
                            mybestcount = (int)F.RedRoses;
                        if (F.Tulips > mybestcount)
                            mybestcount = (int)F.Tulips;


                        if (F.Lilies == mybestcount)
                        {
                            if (mybestcount >= Kernel.MaxLilies)
                            {
                                client.Entity.ActualMyTypeFlower = 30010102;
                                client.Entity.Flowers.Lilies++;
                                client.Entity.Flowers.Lilies2day++;
                                FlowerSpawn fl = new FlowerSpawn("1", client.Entity.Name, F.Lilies.ToString(), client.Entity.UID.ToString(), 30000102);
                                client.Send(fl.ThePacket());
                                Kernel.MaxLilies = (uint)mybestcount;
                            }
                        }
                        if (F.Orchads == mybestcount)
                        {
                            if (mybestcount >= Kernel.MaxOrchads)
                            {
                                client.Entity.ActualMyTypeFlower = 30010202;
                                client.Entity.Flowers.Orchads++;
                                client.Entity.Flowers.Orchads2day++;
                                FlowerSpawn fl = new FlowerSpawn("1", client.Entity.Name, F.Orchads.ToString(), client.Entity.UID.ToString(), 30000202);
                                client.Send(fl.ThePacket());
                                Kernel.MaxOrchads = (uint)mybestcount;
                            }
                        }
                        if (F.RedRoses == mybestcount)
                        {
                            if (mybestcount >= Kernel.MaxRoses)
                            {
                                client.Entity.ActualMyTypeFlower = 30010002;
                                client.Entity.Flowers.RedRoses++;
                                client.Entity.Flowers.RedRoses2day++;
                                FlowerSpawn fl = new FlowerSpawn("1", client.Entity.Name, F.RedRoses.ToString(), client.Entity.UID.ToString(), 30000002);
                                client.Send(fl.ThePacket());
                                Kernel.MaxRoses = (uint)mybestcount;
                            }
                        }
                        if (F.Tulips == mybestcount)
                        {
                            if (mybestcount >= Kernel.MaxTulips)
                            {
                                client.Entity.ActualMyTypeFlower = 30010302;
                                client.Entity.Flowers.Tulips++;
                                client.Entity.Flowers.Tulips2day++;
                                FlowerSpawn fl = new FlowerSpawn("1", client.Entity.Name, F.Tulips.ToString(), client.Entity.UID.ToString(), 30000302);
                                client.Send(fl.ThePacket());
                            } Kernel.MaxTulips = (uint)mybestcount;
                        }
                        //Database.Flowers.SaveFlowerRank(client);

                    }
                    else
                    {
                        client.Entity.Flowers = new Conquer_Online_Server.Game.Features.Flowers.Flowers();
                        Game.Features.Flowers.Flowers F = client.Entity.Flowers;
                        //Database.Flowers.SaveFlowerRank(client);
                    }
                    byte[] packe2nd = new byte[24]
                                {
                                    16, 0 , 127 , 4 , 5 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0   
                                   , 84 , 81 , 83 , 101 , 114 , 118 , 101 , 114                  
                                };
                    client.Send(packe2nd);
                    //client.Send(new GamePackets.FlowerRank(client.Entity.UID).ThePacket());
                }
            }
        }

        #endregion
        public static bool NulledClient(Client.GameClient client)
        {
            if (client == null)
                return true;
            if (client != null && client.Entity == null)
                return true;

            return false;
        }
        public static void SubclassAutoSwitch(Client.GameClient client, byte To)
        {
            foreach (Conquer_Online_Server.Game.SubClass clases in client.Entity.SubClasses.Classes.Values)
            {
                if (client.Entity.SubClasses.Classes.ContainsKey(To) && To > 0)
                {
                    if (client.Entity.SubClass != 0)
                    {
                        Conquer_Online_Server.Game.SubClass subclass = client.Entity.SubClasses.Classes[client.Entity.SubClass];
                        byte[] Packet = null;
                        Packet = new byte[0];
                        Packet = new SubClassShowFull(true) { ID = 1, Class = subclass.ID, Level = client.Entity.SubClasses.Classes[subclass.ID].Phase }.ToArray();
                        client.Send(Packet);
                        client.Entity.SubClass = subclass.ID;
                        client.Entity.SubClassLevel = client.Entity.SubClasses.Classes[subclass.ID].Level;
                        client.Entity.SubClasses.Active = subclass.ID;
                        client.Entity.SubClassesActive = subclass.ID;
                        SubLoad.SubClass(client);
                    }
                }
            }
        }
        #region Achievment and picking packet
        public static void SendWelcome(GameClient client)
        {
            byte[] Buf = new byte[150 + 8];
            Writer.WriteUInt16(150, 0, Buf);//Packet Lenght
            Writer.WriteUInt16(10010, 2, Buf);//Status Packet Id
            Writer.WriteUInt32(client.Entity.UID, 4, Buf);//Client Id
            Writer.WriteUInt32(227, 8, Buf);// Switch
            //  Writer.WriteUInt32((uint)Time32.Now.GetHashCode(), 16, Buf); // Status Effect Type
            Writer.WriteUInt32(164, 20, Buf); //StatusTypes.AzureShield
            Writer.WriteUInt32(1, 22, Buf); //StatusTypes.AzureShield
            Writer.WriteUInt32(3, 32, Buf);//Time duration for the effect
            Writer.WriteUInt32(1, 37, Buf);//Damage Coused by the skill
            Writer.WriteUInt32(30, 38, Buf);//Damage Coused by the skill
            Writer.WriteString("Welcome virulence-Co", 39, Buf);
            client.Send(Buf);
        }
        public static void send1136(Client.GameClient client)
        {

            byte[] data = new byte[20 + 8];
            Writer.WriteUInt32(20, 0, data);
            Writer.WriteUInt32(1136, 2, data);
            Writer.WriteUInt32(client.Entity.UID, 8, data);
            //  Writer.WriteUInt16(ushort.Parse(Data[1]), 12, data);
            client.Send(data);
        }
        public static void Send_Effect(Client.GameClient Client, uint data_8, ushort Type, ushort direction, uint LoopTime, string EffectName)
        {
            // Send_Effect(Client, 220, 164, 1, 5, "Pick");
            //38 + 1 + 8 + EffectName.Length = 47 + EffectName.Length
            //Where 38 is the normal 10010 packet length, 1 for the extra byte at offset 38, 8 for the Server Stamp
            byte[] Packet = new byte[47 + 4 + EffectName.Length];
            Writer.WriteUInt16((ushort)(Packet.Length - 8), 0, Packet);
            Writer.WriteUInt16(10010, 2, Packet);
            Writer.WriteUInt32(Client.Entity.UID, 4, Packet);
            Writer.WriteUInt32(data_8, 8 + 4, Packet);
            Writer.WriteUInt16(Type, 20 + 4, Packet);
            Writer.WriteUInt16(direction, 22 + 4, Packet);
            Writer.WriteUInt32(LoopTime, 32 + 4, Packet);
            Writer.WriteByte(1, 37 + 4, Packet);
            Writer.WriteByte((byte)(EffectName.Length), 38 + 4, Packet);
            Writer.WriteString(EffectName, 39 + 4, Packet);
            Client.Send(Packet);
        }
        #endregion Achievment and picking packet
        
        internal static bool IsShield(uint p)
        {
            return p / 1000 == 900;
        }

        internal static bool IsBow(uint p)
        {
            return p / 1000 == 500;
        }
    }
}